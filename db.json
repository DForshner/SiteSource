{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/BayesDemo.png","path":"images/BayesDemo.png","modified":0,"renderable":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":0},{"_id":"source/images/Engie-award-2015.jpg","path":"images/Engie-award-2015.jpg","modified":0,"renderable":0},{"_id":"source/images/FloatToyScreenShot.png","path":"images/FloatToyScreenShot.png","modified":0,"renderable":0},{"_id":"source/pdfs/Resume.pdf","path":"pdfs/Resume.pdf","modified":1,"renderable":0},{"_id":"source/images/RecordLinkagePipeline.png","path":"images/RecordLinkagePipeline.png","modified":0,"renderable":0},{"_id":"themes/bootstrap-custom/source/css/callouts.css","path":"css/callouts.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/css/hexo-base.css","path":"css/hexo-base.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/css/share-box.css","path":"css/share-box.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/css/styles.styl","path":"css/styles.styl","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/css/highlight-js.css","path":"css/highlight-js.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"source/pdfs/Data Structures for Web Devs.pdf","path":"pdfs/Data Structures for Web Devs.pdf","modified":0,"renderable":0},{"_id":"source/pdfs/Effective Code Reviews.pdf","path":"pdfs/Effective Code Reviews.pdf","modified":0,"renderable":0},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/bootstrap-custom/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1458413268641},{"_id":"themes/bootstrap-custom/LICENSE","hash":"30328fabb2124d0748e58efe8ce363f7a6414640","modified":1458413268644},{"_id":"themes/bootstrap-custom/README.md","hash":"ba9b2ea72c7992b0dc0b422719b62fb98a0c216f","modified":1458413268645},{"_id":"themes/bootstrap-custom/_config.yml","hash":"06f23490361b6cc802ea5f8c0e45230429ccc4b1","modified":1458434077574},{"_id":"themes/bootstrap-custom/package.json","hash":"a185de57d2a79eeea743541f33f9f3724425553f","modified":1458413268669},{"_id":"source/_data/readinglist.yml","hash":"080dac3b8e6e2007e733aa3002785ee54ebaf614","modified":1460747946437},{"_id":"source/_posts/Algorithms-Design-and-Analysis-Part-II.md","hash":"952eef4be7201d8ce1f6491a5d09172ad2f626b7","modified":1460645700280},{"_id":"source/_posts/Ace-the-Programming-Interview-160-Questions-and-Answers-for-Success.md","hash":"4f45b37b3a712d9670fc82e35583d3d95b3786fb","modified":1460645704741},{"_id":"source/_posts/Algorithms-in-a-Nutshell.md","hash":"8d0fd96078acfe8ea8041841b5b18e14473fda5d","modified":1461337506743},{"_id":"source/_posts/Avoid-Overlapping-Footprints.md","hash":"86b8e91b271ea431185859b6f75a590277b9641f","modified":1460645685999},{"_id":"source/_data/tidbits.yml","hash":"3a3c15586cb0698ef1dae98fcc4c41f8405ccee9","modified":1458594157579},{"_id":"source/_posts/4k-Demo-Flop.md","hash":"70492921c860cee52ca43d9aa94970a6d39d2448","modified":1460645750659},{"_id":"source/_posts/Avoid-disregarding-datasheets.md","hash":"2825143530f70301f86e102a16e9ceccbb624319","modified":1460645692852},{"_id":"source/_posts/Avoid-in-circuit-testing-ICT-vias.md","hash":"9335ec22fe35fdb7f742fb6ce7ab4efdffb4db5e","modified":1460645689584},{"_id":"source/_posts/Avoid-tight-testing-tolerances-for-small-capacitance-values.md","hash":"96cd3a23c3f59c583a87c2c162b15bb9a6118f6f","modified":1460646077649},{"_id":"source/_posts/Boltmade-CodeRetreat-Rule110.md","hash":"0c61d85cd24cf07d6a99e7133a9538f46f2a5169","modified":1460646064527},{"_id":"source/_posts/Building-Microservices-Review.md","hash":"ea9624a7ffc29ba1b0cb07c77a9700e9783a2483","modified":1461265909243},{"_id":"source/_posts/Card-Sorting-Meetup.md","hash":"4f019ee790c018f7c8f92bf6e6deaaff8f57f780","modified":1461337719763},{"_id":"source/_posts/Code-Complete-A-Practical-Handbook-of-Software-Construction.md","hash":"b4dea3a32b9cfedec5cae4258e344ea21b276432","modified":1460646056573},{"_id":"source/_posts/CSS-Diner.md","hash":"b6d9eb1699d2b03328e187e0939755a5faa4e95a","modified":1460646039431},{"_id":"source/_posts/Coverage-Is-Not-Strongly-Correlated-With-Test-Suite-Effectiveness.md","hash":"fc05fafeab9df4829ea4da1861bb70c3b84773ee","modified":1460646050080},{"_id":"source/_posts/Cross-Platform-Localization-Strategies.md","hash":"0db62c7c81b39c7d9dafbe8a1513307ef5e7ea5d","modified":1460646042650},{"_id":"source/_posts/Cracking-the-Coding-Interview-150-Programming-Questions-and-Solutions.md","hash":"36d7e7bb1ceaff6db371c9a87a96efa4588e4e70","modified":1460646046303},{"_id":"source/_posts/Design-Patterns-Elements-of-Reusable-Object-Oriented-Software.md","hash":"cc459d35d68bba6d7d3ac3ff17fb574a4dfdf099","modified":1460646031368},{"_id":"source/_posts/Designing-Data-Intensive-Applications.md","hash":"4a83a8d47284ddd5cedf6d0c48051feb220077ba","modified":1461265894407},{"_id":"source/_posts/Data-Structures-for-Web-Devs-Presentation.md","hash":"73668f78ea4e19d717bab033d1677bf1131ea3b4","modified":1460658190599},{"_id":"source/_posts/DevOps-Amazingly-Awesome-Ansible-Meetup.md","hash":"64ff0229bab6f17b4cd3f8c39087feda0e7357fd","modified":1461773582577},{"_id":"source/_posts/Elements-of-Programming-Interviews-300-Questions-and-Solutions.md","hash":"1dd8b6c4636a40339f6d30882c2ec80a85e18875","modified":1460646024371},{"_id":"source/_posts/Effective-Code-Reviews.md","hash":"69a3667cc486df0f8a7ac361c67fae215cce1e45","modified":1460660003658},{"_id":"source/_posts/Ensemble-Learning-Basics.md","hash":"e1d11f7ae79037e3ca519f68f4e2abcca1f610eb","modified":1460646018726},{"_id":"source/_posts/Ever-have-one-of-those-days-where-your-L1-cache-collapses-into-a-black-hole.md","hash":"68cfe5ab620f82832b8fa0fafabba386f5ff51db","modified":1460646015679},{"_id":"source/_posts/Expert-Android-Developers-Speak.md","hash":"c0cb2bccabf7af86a32e3219857191ff4d5fd40e","modified":1460646012304},{"_id":"source/_posts/Explained-Visually.md","hash":"22e2238b7ed6d5cdf3d4ce5d0a1b40aae84fe712","modified":1460646007368},{"_id":"source/_posts/Engie-Award-2015.md","hash":"7bc3b1e5750c5ad9906096fd4f96c20fe05c5340","modified":1460646021119},{"_id":"source/_posts/Exploding-Software-Engineering-Myths.md","hash":"027efb29e83609caff56f86c7131904373d4ebe4","modified":1460646004003},{"_id":"source/_posts/Exploring-Augmented-Interval-Trees.md","hash":"f5809c935cf1cf06074710f8fe0ba120359e13dd","modified":1460646000470},{"_id":"source/_posts/Exploring-Classifying-Documents-Using-Distribution-Of-Term-Uniqueness.md","hash":"ed66d217ae14d41fe2dddddccf2b7d8c5e82cc5f","modified":1462567282519},{"_id":"source/_posts/Exploring-Classifying-Listings-Using-A-Naive-Bayes-Classifier.md","hash":"cdbe61462c997858f93675ccb08d5d8e425337f6","modified":1462568445880},{"_id":"source/_posts/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity.md","hash":"db40a5fde956e422da2975325bf9749fb39136ec","modified":1461344392882},{"_id":"source/_posts/Exploring-Data-Orientated-Game-Engines.md","hash":"70d56c461424d7ea57c90d633f5204bb4c3d162b","modified":1460645972259},{"_id":"source/_posts/Exploring-Finding-Entity-Aliases-Using-N-Gram-Similarity.md","hash":"91715d598809485ea356159ded3cbe6e2da67164","modified":1462289495734},{"_id":"source/_posts/Exploring-Min-Heap-Priority-Queue.md","hash":"0fd24f8efba6e03516002d5edcdebc5f1f0e0530","modified":1460645947593},{"_id":"source/_posts/Exploring-Shannon-s-Prediction-And-Entropy-Of-Written-English.md","hash":"3abe18187212e75276a41af874079a2f119237ed","modified":1460646271340},{"_id":"source/_posts/Exploring-Probabilistic-Data-Structures.md","hash":"849e0d9e25519387f5aab038408f8252038fbbc3","modified":1460645944322},{"_id":"source/_posts/Feature-Extraction.md","hash":"1f1279c445fc434a164ad8ab39d5dda061a7f8fb","modified":1460645922305},{"_id":"source/_posts/First-Look-at-React-js-Flux-Pattern.md","hash":"6ebc00fabe0ef36f6917cd7d6ec0286bb0527ce6","modified":1460645914705},{"_id":"source/_posts/Float-Toy.md","hash":"fd9e698d66cf248099d69277c627f1b07e519039","modified":1461599437135},{"_id":"source/_posts/Google-I-O-Extended-2013.md","hash":"85ab53d8b07d1a47823696fedfd9dd4aaee80cb1","modified":1460645901228},{"_id":"source/_posts/Google-I-O-Extended-2014.md","hash":"46f95a3118381b850aca3badbc5dbe366e3c7d4a","modified":1463675274266},{"_id":"source/_posts/Functional-vs-Imperative-Environments.md","hash":"75b18c24a50a64cd6c9fdd9818fead4e5d1492cc","modified":1460645908700},{"_id":"source/_posts/Growing-Object-Oriented-Software-Guided-by-Tests.md","hash":"ca83e6ffde4c52ec9fe8ba1316a1b0b25a3ed6f7","modified":1460645897884},{"_id":"source/_posts/Google-I-O-Extended-2016.md","hash":"6ef098ac967c6b1e885b162571952a276c3bfb4e","modified":1463675228170},{"_id":"source/_posts/Going-Back-To-School.md","hash":"0b4653ce106e2a3c3da00864b7b21f3e32f42576","modified":1460645904478},{"_id":"source/_posts/Heterogeneous-Parallel-Programming.md","hash":"25e4d62b6abfd3e5e4bb342957d43d2476e06443","modified":1460645890571},{"_id":"source/_posts/Head-First-Design-Patterns.md","hash":"e3dd970e7bfdb25fc71abec39f96f353d35239b1","modified":1460645893899},{"_id":"source/_posts/Hiring-Hacks-How-Stack-Overflow-Interviews-Engineers.md","hash":"8221d4e47b7926ca1a8b1ce52a2b593154d12988","modified":1460653559431},{"_id":"source/_posts/Introduction-to-Meteor-js.md","hash":"1d617801f8e54c757267c4a677d0a000709f984c","modified":1460645882238},{"_id":"source/_posts/Introduction-to-the-Theory-of-Computation-Review.md","hash":"ed9b6204cacb78b3be526a75c1506cb7e69ebc43","modified":1461440309128},{"_id":"source/_posts/Left-Pad-Libration.md","hash":"13aa368408e4fb2e99fd30e2dcdfd785a8021328","modified":1460645876616},{"_id":"source/_posts/M101P-MongoDB-for-Developers.md","hash":"c723ac0b07f2f6ed0ae9db80442c59ad2542194b","modified":1460645873434},{"_id":"source/_posts/Odds-Ends-December-2012.md","hash":"e961c3108e14bbcaa34ff27db74115b2ed70e8cc","modified":1461340292344},{"_id":"source/_posts/Odds-Ends-December-2013.md","hash":"f5a5591390d0944c23d061577815c9cd9f056405","modified":1460645866793},{"_id":"source/_posts/Meetup-Efficient-Analysis-with-SQL.md","hash":"16ca2c51b8e0efa8c4aeae9985e64ba48d98d686","modified":1460645870007},{"_id":"source/_posts/Odds-Ends-December-2014.md","hash":"14b1f762d2708b04d264a7d4754ef7b018fd4ea2","modified":1460645863443},{"_id":"source/_posts/Odds-Ends-December-2015.md","hash":"b9756b397401d62a4ca3ad7eaef608c98a6a202f","modified":1460645859583},{"_id":"source/_posts/Odds-Ends-June-2015.md","hash":"eabd525be7cde15d94f716be9c1f78f7a99670ac","modified":1460645849465},{"_id":"source/_posts/Odds-Ends-March-2013.md","hash":"1cf031a0688d9cca146b580bc85a9dad30053ceb","modified":1460645844680},{"_id":"source/_posts/Odds-Ends-June-2014.md","hash":"67ee9d6a22154c425041baa30251862416f30585","modified":1460645852989},{"_id":"source/_posts/Odds-Ends-March-2014.md","hash":"0b9781ec44ca590820d983acdfbd7408060237f4","modified":1460645841161},{"_id":"source/_posts/Odds-Ends-March-2015.md","hash":"63b9aefff452cc682cdef13338bc612ff4fe2342","modified":1461343515068},{"_id":"source/_posts/Odds-Ends-March-2016.md","hash":"64b6e154690c5b97e8fa40026bb63e8572c27934","modified":1461343611198},{"_id":"source/_posts/Odds-Ends-June-2013.md","hash":"ebdfe7a2636f9e4c89a149457fd13fee5d5c622a","modified":1460645856270},{"_id":"source/_posts/Odds-Ends-September-2012.md","hash":"f056ec9dd3317a2407b08d38ed4f86a6b25fbd25","modified":1461343573892},{"_id":"source/_posts/Odds-Ends-September-2013.md","hash":"99287ddb3f2f3ef65cc44d68ca554991327e40e9","modified":1460645831629},{"_id":"source/_posts/Odds-Ends-September-2015.md","hash":"12af05f9eb0c003595ab263ef6601ea7f35bfec7","modified":1460645822436},{"_id":"source/_posts/One-second-code-Do-YOU-know-how-much-your-computer-can-do-in-a-second.md","hash":"d0f3936d04734c6d9ece839d55afeb7031cad4e0","modified":1460645814086},{"_id":"source/_posts/Odds-Ends-September-2014.md","hash":"1c6f60f45513405d242004ca47a31f0a645d8132","modified":1460645828375},{"_id":"source/_posts/Pattern-Oriented-Software-Architectures-for-Concurrent-and-Networked-Software.md","hash":"b85539c8c7e11153a05307a97dcc3fdd9d651343","modified":1460645810363},{"_id":"source/_posts/Patterns-of-Enterprise-Application-Architecture.md","hash":"c27eca40518b7c7c54dbaf2a591d6bafbcddcf69","modified":1460645806174},{"_id":"source/_posts/Postmortem-for-global-GCE-outage.md","hash":"50c522d6911dd6d56158a8e5c415665198044e50","modified":1460674497497},{"_id":"source/_posts/Record-Linkage-Pipeline.md","hash":"fdfef9586427a0c1493dc0c49deff18e5720974b","modified":1463091772593},{"_id":"source/_posts/Raft-Understandable-Distributed-Consensus.md","hash":"9b28fc1b7f0cd590c6db2c6fdc6d86f60256df3c","modified":1460645802226},{"_id":"source/_posts/Returning-ptr-to-stack-vs-heap-allocated-instance-in-C.md","hash":"2fc0a0480fd664867af67f3f1c34df39c400ae21","modified":1460645798601},{"_id":"source/_posts/SortedList-vs-SortedDictionary.md","hash":"d0136f23c8a9b1415e54654cddb6d48a05ad18e0","modified":1460645790163},{"_id":"source/_posts/Software-Engineering-as-a-Service.md","hash":"5bbbf829c248725860f7399cf1df6d6d4c8d108d","modified":1460645794148},{"_id":"source/_posts/Table-Driven-Design-Example.md","hash":"6db57515a99ae0b108c9f9e09a00ab3ebc369868","modified":1460645787084},{"_id":"source/_posts/Testable-JavaScript-Presentation.md","hash":"506e4eb1621edaead60cde31c0aafa39d81b252b","modified":1460645782215},{"_id":"source/_posts/Testing-Meetup.md","hash":"a2f6c2dc3251ed540bad8e1209a07661ab8a0e67","modified":1460645777488},{"_id":"source/_posts/Text-Mining-with-Twitter-and-R-Meetup.md","hash":"67edd35c9287d07ffb1ba3a387edb1f0f36fc09b","modified":1462203639840},{"_id":"source/_posts/The-Algorithm-Design-Manual.md","hash":"b803a8d1a63554a58002a0994a4dc9dcca2bf8e4","modified":1460645774706},{"_id":"source/_posts/The-Deadlock-Empire.md","hash":"6d7d981c479fa7abadefa2318e809d6435a3a5c6","modified":1460645770159},{"_id":"source/_posts/What-Google-Learned-From-Its-Quest-to-Build-the-Perfect-Team.md","hash":"ae8fb2fe47e3177fead917d0253f2ff80f6decb9","modified":1460645766628},{"_id":"source/_posts/Web-Intelligence-and-Big-Data-Course.md","hash":"bc5df9b4585367cdcc98b311c7aada1fc0484768","modified":1461345816005},{"_id":"source/_posts/What-s-new-in-CPUs-since-the-80s-and-how-does-it-affect-programmers.md","hash":"73c89ede5824c6842ee00d84cf4f4ed96329193d","modified":1460645762898},{"_id":"source/_posts/Why-Should-Software-Architects-Write-Code.md","hash":"dc4edc9d0328dde3a240f5d42e3df9b2941766b8","modified":1460645760085},{"_id":"source/_posts/Working-Effectively-with-Legacy-Code.md","hash":"0009d6adb522e4c6e528f2019e58d225fb648bbb","modified":1461265936149},{"_id":"source/_posts/Working-Out-Bayes-Theorem.md","hash":"d5ce123b31a63855b803c822bb8722d3362bd969","modified":1462293935680},{"_id":"source/images/BayesDemo.png","hash":"f4dfa53362d7b26d921595c3e59e05db6806d5ee","modified":1462291581087},{"_id":"source/images/favicon.png","hash":"6c1a72308ea29ca9738f7985d2ff046571c6d373","modified":1458601377000},{"_id":"source/images/Engie-award-2015.jpg","hash":"2b9ba12195e3b132499b450b8671484a96bbce41","modified":1458674146000},{"_id":"source/images/FloatToyScreenShot.png","hash":"592f87467b9f4f42298f77c1efab730169c97137","modified":1461598728400},{"_id":"themes/bootstrap-custom/languages/default.yml","hash":"feb1dd022dc8897d65baa5b927de2a3d4178d798","modified":1458413268646},{"_id":"themes/bootstrap-custom/languages/zh-CN.yml","hash":"26c2e94093b2b6228c0f26be5f9f238daa6c5d1c","modified":1458413268648},{"_id":"themes/bootstrap-custom/languages/no.yml","hash":"d9a1b34d590f94ab5c03809754e62bc4cf0e8d0f","modified":1458413268647},{"_id":"themes/bootstrap-custom/languages/zh-TW.yml","hash":"b2474b775a8fa0fa3e9e3c58ddb11b20cf65dbc5","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/archive.ejs","hash":"ae0149112760550ec5b5791aed25a9f558008969","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/category.ejs","hash":"6bb634b555083f54904536b0f159c7b3e8febdd7","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/layout.ejs","hash":"9a0572decec3dbaae80688aac6fee4a4f92a9c96","modified":1459376318000},{"_id":"themes/bootstrap-custom/layout/page.ejs","hash":"f93d8ea38272ca1956134f13760a5a59a01657cf","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/tag.ejs","hash":"8c37543c3fb6cbb333f7942f9f9bb8d9c03fb3c2","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/post.ejs","hash":"f93d8ea38272ca1956134f13760a5a59a01657cf","modified":1458413268000},{"_id":"themes/bootstrap-custom/scripts/bs_paginator.js","hash":"b3a84f4758dc3e92c928dc648ab6f17754b9caca","modified":1458413268000},{"_id":"themes/bootstrap-custom/scripts/fancybox.js","hash":"d3f846104c45541f7a45702f937d540dd988a817","modified":1458413268000},{"_id":"themes/bootstrap-custom/scripts/callout.js","hash":"0d80bf4d275c8927a81abf3ab13be167f40060a8","modified":1458413268000},{"_id":"source/pdfs/Resume.pdf","hash":"5263b6da2dd1e60fd842be9f8bb87a90bbb5583d","modified":1463689245686},{"_id":"source/images/RecordLinkagePipeline.png","hash":"e9a1ccb9322f78af130aab79957f8f8b85e1d382","modified":1463086886831},{"_id":"themes/bootstrap-custom/layout/_partial/article.ejs","hash":"1b9bf8c6c8bb3ed6088e8aafd2430f627fe04e6b","modified":1458431065000},{"_id":"themes/bootstrap-custom/layout/_partial/archive.ejs","hash":"eeb449bc1c375a1858be53d8871a3f0add1e54a3","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_partial/footer.ejs","hash":"540e207a4cc046d53f62836a2daef68e19e67472","modified":1458595152000},{"_id":"themes/bootstrap-custom/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_partial/head.ejs","hash":"dc0151659235c780b0c727f302e58f57b2e1ea15","modified":1460051714984},{"_id":"themes/bootstrap-custom/layout/_partial/header.ejs","hash":"ae5d4d0679cde3930e6dae5d89bc0099293c92ae","modified":1459376387000},{"_id":"themes/bootstrap-custom/layout/_partial/inline-scripts.ejs","hash":"9c7f22a744100f6ccba35e66f2d51f0e8ff75135","modified":1458597485000},{"_id":"themes/bootstrap-custom/layout/_partial/archive-post.ejs","hash":"d8864a561579381a2d7a547c1b5575073ade55da","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_partial/masthead.ejs","hash":"67c77796023d2525e143db1448b1f9dc7b7e77c1","modified":1459804830561},{"_id":"themes/bootstrap-custom/layout/_partial/site-name-markup.ejs","hash":"1abd2ab3fd08482c069cc0fc8e96b1319d227cdf","modified":1459476816000},{"_id":"themes/bootstrap-custom/layout/_widget/about.ejs","hash":"35d948d77ba92c907e3e8d3ee34798b8ccf92af4","modified":1460660305266},{"_id":"themes/bootstrap-custom/layout/_partial/sidebar.ejs","hash":"9b2f9e76d75afa2dd64201cbec71e057435996ce","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_widget/archive.ejs","hash":"a05b3924600af24ece0b3c0e44a789933d8434ee","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_widget/category.ejs","hash":"847cdde48d5ec7007d2c2d64703776d80f0f55d8","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_widget/recent_posts.ejs","hash":"2e48283bbdaf0edf230a538b602ff4e7a88ad409","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_widget/tag.ejs","hash":"d84a67bd058aa3666458491692e0c6f4ce136a62","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_widget/tidbits.ejs","hash":"179a0d65fb9206c0532b9bca17f528667af6e107","modified":1458595845000},{"_id":"themes/bootstrap-custom/layout/_widget/reading_list.ejs","hash":"6a6251a97d4fc88c48a7ee6d0e8a4c81b1d53068","modified":1458435588000},{"_id":"themes/bootstrap-custom/layout/_widget/tagcloud.ejs","hash":"0d9cf74861960939875b97e1a86cd8d3710591bf","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/css/callouts.css","hash":"a9853df2c53b6a8dd4e8956c26191f0e241b312f","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/css/custom.css","hash":"4c0521c8edb0b74b74728b6ef86a7646daccfc88","modified":1460662670329},{"_id":"themes/bootstrap-custom/source/css/hexo-base.css","hash":"9fc6a81b54fc530a8e9365e7eee5114fcd215f00","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/css/share-box.css","hash":"9862ff707167947d3ca4ef5acfe4d0d8e4132f85","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/css/styles.styl","hash":"52e64b04ee267cf4bd25628ed54927cd83863fcf","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/css/highlight-js.css","hash":"2b78bf52a38b8aaecef60d64f328217b34fc7665","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/js/script.js","hash":"d191707778ea960fe6861c9ab81d82360e21c001","modified":1459360580000},{"_id":"themes/bootstrap-custom/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1458413268000},{"_id":"source/pdfs/Data Structures for Web Devs.pdf","hash":"122c81a4c5ffe28323ade0b491d947b871fe6ad3","modified":1460654399794},{"_id":"source/pdfs/Effective Code Reviews.pdf","hash":"934ee3dc9e356e2ae30d7c706adab71a75463b85","modified":1460320201911},{"_id":"themes/bootstrap-custom/layout/_partial/post/category.ejs","hash":"79092bf6e9ef978904e6da4e86deacbb6c5435a0","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_partial/post/date.ejs","hash":"5268ce89860066b436cb93873773475fb0ddf41f","modified":1458430951000},{"_id":"themes/bootstrap-custom/layout/_partial/post/gallery.ejs","hash":"3878fb0716709bab5fe584733164cb3bb8482feb","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_partial/post/nav.ejs","hash":"a049d079f802473c468c364cfad0f68c4c560929","modified":1458413268000},{"_id":"themes/bootstrap-custom/layout/_partial/post/title.ejs","hash":"a7b2fa7bcbe3a7bc2f93d73b28a0d2cea0ac7578","modified":1458431370000},{"_id":"themes/bootstrap-custom/layout/_partial/post/tag.ejs","hash":"b52aa363c2ca79316fca9f20267cb43a2ab53386","modified":1458430953000},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458413268000},{"_id":"themes/bootstrap-custom/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1458413268000},{"_id":"public/sitemap.xml","hash":"c4f09cac08db21a63e10187086d52b9777661c29","modified":1463675372471},{"_id":"public/robots.txt","hash":"eb7141542a7cb3ecb110a23ff4045f7ac2542132","modified":1463675373867},{"_id":"public/2016/04/25/Float-Toy/index.html","hash":"5eefada6a1c3263b665ac2d384198f714be0893e","modified":1463675374269},{"_id":"public/2016/03/04/Explained-Visually/index.html","hash":"147bacc3b3aa84be68320e4ea9b36670c4903644","modified":1463675374269},{"_id":"public/2016/02/24/The-Deadlock-Empire/index.html","hash":"b33fe2c8243eff709f96e529bbeadfa41f270da2","modified":1463675374276},{"_id":"public/2016/01/22/Engie-Award-2015/index.html","hash":"f65ebd3166dd005d48e366904d5035aa0474b249","modified":1463675374276},{"_id":"public/2016/01/03/4k-Demo-Flop/index.html","hash":"636de40af821352f3e483baccd03570ed0c57bee","modified":1463675374276},{"_id":"public/2016/01/01/One-second-code-Do-YOU-know-how-much-your-computer-can-do-in-a-second/index.html","hash":"6128142f9cbd3e051573228e3fe82e1f49d1f2b1","modified":1463675374276},{"_id":"public/2015/09/09/Cross-Platform-Localization-Strategies/index.html","hash":"0d6c076f497232c96d744dce4312495bcd8fc332","modified":1463675374277},{"_id":"public/2015/08/20/CSS-Diner/index.html","hash":"2262202f27f25fdd127af372b373d61b39e574da","modified":1463675374277},{"_id":"public/2015/03/14/Exploring-Min-Heap-Priority-Queue/index.html","hash":"540cfa9ccc1a445a877c846a47d003103acfd2dc","modified":1463675374277},{"_id":"public/2015/02/18/Exploding-Software-Engineering-Myths/index.html","hash":"7a9cf75edf2320d21658f165d474327e4a814056","modified":1463675374277},{"_id":"public/2014/12/31/Code-Complete-A-Practical-Handbook-of-Software-Construction/index.html","hash":"91c953a9a7ef608afdc5cd5ddefd9f0d974772ad","modified":1463675374277},{"_id":"public/2014/12/31/Patterns-of-Enterprise-Application-Architecture/index.html","hash":"1a44e29f0d0b20c63ab7fcc0768d6f40e8cdceda","modified":1463675374277},{"_id":"public/2012/03/31/Software-Engineering-as-a-Service/index.html","hash":"19282d21f6faf1d48dc704d8eab0a80241f795b1","modified":1463675374277},{"_id":"public/2008/04/29/Avoid-tight-testing-tolerances-for-small-capacitance-values/index.html","hash":"c13070101a78f1ee1b2cca15cf5774c51000a5a9","modified":1463675374277},{"_id":"public/archives/2008/index.html","hash":"c6582a8d2e7bd83ab589a3f241cc47a6e5c725e9","modified":1463675374277},{"_id":"public/archives/2008/04/index.html","hash":"d6ff16242789229b0ce8e095826a4d685b5c457a","modified":1463675374277},{"_id":"public/archives/2009/index.html","hash":"bb8e78bab34347773d6d1e1cf374530aeacfdc7d","modified":1463675374278},{"_id":"public/archives/2009/01/index.html","hash":"69c3afac8b8726389dee782fc25373b686c14838","modified":1463675374278},{"_id":"public/archives/2009/03/index.html","hash":"8877f735b302eb284b39954785c7a82d73379171","modified":1463675374278},{"_id":"public/archives/2009/08/index.html","hash":"53cfe34be08ffcc53fb7ff60b051873e9e552ded","modified":1463675374278},{"_id":"public/archives/2012/index.html","hash":"32846c8da575c473b2f1ba88686c882e577849c1","modified":1463675374278},{"_id":"public/archives/2012/03/index.html","hash":"fed6a3bc84cf3a580cb1132264c6c1e86c21ea54","modified":1463675374278},{"_id":"public/archives/2012/08/index.html","hash":"78d0728c148dae55d5690c85664657c98afc7b91","modified":1463675374278},{"_id":"public/archives/2012/11/index.html","hash":"81528d6973f8425f522c550cf4d65e053c2d3ea9","modified":1463675374278},{"_id":"public/archives/2012/09/index.html","hash":"14775e31016a969ebbce5d616ec281277fcb456c","modified":1463675374278},{"_id":"public/archives/2013/03/index.html","hash":"ab43c49b7ff07a869681c1b3c7cd66b5110a947f","modified":1463675374278},{"_id":"public/archives/2013/page/3/index.html","hash":"41bacee85f541bbd646462243e4ad0e52f50b9eb","modified":1463675374278},{"_id":"public/archives/2013/02/index.html","hash":"dcfebe750a8ce63abbed1e69a6df15f33802e4a8","modified":1463675374279},{"_id":"public/archives/2013/04/index.html","hash":"ba1468ccb4e3f66a44f4a8009c617181f072b006","modified":1463675374279},{"_id":"public/archives/2013/07/index.html","hash":"571ff0e324c3cfabe3e966318507322e582a103e","modified":1463675374279},{"_id":"public/archives/2013/05/index.html","hash":"7b576900d250ba9d714b1f28be5262fc46d6197c","modified":1463675374280},{"_id":"public/archives/2013/11/index.html","hash":"9b9005dc105288d7e4fae30db7b342a8d4f796c6","modified":1463675374280},{"_id":"public/archives/2014/page/3/index.html","hash":"082df05675b8eaa97a764923d65b1c9ee1cdfeab","modified":1463675374280},{"_id":"public/archives/2014/02/index.html","hash":"961e0ba53291a38441fe4fcb4ca77d3a5e5ba7a2","modified":1463675374280},{"_id":"public/archives/2014/04/index.html","hash":"d6921909932d20eaa9ab0883132ce3e5f80080c4","modified":1463675374280},{"_id":"public/archives/2014/05/index.html","hash":"f32e0b2f2ea92fd7124a53b6b355a39ff29b69d0","modified":1463675374280},{"_id":"public/archives/2014/08/index.html","hash":"e33f94df5110f08f0e9e1ff167c4d7fe7c55eadf","modified":1463675374280},{"_id":"public/archives/2014/11/index.html","hash":"5661a5dd6201afa45f9f4620c86190172d8baabb","modified":1463675374280},{"_id":"public/archives/2014/12/index.html","hash":"9250f585e3c7c604470259e9e2d82a2938231457","modified":1463675374281},{"_id":"public/archives/2015/02/index.html","hash":"fdf908e3c200151e39b2068403f852ea79e5edba","modified":1463675374281},{"_id":"public/archives/2015/03/index.html","hash":"663b5508063bc28aac0b22edd80bf86975a10033","modified":1463675374281},{"_id":"public/archives/2015/06/index.html","hash":"def75260db3cacdd769b89b3f1360318701c5c61","modified":1463675374281},{"_id":"public/archives/2015/05/page/2/index.html","hash":"3fa37622ed161f77b9a3e6a75e5e15673b7bed5c","modified":1463675374281},{"_id":"public/archives/2015/08/index.html","hash":"87588e9fd66a31e2cfcf418b83bcca4af8f0122a","modified":1463675374281},{"_id":"public/archives/2015/11/index.html","hash":"cf1bf9aaea02fecdc6a9dc3dca8a525c9d5fcbcc","modified":1463675374281},{"_id":"public/archives/2015/09/index.html","hash":"97eaf902fc24898a8c3b6ffbef08d647f0958815","modified":1463675374281},{"_id":"public/archives/2015/12/index.html","hash":"fc3516a2acbe57e19805149368a86444495cd180","modified":1463675374281},{"_id":"public/archives/2015/10/index.html","hash":"bc7f8a5685591ef3f8c8f7466113f91bac6f01a6","modified":1463675374281},{"_id":"public/archives/2016/01/index.html","hash":"9597ab41535f3155f95d903b9b3684c9353d2245","modified":1463675374281},{"_id":"public/archives/2016/page/6/index.html","hash":"f6005bb481f9fe409e55bdbe92be8ab3a72e1264","modified":1463675374281},{"_id":"public/archives/2016/03/index.html","hash":"abb493294198c628fea9c156172561a307584d5c","modified":1463675374281},{"_id":"public/archives/2016/02/page/2/index.html","hash":"6d76c74e4b9c4653b57559495237edda2577983c","modified":1463675374281},{"_id":"public/archives/2016/05/index.html","hash":"b1779c5a4ff9bc5086c986d7307127d2599d168a","modified":1463675374281},{"_id":"public/2016/05/11/Record-Linkage-Pipeline/index.html","hash":"11863b9379d9cf17085e1a4156512036976bdbf6","modified":1463675374281},{"_id":"public/2016/05/05/Exploring-Classifying-Listings-Using-A-Naive-Bayes-Classifier/index.html","hash":"d8abb2901591fae97d9cab85af667a6de9234e3d","modified":1463675374282},{"_id":"public/2016/04/30/Exploring-Finding-Entity-Aliases-Using-N-Gram-Similarity/index.html","hash":"38ac8022fedc160d29d5b4d5aa5dd74d1b2ad9ca","modified":1463675374282},{"_id":"public/2016/04/28/Text-Mining-with-Twitter-and-R-Meetup/index.html","hash":"cffc3e1b745aa6cbcc17255109b7cfef4aff308f","modified":1463675374282},{"_id":"public/2016/04/20/DevOps-Amazingly-Awesome-Ansible-Meetup/index.html","hash":"b34240019df83246124b4dabebc0797f3d015907","modified":1463675374282},{"_id":"public/2016/04/11/Data-Structures-for-Web-Devs-Presentation/index.html","hash":"e097197ba09ca7569d9d3189b1d35fbd04b87005","modified":1463675374282},{"_id":"public/2016/04/14/Postmortem-for-global-GCE-outage/index.html","hash":"7428873fd76e1651790a70505149bd33fda643d2","modified":1463675374282},{"_id":"public/2016/04/07/Card-Sorting-Meetup/index.html","hash":"9ee9fbf24c8a75ee693176e1e40601d14a6859d5","modified":1463675374282},{"_id":"public/2016/04/11/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity/index.html","hash":"2f1a0535e3e7d16a4cb5cb2e7475de06e1d91795","modified":1463675374283},{"_id":"public/2016/04/06/Exploring-Classifying-Documents-Using-Distribution-Of-Term-Uniqueness/index.html","hash":"aab271429933f2510f7732ae907bcf7487fc4d2b","modified":1463675374283},{"_id":"public/2016/04/03/Designing-Data-Intensive-Applications/index.html","hash":"4bc5e5c25b8efdb6c17e886ec8dec3629ea5e6c6","modified":1463675374283},{"_id":"public/2016/03/30/Meetup-Efficient-Analysis-with-SQL/index.html","hash":"e5ff78477100f252b73453bd1939ff3e2bc64a77","modified":1463675374283},{"_id":"public/2016/03/28/Exploring-Shannon-s-Prediction-And-Entropy-Of-Written-English/index.html","hash":"2755020ab6b932f1d44eaafb0e12aee7043d9b52","modified":1463675374283},{"_id":"public/2016/03/22/Left-Pad-Libration/index.html","hash":"999a03af84123083f90183dd358eb75112673f86","modified":1463675374283},{"_id":"public/2016/02/29/Odds-Ends-March-2016/index.html","hash":"319f25b525240da3f6654c1e5ed9410349039ac4","modified":1463675374283},{"_id":"public/2016/02/28/Exploring-Augmented-Interval-Trees/index.html","hash":"6cf4a52c252ac7ace048c88a81b39e98da5d9f3e","modified":1463675374283},{"_id":"public/2016/02/25/What-Google-Learned-From-Its-Quest-to-Build-the-Perfect-Team/index.html","hash":"23e1dbd316b126b2a343b756e8f0245bdd13f28e","modified":1463675374283},{"_id":"public/2016/02/24/Why-Should-Software-Architects-Write-Code/index.html","hash":"0f598db03edb44006b71cde41893354a3f96263b","modified":1463675374283},{"_id":"public/2016/02/03/Building-Microservices-Review/index.html","hash":"6de9169341a51f3a7230f9f271e38306db06e0b8","modified":1463675374284},{"_id":"public/2016/02/17/Boltmade-CodeRetreat-Rule110/index.html","hash":"6b021b59ef1f26d2ffe27a7a6c2b26a60455a574","modified":1463675374284},{"_id":"public/2016/01/28/Effective-Code-Reviews/index.html","hash":"8a29a5e1974ddd8c3c6b419bcbd834877e513e8f","modified":1463675374284},{"_id":"public/2015/12/15/Hiring-Hacks-How-Stack-Overflow-Interviews-Engineers/index.html","hash":"e3e5d407adcccecb5327f303bc8e24b133f256cf","modified":1463675374284},{"_id":"public/2015/12/10/Feature-Extraction/index.html","hash":"596cf726d438a4a190908a09df459cfa543b604b","modified":1463675374284},{"_id":"public/2015/12/03/Expert-Android-Developers-Speak/index.html","hash":"5beb4843d66d65f9b495e7f3ec30305b239495ee","modified":1463675374284},{"_id":"public/2015/11/30/Odds-Ends-December-2015/index.html","hash":"ab8b062c38c9445cd8b7ebbc71e40d5e50923fab","modified":1463675374284},{"_id":"public/2015/12/01/Coverage-Is-Not-Strongly-Correlated-With-Test-Suite-Effectiveness/index.html","hash":"16de2842d1faf991097e47cc1c1ee63356c80bb5","modified":1463675374284},{"_id":"public/2015/11/19/Ensemble-Learning-Basics/index.html","hash":"a52f00ab8656f70301a001c174c0c75d45201f00","modified":1463675374284},{"_id":"public/2015/10/10/Raft-Understandable-Distributed-Consensus/index.html","hash":"a187b3bddb6818dd684bebdfefeb0592f099a5b7","modified":1463675374284},{"_id":"public/2015/08/31/Odds-Ends-September-2015/index.html","hash":"1e4e08d9685fd0c237e2983553a3c30566029379","modified":1463675374284},{"_id":"public/2015/08/26/Growing-Object-Oriented-Software-Guided-by-Tests/index.html","hash":"8f8ec8740c08bdd1ed021b68cfa137e028155122","modified":1463675374285},{"_id":"public/2015/06/30/Exploring-Data-Orientated-Game-Engines/index.html","hash":"100996d243f6e088c9cd0350a0c9069953886a80","modified":1463675374285},{"_id":"public/2015/05/31/Odds-Ends-June-2015/index.html","hash":"d23033b20b87f938771426d00cd0c046b8e70547","modified":1463675374285},{"_id":"public/2015/05/31/The-Algorithm-Design-Manual/index.html","hash":"93d8e441867db1d5b6174bd28f6de2748a1e95ad","modified":1463675374285},{"_id":"public/2015/05/31/Algorithms-in-a-Nutshell/index.html","hash":"0f351afe32d2d77b4409bc22494e897d25c44d04","modified":1463675374285},{"_id":"public/2015/05/31/Design-Patterns-Elements-of-Reusable-Object-Oriented-Software/index.html","hash":"50b00e627aab96da4df818632832374514fee29b","modified":1463675374285},{"_id":"public/2015/05/29/Algorithms-Design-and-Analysis-Part-II/index.html","hash":"73190bff0bef5275c445e5fc4711f7011a0f2457","modified":1463675374285},{"_id":"public/2015/05/22/Table-Driven-Design-Example/index.html","hash":"215839144e25475988e4451e6cfc9426c316d8ed","modified":1463675374285},{"_id":"public/2015/03/12/First-Look-at-React-js-Flux-Pattern/index.html","hash":"3f95094b0e589eb62157dfe325d6e2989bb006d1","modified":1463675374285},{"_id":"public/2015/02/28/Odds-Ends-March-2015/index.html","hash":"0bb0eebc840935b7e30da7d6ef68ad780687fe01","modified":1463675374285},{"_id":"public/2015/03/14/What-s-new-in-CPUs-since-the-80s-and-how-does-it-affect-programmers/index.html","hash":"4530592b0f47f09d8d8e825c9eecd346625f4444","modified":1463675374285},{"_id":"public/2015/01/31/Head-First-Design-Patterns/index.html","hash":"bbf2ed778420a7e3effab04902b8884be36fbb9b","modified":1463675374286},{"_id":"public/2015/02/12/Ever-have-one-of-those-days-where-your-L1-cache-collapses-into-a-black-hole/index.html","hash":"e871ef619a1c7834eda680810755d9f4a63ce211","modified":1463675374287},{"_id":"public/2015/01/31/Introduction-to-the-Theory-of-Computation-Review/index.html","hash":"6f97c7f49798d27f1b36701f576c8daac93e921a","modified":1463675374287},{"_id":"public/2015/01/26/Ace-the-Programming-Interview-160-Questions-and-Answers-for-Success/index.html","hash":"d1f89c0a3332ed02bb3d4cc898fc153cb78cba20","modified":1463675374287},{"_id":"public/2015/01/26/Cracking-the-Coding-Interview-150-Programming-Questions-and-Solutions/index.html","hash":"86ddeb40af5477a59d0fac465fb0dbdcb6baed1f","modified":1463675374287},{"_id":"public/2015/01/26/Elements-of-Programming-Interviews-300-Questions-and-Solutions/index.html","hash":"7e41bc0199624ce46d809317211ddc4c06ea8a6c","modified":1463675374287},{"_id":"public/2014/12/31/Working-Effectively-with-Legacy-Code/index.html","hash":"0b2e35b0f8b1ae419221fb08db4c1e63994f5882","modified":1463675374287},{"_id":"public/2014/11/30/Odds-Ends-December-2014/index.html","hash":"d9e626c039b1f436cfedcea1424e274c179ebfaa","modified":1463675374288},{"_id":"public/2014/11/03/M101P-MongoDB-for-Developers/index.html","hash":"5eae23b9660cab908766dfca6412b99d99d73593","modified":1463675374288},{"_id":"public/2014/08/31/Odds-Ends-September-2014/index.html","hash":"472d6b7577129c0ab443b08896503db89c4f4c07","modified":1463675374288},{"_id":"public/2014/05/31/Odds-Ends-June-2014/index.html","hash":"8507fc45d0cb80ed218005add1b1d0d66de9c234","modified":1463675374288},{"_id":"public/2014/04/16/Heterogeneous-Parallel-Programming/index.html","hash":"dc7197f863e6477c75e83580e8d4dbf3f3e0b622","modified":1463675374288},{"_id":"public/2014/05/24/Exploring-Probabilistic-Data-Structures/index.html","hash":"13cd3724b8934deb06445312d02ae9cf87fc8ece","modified":1463675374288},{"_id":"public/2014/05/02/Working-Out-Bayes-Theorem/index.html","hash":"87f7319bb90626bb275a1c95849b155b23baa203","modified":1463675374288},{"_id":"public/2014/02/28/Odds-Ends-March-2014/index.html","hash":"64e07f3084f127619da24ddbacc58ecd92c2f2bf","modified":1463675374288},{"_id":"public/2013/11/30/Odds-Ends-December-2013/index.html","hash":"0861dc413ac9f2c3c6c089b612ac529ac26daa06","modified":1463675374288},{"_id":"public/2013/11/10/Testable-JavaScript-Presentation/index.html","hash":"eb90084302cc2a88513c269bf06534b3993e2fe7","modified":1463675374288},{"_id":"public/2013/07/31/Odds-Ends-September-2013/index.html","hash":"aa9bf8d9b139407c4a59e02c47554cf3b49cbf81","modified":1463675374288},{"_id":"public/2013/05/31/Odds-Ends-June-2013/index.html","hash":"3eefec445e9567879755bc4fc9581ca2e404cd94","modified":1463675374288},{"_id":"public/2013/05/17/Google-I-O-Extended-2013/index.html","hash":"928c88e452d4e2acc6a474bc246be2cb28582aa7","modified":1463675374288},{"_id":"public/2013/05/13/Pattern-Oriented-Software-Architectures-for-Concurrent-and-Networked-Software/index.html","hash":"a906f8ce3fbea7a76725c6c8ebd3ea0b11ab9d80","modified":1463675374288},{"_id":"public/2013/04/27/Web-Intelligence-and-Big-Data-Course/index.html","hash":"c10522f5e16ee3c58c44fd8d3e33134cd7ce2e19","modified":1463675374288},{"_id":"public/2013/03/15/Introduction-to-Meteor-js/index.html","hash":"aa68faf57ce0c53fccb8580d2d29b18da967f88d","modified":1463675374289},{"_id":"public/2013/03/02/Testing-Meetup/index.html","hash":"7c56363ca925918323f280ad360b402803f37d83","modified":1463675374289},{"_id":"public/2013/02/28/Odds-Ends-March-2013/index.html","hash":"1b2ccd22b6d60cdb3f1e94934838d629f88501f2","modified":1463675374289},{"_id":"public/2013/02/12/SortedList-vs-SortedDictionary/index.html","hash":"ff25a36c90ce4be50bdfcfdb84bfcb6c9fc648e0","modified":1463675374289},{"_id":"public/2013/02/22/Functional-vs-Imperative-Environments/index.html","hash":"9656956f8492b7b15942f9cebffc658d7b707375","modified":1463675374289},{"_id":"public/2012/11/30/Odds-Ends-December-2012/index.html","hash":"e7962311bfbccf13821ce494b54dd7b8ebd9ddc4","modified":1463675374289},{"_id":"public/2009/08/08/Going-Back-To-School/index.html","hash":"80c58224c46acfe41db88571cf03504ca0d378ed","modified":1463675374289},{"_id":"public/2012/08/31/Odds-Ends-September-2012/index.html","hash":"933fa39363b7bdf48e6f2e54768a1ecdd574983b","modified":1463675374289},{"_id":"public/2012/09/30/Returning-ptr-to-stack-vs-heap-allocated-instance-in-C/index.html","hash":"4414741ef178faa02905bb91ae7f45dd22c718dc","modified":1463675374289},{"_id":"public/2009/03/08/Avoid-disregarding-datasheets/index.html","hash":"e8325d003f241ccd1646f4df2e63ce60e9148eb3","modified":1463675374289},{"_id":"public/2009/01/08/Avoid-in-circuit-testing-ICT-vias/index.html","hash":"ecda5e9ed3b36c2a297eeb50360541eefea75eea","modified":1463675374289},{"_id":"public/2009/03/02/Avoid-Overlapping-Footprints/index.html","hash":"5ae7c23fb8118c822c534828b531f8c0f57165e8","modified":1463675374289},{"_id":"public/archives/index.html","hash":"be9c29356df2fab7e6d171b8f8660a18e6864c34","modified":1463675374289},{"_id":"public/archives/page/3/index.html","hash":"c8380e06c883d23def4e287f6b2ef45e9913c265","modified":1463675374290},{"_id":"public/archives/page/4/index.html","hash":"ab9cfaeba8c2d0a37b105dbf3fb683a041494425","modified":1463675374290},{"_id":"public/archives/page/5/index.html","hash":"b3a09ef066f34068b901c348725d622150837be4","modified":1463675374290},{"_id":"public/archives/page/2/index.html","hash":"edb28400d63938943b35301cb80c24105066a758","modified":1463675374291},{"_id":"public/archives/page/6/index.html","hash":"1f2cc525ad3152effca40132aef718cd32971c27","modified":1463675374291},{"_id":"public/archives/page/7/index.html","hash":"3b45675f871793ecb8a981eab102c6ec625a3f61","modified":1463675374291},{"_id":"public/archives/page/9/index.html","hash":"a0036d06c9258559e449d25faf956098e0fa39cc","modified":1463675374291},{"_id":"public/archives/page/8/index.html","hash":"2be96a03fb6edcd99ae728f220fe179a447e8a70","modified":1463675374291},{"_id":"public/archives/page/10/index.html","hash":"70c04faf3e4b812ffe5c7ed98f417813b990660b","modified":1463675374291},{"_id":"public/archives/page/11/index.html","hash":"fcdaeec5edc70aa6ffa77802332e5e34389c0efc","modified":1463675374291},{"_id":"public/archives/page/12/index.html","hash":"d4c1c76e304cf165305bce198bc9fc0ecb611060","modified":1463675374291},{"_id":"public/archives/page/13/index.html","hash":"667b81971845be6fb98a138b92ff1cdcb9eec1f3","modified":1463675374291},{"_id":"public/archives/page/14/index.html","hash":"7e07fdf89f28c723548966694a96a47bb0f25f8e","modified":1463675374292},{"_id":"public/archives/page/15/index.html","hash":"0bc62c3e76ffed8dd2a546607ee130d82d90fb41","modified":1463675374292},{"_id":"public/archives/page/16/index.html","hash":"26028c131bb40cca4ee03a11343a8e20753a914f","modified":1463675374292},{"_id":"public/archives/page/17/index.html","hash":"2ddd2a9e0b4d92a5c50d560f5a39fbc4e24a7ccb","modified":1463675374292},{"_id":"public/archives/page/18/index.html","hash":"b1a2786b5001231599111b8c52d9f2c13875b75b","modified":1463675374292},{"_id":"public/archives/2013/index.html","hash":"3cdeaff86ea618de8922f502c98a6cfbda9dccdb","modified":1463675374292},{"_id":"public/archives/2013/page/2/index.html","hash":"0736d748f7d708aed5154ac290cbadcdea72918f","modified":1463675374292},{"_id":"public/archives/2014/index.html","hash":"7a513f59616d10a642fb37f17ac17a57b320c37c","modified":1463675374292},{"_id":"public/archives/2014/page/2/index.html","hash":"be059cf84f46e22d775d8a4710b627674bf5c12e","modified":1463675374292},{"_id":"public/archives/2015/index.html","hash":"63f38997d437ae52be3c331fe82db20b8a0a8327","modified":1463675374292},{"_id":"public/archives/2015/page/2/index.html","hash":"8c95efa3bb23d26fad90501e01d7fcb3c5fcc46f","modified":1463675374292},{"_id":"public/archives/2015/page/4/index.html","hash":"f449debdeabbb6c475f716ff096f3670038718eb","modified":1463675374293},{"_id":"public/archives/2015/page/3/index.html","hash":"f873b05488d9b1dab613a8f9220a3658d1060053","modified":1463675374293},{"_id":"public/archives/2015/page/5/index.html","hash":"b6ea153211358bbad3c9cfc072ebf2bc4f79ac49","modified":1463675374293},{"_id":"public/archives/2015/01/index.html","hash":"af47de3a2713fbc8199083f651059e539d99a46f","modified":1463675374293},{"_id":"public/archives/2015/page/6/index.html","hash":"95649f36e8548787d2b48564170f26b79ddd75f3","modified":1463675374293},{"_id":"public/archives/2015/05/index.html","hash":"5e313079a7b68c8fed75645d031f536c58724f95","modified":1463675374293},{"_id":"public/archives/2016/index.html","hash":"f01df3b357b3937fe3e1240385723ac6286eebfa","modified":1463675374293},{"_id":"public/archives/2016/page/2/index.html","hash":"8b7778020689370d16c0e34c73c5951b98604f97","modified":1463675374293},{"_id":"public/archives/2016/page/3/index.html","hash":"acd95b0ee635f792d288080f120c3cc0fbbd957d","modified":1463675374293},{"_id":"public/archives/2016/page/4/index.html","hash":"c7bdee581ecca8ed4f4c7fb3984a39ae54135648","modified":1463675374293},{"_id":"public/archives/2016/page/5/index.html","hash":"eeafebeba96ed6d018ff76fff221dc641c09daa0","modified":1463675374293},{"_id":"public/archives/2016/04/index.html","hash":"419a2605e6348a5ada61fe653929a263b4c12edc","modified":1463675374293},{"_id":"public/archives/2016/02/index.html","hash":"e6e7752214f619c73a15ddf8fd8f23d8f56b3017","modified":1463675374293},{"_id":"public/index.html","hash":"95164be9a346a413a6619f02f603557a06170788","modified":1463675374293},{"_id":"public/archives/2016/04/page/2/index.html","hash":"eb0c66897778256fc20d3d064416939fb94f5e35","modified":1463675374293},{"_id":"public/page/2/index.html","hash":"31ac898f536b819c879c80ee6a037dfb32ee7d9f","modified":1463675374293},{"_id":"public/page/4/index.html","hash":"28598822234ea67fad9349996c428fb42b543e10","modified":1463675374293},{"_id":"public/page/3/index.html","hash":"4bd85b0110a60e5f67f7854ab7591c783d73ade1","modified":1463675374294},{"_id":"public/page/6/index.html","hash":"318ef43fa2ecc234c95789a43cbd4ba4b3a8c240","modified":1463675374294},{"_id":"public/page/5/index.html","hash":"e324a2dc0318591c9ba4c552ca033f1422b09e73","modified":1463675374294},{"_id":"public/page/8/index.html","hash":"7ba69bd20acf3bade4fa342f6519f436a12259fe","modified":1463675374294},{"_id":"public/page/7/index.html","hash":"89ca685ba975b608569f95820f87bddf2838be6d","modified":1463675374294},{"_id":"public/page/9/index.html","hash":"187f86b28658b0cf1503d2eb274bc0fec0ca12b3","modified":1463675374294},{"_id":"public/page/10/index.html","hash":"3907e9d97ff79ba63fa30a07d97f18422b363db4","modified":1463675374294},{"_id":"public/page/11/index.html","hash":"d0647709c33f652b75ba53de0488d141320676b1","modified":1463675374294},{"_id":"public/archives/2014/06/index.html","hash":"bbc8292945fcd6ec53e45821e0ecff3f6b2bb928","modified":1463675374299},{"_id":"public/tags/Courses/page/2/index.html","hash":"9f6166a7db5c45f9f4c8b395ee4048dcab776dbc","modified":1463675374299},{"_id":"public/tags/Algorithms/index.html","hash":"42473485af9892e1e1caaef9c6a96f6f9c2abad8","modified":1463675374300},{"_id":"public/tags/Failure/index.html","hash":"d8ecaf22915761b9e92937b4ad29b71618bcc062","modified":1463675374300},{"_id":"public/tags/Electronics/index.html","hash":"6224ed6ea8bdebd73c3589c10f8a26c9f93bed40","modified":1463675374300},{"_id":"public/tags/Purposeful-Practice/index.html","hash":"6be9693f1ee2a1fc6b03efca6c52cfcb18d8a9d6","modified":1463675374300},{"_id":"public/tags/Software-Architectures/index.html","hash":"172e634433ddd6eb07ae79e2c58d42bd666e2b12","modified":1463675374300},{"_id":"public/tags/Distributed-Systems/index.html","hash":"1ab09434090508521c635ec6f38feb736cc2c121","modified":1463675374300},{"_id":"public/tags/User-Experience-Design/index.html","hash":"7ff6152b8e4b9fd7cce2edf581684e1f51a46ac8","modified":1463675374300},{"_id":"public/tags/Gamification/index.html","hash":"c67a449170397ee40a12f922e52fcd2aff16a17e","modified":1463675374300},{"_id":"public/tags/Web/index.html","hash":"5a4eba2b6ebdcbda75a1d160ceae1faec7d77a60","modified":1463675374300},{"_id":"public/tags/DevOps/index.html","hash":"29283a0ce68a9adb29c8c41ec6d5e68302a0e50a","modified":1463675374300},{"_id":"public/tags/Databases/index.html","hash":"7f3e84f036a57a3a6ccec31fc71c1d749dc8e585","modified":1463675374300},{"_id":"public/tags/Presentations/index.html","hash":"d7d05689cb0eea20bdec9f0910222e5a21754d7d","modified":1463675374301},{"_id":"public/tags/Data-Science/index.html","hash":"db44a4a9c815e8bbe6e9b93223cc3224f322feed","modified":1463675374301},{"_id":"public/tags/Complexity/index.html","hash":"f4039b97e982633d9237ed9843fa58fbc8d2dd94","modified":1463675374301},{"_id":"public/tags/Visual-Learning/index.html","hash":"d8f70de6f30614d59f1c969c96ee7f55c6421d11","modified":1463675374301},{"_id":"public/tags/Machine-Learning/index.html","hash":"b8a703cf785f0ee29817ae574f46db54c9b69373","modified":1463675374301},{"_id":"public/tags/Natural-Language-Processing/page/2/index.html","hash":"6c74fb7b7070bbbfa5b319ed2a135775f0212362","modified":1463675374301},{"_id":"public/tags/Game-Engines/index.html","hash":"ae1193eddc6413b90175d72edbcbcfaae83ae080","modified":1463675374301},{"_id":"public/tags/Data-Orientated-Design/index.html","hash":"99947b33378dfe323773f479e0caf84c85ab9987","modified":1463675374301},{"_id":"public/tags/React/index.html","hash":"10b077cfc935262afbd23187693bc1b007ff4d63","modified":1463675374301},{"_id":"public/tags/ECMAScript/index.html","hash":"05694eeedfabec3efa642636fbfe41cfae4a1b2f","modified":1463675374301},{"_id":"public/tags/Conferences/index.html","hash":"483e4d153aa4cb371a9c1bb377ef86dc7b1020ab","modified":1463675374301},{"_id":"public/tags/Interviewing/index.html","hash":"7a1845f102c67ee962a6c86d951093b1e46f15ce","modified":1463675374301},{"_id":"public/tags/Functional-Programming/index.html","hash":"1820f9495c1e14abfa6b8fb117b1218a6314e4e2","modified":1463675374302},{"_id":"public/tags/C/index.html","hash":"2327b8f8d57944c30090c02886551d6cf947d314","modified":1463675374302},{"_id":"public/tags/Testing/index.html","hash":"4e44c8318568620b4f9431c36520e33e223c5402","modified":1463675374302},{"_id":"public/tags/Reduction/index.html","hash":"9721fe566bdff24b3fcfd08601bb58571a9d86a9","modified":1463675374302},{"_id":"public/tags/Optimization/index.html","hash":"2bd78aa3fd04125bdcc2dc496ed665519a46ca3c","modified":1463675374302},{"_id":"public/tags/Math/index.html","hash":"a4fdf0ffa976a530e0547eed04f7afaa32b64dc5","modified":1463675374302},{"_id":"public/tags/Concurrency/index.html","hash":"1ceeb16d2690bf692e7247bcf0e94bd643e2f7bf","modified":1463675374302},{"_id":"public/2016/05/18/Google-I-O-Extended-2016/index.html","hash":"2091df902d390ff58ae95b20910baef2dc28236d","modified":1463675374302},{"_id":"public/2014/06/24/Google-I-O-Extended-2014/index.html","hash":"ecd4962d7d9f4e63e668e8eab489a54d020a01d8","modified":1463675374302},{"_id":"public/page/12/index.html","hash":"2abae02c68f32b9ce739643c18036b3b7046de9a","modified":1463675374302},{"_id":"public/page/13/index.html","hash":"cdbe6bf5d941925d384b3760343a5dd0b408413e","modified":1463675374302},{"_id":"public/page/14/index.html","hash":"f02ebf4b215fb7c094c08c6a0c1f368983b51dd2","modified":1463675374302},{"_id":"public/page/15/index.html","hash":"ed75498588ee5ac6b2e6f84ea0973057c8b90f3d","modified":1463675374302},{"_id":"public/page/16/index.html","hash":"44e97140a453fa645ce9b06b4e80efa0d1f5af72","modified":1463675374303},{"_id":"public/page/17/index.html","hash":"720ac55aded0573ee22d2431115b61478d439b57","modified":1463675374303},{"_id":"public/page/18/index.html","hash":"0a30dbfa3511b2278d0b030337bd17f3d86ec992","modified":1463675374303},{"_id":"public/tags/Courses/index.html","hash":"d5c4e05a004a00c73465368b119ebb1614294e14","modified":1463675374303},{"_id":"public/tags/MOOC/index.html","hash":"3767c7764185d41214c92785b16cec88530a87a3","modified":1463675374303},{"_id":"public/tags/μReview/index.html","hash":"33534bc1352e8c6bb7889ae7fd155a248b0b0d2e","modified":1463675374303},{"_id":"public/tags/μReview/page/2/index.html","hash":"09544b8ebd9a0cb3980e478a5221ea859d3cc658","modified":1463675374303},{"_id":"public/tags/μReview/page/3/index.html","hash":"8f40431a7bae96cb4df95550e71cb5b4f67ef550","modified":1463675374303},{"_id":"public/tags/Books/index.html","hash":"b0b58a182ede5b31c30f063e922bcf2d023d5fa6","modified":1463675374303},{"_id":"public/tags/Books/page/2/index.html","hash":"4aecb521d529e4a8d0bfcbdb4d1d26c3716c1842","modified":1463675374303},{"_id":"public/tags/Books/page/3/index.html","hash":"283cf5f427368d43c5df950ec6a09d5e41bb029e","modified":1463675374303},{"_id":"public/tags/Reviews/index.html","hash":"4917cdd45f6ac2297c1f0863b704979456047193","modified":1463675374303},{"_id":"public/tags/Random/index.html","hash":"5eff1ab5eebd1cb4b4783c1002b4851084997efc","modified":1463675374303},{"_id":"public/tags/Random/page/3/index.html","hash":"8076dbb72b4e496b2c9409f89023ef8be14fa380","modified":1463675374304},{"_id":"public/tags/Random/page/4/index.html","hash":"91e706c76f2682f6fc18f127efb4a8e14c38208a","modified":1463675374304},{"_id":"public/tags/Random/page/2/index.html","hash":"55a9df5a06b2b48cc0f17ecc376b8ceac7932c3b","modified":1463675374304},{"_id":"public/tags/Meetup/index.html","hash":"1a93cd8e4f82fde5f8d3383c9ca71dd7b0b878e6","modified":1463675374304},{"_id":"public/tags/Meetup/page/2/index.html","hash":"b7c7310b86e9fd2f1fa642f5deabb774e5be1a1b","modified":1463675374304},{"_id":"public/tags/Empirical-Studies/index.html","hash":"25ed2bb0d9b77fdfecf7afc27aea300a970cc405","modified":1463675374304},{"_id":"public/tags/Software-Development-Practices/index.html","hash":"0b4e01a1e99ced22913e3c8e57ad67a8f5102c4b","modified":1463675374304},{"_id":"public/tags/Data-Structures/index.html","hash":"3d6a8dc99fd3d29abc1f66707b4e5aa105006483","modified":1463675374304},{"_id":"public/tags/Exploring/index.html","hash":"104af2af64fba58c3549ec71cd3168a733fbd864","modified":1463675374304},{"_id":"public/tags/Exploring/page/2/index.html","hash":"a669fd19c964e07e9d7a2e2add3b7f094208843f","modified":1463675374304},{"_id":"public/tags/Natural-Language-Processing/index.html","hash":"849481743ce267ef6991cdbe9b00ae42e02de604","modified":1463675374304},{"_id":"public/tags/Odds-Ends/index.html","hash":"884c8e8760f246a4e9bbbf19c2e9b927ab4d210a","modified":1463675374305},{"_id":"public/tags/Odds-Ends/page/2/index.html","hash":"1af48dff63565861ec8a40735985e2b02a0f5a87","modified":1463675374305},{"_id":"public/tags/Odds-Ends/page/3/index.html","hash":"05c9080b8af188ec99ab265bb11917955c792462","modified":1463675374305},{"_id":"public/pdfs/Resume.pdf","hash":"5263b6da2dd1e60fd842be9f8bb87a90bbb5583d","modified":1463689341237}],"Category":[],"Data":[{"_id":"readinglist","data":{"Doing Data Science":"https://www.goodreads.com/book/show/17346997-doing-data-science?utm_medium=api&amp;utm_source=blog_book","Designing Data-Intensive Applications":"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&amp;utm_source=blog_book","Patterns Principles and Practices of Domain Driven Design":"https://www.goodreads.com/book/show/25531393-patterns-principles-and-practices-of-domain-driven-design?utm_medium=api&amp;utm_source=blog_book"}}],"Page":[],"Post":[{"title":"Algorithms Design and Analysis - Part 2","date":"2015-05-29T13:23:00.000Z","_content":"- Tim Roughgarden does an amazing job explaining how different algorithms work and the problems they are trying to solve.\n- Great graph section covering different minimum spanning tree and shortest path algorithms.\n- The best explanation of dynamic programming I've seen so far.\n- The catchphrase 'Can we do better?' sticks in your head long after the course is over.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Algorithms%20Design%20and%20Analysis%20-%20Part%202%20-%202015%20-%20Coursera.pdf)\n[Course Link](https://www.coursera.org/course/algo2)","source":"_posts/Algorithms-Design-and-Analysis-Part-II.md","raw":"---\ntitle: 'Algorithms Design and Analysis - Part 2'\ndate: 2015-05-29 13:23:00\ntags:\n- Courses\n- MOOC\n- μReview\n---\n- Tim Roughgarden does an amazing job explaining how different algorithms work and the problems they are trying to solve.\n- Great graph section covering different minimum spanning tree and shortest path algorithms.\n- The best explanation of dynamic programming I've seen so far.\n- The catchphrase 'Can we do better?' sticks in your head long after the course is over.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Algorithms%20Design%20and%20Analysis%20-%20Part%202%20-%202015%20-%20Coursera.pdf)\n[Course Link](https://www.coursera.org/course/algo2)","slug":"Algorithms-Design-and-Analysis-Part-II","published":1,"updated":"2016-04-14T14:55:00.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjro0000y0kwm7mytehl","content":"<ul>\n<li>Tim Roughgarden does an amazing job explaining how different algorithms work and the problems they are trying to solve.</li>\n<li>Great graph section covering different minimum spanning tree and shortest path algorithms.</li>\n<li>The best explanation of dynamic programming I’ve seen so far.</li>\n<li>The catchphrase ‘Can we do better?’ sticks in your head long after the course is over.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Algorithms%20Design%20and%20Analysis%20-%20Part%202%20-%202015%20-%20Coursera.pdf\" target=\"_blank\" rel=\"external\">Certificate</a><br><a href=\"https://www.coursera.org/course/algo2\" target=\"_blank\" rel=\"external\">Course Link</a></p>\n","excerpt":"","more":"<ul>\n<li>Tim Roughgarden does an amazing job explaining how different algorithms work and the problems they are trying to solve.</li>\n<li>Great graph section covering different minimum spanning tree and shortest path algorithms.</li>\n<li>The best explanation of dynamic programming I’ve seen so far.</li>\n<li>The catchphrase ‘Can we do better?’ sticks in your head long after the course is over.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Algorithms%20Design%20and%20Analysis%20-%20Part%202%20-%202015%20-%20Coursera.pdf\">Certificate</a><br><a href=\"https://www.coursera.org/course/algo2\">Course Link</a></p>\n"},{"title":"Algorithms in a Nutshell Review","date":"2015-06-01T00:00:00.000Z","_content":"For a desktop reference book, this is a surprisingly fun read.  It gives a broad overview of different algorithms focusing on when you would want to use them and any tradeoffs compared to other solutions.  The book's small size is convenient if you want something to read on the plane.  It also has one of the best chapters on network flow problems I've come across.\n\n[Goodreads](https://www.goodreads.com/book/show/4229486-algorithms-in-a-nutshell?utm_medium=api&amp;utm_source=blog_book)\n\n**Chapter Quotes & Nodes**\n* *Preface*\n1. *Algorithms Matter*\n  * Start with the big picture: understand the problem, identify potential causes, and then dig into the details.  If you decide to try to solve the problem because you *think* you know the cause, you may solve the wrong problem.\n  * Various algorithms have \"sweet spots\" in which their performance has no equal and designers can take advantage of specific information about the problem to improve performance.\n2. *The Mathematics of Algorithms*\n  * <u>Logarithmic algorithms</u> are extremely efficient because they rapidly converge on a solution.  In general, these algorithms succeed because they reduce the size of the problem by about half each time.\n  * Not every operation can be optimized; in fact, optimizing one operation may degrade the execution of another operation.\n3. *Patterns and Domains*\n  * <u>Patterns</u> are a great way to communicate precisely and concisely well-formed concepts.\n  * A pattern is not a template where you simply fill in the blanks *(except the template method ☺)*.   It is an approach, or a plan, for solving a particular class of problems.\n  * A test suite is composed of a set of *k* individual trials (typically *k*≥10).  The best and worse performers are discarded as outliers, the remaining *k*-2 trials are aggregated, and the average and standard deviations are computed.\n  * <u>Domains</u> are application areas that share common traits.  Each domain has its own vocabulary that provides a language to describe the domain.\n  * a <u>floating-point number</u> is a finite representation that is designed to approximate a real number whose representation may be infinite.\n  * The most common way of describing floating-point error is to use the term <u>relative error</u>, which computes the ratio of the absolute error (desired - approximation) with the desired value.\n  * The stack grows \"downward\" and the heap grows upward ... if the stack grows too large, a program crashes because the memory for the individual stack frames will overwrite memory that should be safely protected in the heap.\n  * Dynamic types languages are often interpreted and variable values are known only at runtime, and therefore cannot be checked statically.\n4. *Sorting Algorithms*\n  * <u>Pointer-based storage</u> - A contiguous array of information contains pointers to the actual information rather than storing the information itself.\n  * <u>Value-based storage</u> - Packs a collection of *n* elements into record blocks of a fixed size.\n  * Information is written to secondary storage usually a value-based contiguous collection of bytes.\n  * <u>total ordering</u> - For any two elements *p* and *q* in a collection, exactly one of the following three predicates is true: *p=q, p<q, p>q*.\n  * No algorithm that sorts by comparing elements can do better than O(*n* log *n*) performance in the average or worst case.\n  * <u>Insertion sort</u>\n    * Use when you have a small number of elements to sort or the elements in the initial collection are already \"nearly sorted\".\n    * Inefficient for value-based data because of the amount of memory that must be shifted to make room for a new value.\n  * <u>Quick Sort</u>\n    * Use when you want a good average-case result*\n    * Further computation to identify the proper pivot (beyond median-of-3/5) is rarely able to provide beneficial results because of the incurred costs.\n  * <u>Counting Sort</u>\n    * Can only be used in limited situations because of the constraints that the elements in the array being sorted are drawn from a limited set of *k* elements.\n  * <u>Bucket Sort</u>\n    * Use when the elements are drawn from a dense universe.\n    * The fastest sort when the elements to be sorted can be uniformly partitioned using a fast hashing function.\n    * Reduces its processing costs at the expense of extra space.\n    * Data must be uniformly distributed, so it's evenly partitioned between buckets and an ordered hash function must be used so all elements in bucket b<sub>i</sub> are lexicographically smaller than all elements in bucket b<sub>i+1</sub>.\n    * Once all the elements are sorted into buckets the values can be extracted in sorted order using insertion sort on each bucket.\n5. *Searching*\n  * <u>Sequential Search</u>\n    * If the predominant result of a sequential search is false, you may want to consider a different search algorithm, even when the collection is relatively small.\n    * Move element up/to the front on a successful sequential search to exploit an increased likelihood that the item will be searched for again.  Like Most-Recently-Used (MRU).\n  *  <u>Binary Search</u>\n    * Using secondary storage, the time required to search for an element is dominated by the costs to access the storage.\n    * Can incrementally search for a word as it is being typed.\n  * <u>Hash-based Search</u>\n    * Use a *hash function* to transform one or more characteristics of the searched-for item into a value that is used to index into an indexed hash table.\n    * A poorly designed hash function will leave many of the slots in hash table empty (wasting space) and there will be many collisions where keys map to the same slot (bad performance).\n    * Java's .hashCode() tries to be efficient and caches the value of the computed hash to avoid recomputation.\n    * <u>Perfect hash function</u> guarantees no collisions for a specific set of keys.\n    * The size of A is typically chosen to be a prime number but we can use any number when we are not using open addressing.\n    * As the load factor goes down, the average length of each slot's linked list also goes down improving performance.\n    * Open addressing reduces storage overhead, such as pointers to the next element in a list of collisions.\n    * <u>Perfect hashing<u/> uses a standard hash function to index into a primary table, A.  Each slot, A[*i*], points to a smaller secondary hash table, S<sub>i</sub>, that has an associated hash function h<sub>i</sub>.  The selection of appropriate hash functions guarantees that there are no collisions in the secondary tables giving O(1) performance.\n  * <u>Binary Tree Search</u>\n    * Prefer over arrays when the underlying data in the search set changes (lots of inserts/deletes) frequently.\n    * Prefer over hash-based solution when the set size is unknown, the set is highly dynamic (lots of inserts/deletes), and you want to traverse the data in ascending/descending order.\n    * B-tree variation that minimizes the number of disk accesses.\n6. *Graph Algorithms*\n  * <u>Adjacency matrices</u>\n    * Fixed upper limit beyond which no matrix can be constructed with the available memory.\n    * Unsuitable when there are multiple relationships between a pair of elements.  We end up storing a list at each matrix element which is nearly an adjacently list.\n  * <u>Adjacently list</u>\n    * Vertices could be stored in sorted order to enable rapid failure when searching if an edge exists.\n  * <u>Breadth First Search</u>\n    * Guaranteed to find the shortest path\n    * Stores \"to be visited\" vertices so there may be a non-trivial amount of storage space required for very large graphs.\n  * <u>Dijkstra's algorithm</u> - Single source shortest path\n    * Runs forever if a negative edge weight exists.\n    * Uses priority queue to keep track of the vertice with the shortest distance for the current path.\n  * The <u>most reliable path</u> is the path with the greatest value when each step on the path's probability of success is multiplied together.  Convert to the log probability of success so they can be added instead.\n  * <u>Bellman-Ford</u> - Single source shortest path\n    * Avoid using for dense graphs or it degenerates to O(V<sup>3</sup>)\n    * Works with negative edge weights as long as no negative cycle exists.\n    * Detect negative edge weight by executing primary loop one extra time and looking for changes in values.\n * <u>Floyd-Warshall</u> - All pairs shortest paths\n    * To detect negative edge weights scan the diagonal (i==j) at the end and any -ve values indicate that a -ve cycle exists.\n    * Only need to keep track of matrix of subproblems because we are concerned with the total distance, not the path that involves the fewest number of vertices.\n  * <u>Prim's Algorithm</u> - Minimum spanning tree\n    * Intuition is that the edge(*u,v*) with the lowest weight between the current minimum subgraph and the remaining elements must belong to the minimum spanning tree.\n7. *Path Finding in AI*\n  * Construct a <u>Game tree</u> to find a path from the current game state to some future game state that ensures victory or a draw.\n  * Search tree can be greatly reduced by detecting and eliminating identical states that may simply be rotated or reflected.\n  * <u>A* Search</u>\n    * Variation of Dijkstra's algorithm that directs search with heuristic information when approximate answers are acceptable.\n8. *Network Flow Algorithms*\n  * You could apply linear programming to network flow problems but specialized algorithms with outperform it by several orders of magnitude.\n9. *Computational Geometry*\n10. *When All Else Fails*\n11. *Epilogue*\n  * <u>Know your data</u> - without specific knowledge of your data, it is only possible to recommend algorithms in the most general way.\n  * <u>Decompose the problem into smaller problems</u>\n  * <u>Choose the right data structure</u>\n  * <u>Add storage to increase performance</u> - Many algorithms are optimizied by storing information that reflects the results of past computations.\n  * <u>If not solution is evident, construct a search</u> - Convert the problem into a search over a very large graph.\n  * <u>If no solution is evident, reduce your problem to another problem that has a solution</u>\n  * <u>Writing algorithms is hard -- testing algorithms is harder</u>","source":"_posts/Algorithms-in-a-Nutshell.md","raw":"---\ntitle: Algorithms in a Nutshell Review\ndate: 2015-06-01 00:00:00\ntags:\n  - Books\n  - Reviews\n  - Algorithms\n---\nFor a desktop reference book, this is a surprisingly fun read.  It gives a broad overview of different algorithms focusing on when you would want to use them and any tradeoffs compared to other solutions.  The book's small size is convenient if you want something to read on the plane.  It also has one of the best chapters on network flow problems I've come across.\n\n[Goodreads](https://www.goodreads.com/book/show/4229486-algorithms-in-a-nutshell?utm_medium=api&amp;utm_source=blog_book)\n\n**Chapter Quotes & Nodes**\n* *Preface*\n1. *Algorithms Matter*\n  * Start with the big picture: understand the problem, identify potential causes, and then dig into the details.  If you decide to try to solve the problem because you *think* you know the cause, you may solve the wrong problem.\n  * Various algorithms have \"sweet spots\" in which their performance has no equal and designers can take advantage of specific information about the problem to improve performance.\n2. *The Mathematics of Algorithms*\n  * <u>Logarithmic algorithms</u> are extremely efficient because they rapidly converge on a solution.  In general, these algorithms succeed because they reduce the size of the problem by about half each time.\n  * Not every operation can be optimized; in fact, optimizing one operation may degrade the execution of another operation.\n3. *Patterns and Domains*\n  * <u>Patterns</u> are a great way to communicate precisely and concisely well-formed concepts.\n  * A pattern is not a template where you simply fill in the blanks *(except the template method ☺)*.   It is an approach, or a plan, for solving a particular class of problems.\n  * A test suite is composed of a set of *k* individual trials (typically *k*≥10).  The best and worse performers are discarded as outliers, the remaining *k*-2 trials are aggregated, and the average and standard deviations are computed.\n  * <u>Domains</u> are application areas that share common traits.  Each domain has its own vocabulary that provides a language to describe the domain.\n  * a <u>floating-point number</u> is a finite representation that is designed to approximate a real number whose representation may be infinite.\n  * The most common way of describing floating-point error is to use the term <u>relative error</u>, which computes the ratio of the absolute error (desired - approximation) with the desired value.\n  * The stack grows \"downward\" and the heap grows upward ... if the stack grows too large, a program crashes because the memory for the individual stack frames will overwrite memory that should be safely protected in the heap.\n  * Dynamic types languages are often interpreted and variable values are known only at runtime, and therefore cannot be checked statically.\n4. *Sorting Algorithms*\n  * <u>Pointer-based storage</u> - A contiguous array of information contains pointers to the actual information rather than storing the information itself.\n  * <u>Value-based storage</u> - Packs a collection of *n* elements into record blocks of a fixed size.\n  * Information is written to secondary storage usually a value-based contiguous collection of bytes.\n  * <u>total ordering</u> - For any two elements *p* and *q* in a collection, exactly one of the following three predicates is true: *p=q, p<q, p>q*.\n  * No algorithm that sorts by comparing elements can do better than O(*n* log *n*) performance in the average or worst case.\n  * <u>Insertion sort</u>\n    * Use when you have a small number of elements to sort or the elements in the initial collection are already \"nearly sorted\".\n    * Inefficient for value-based data because of the amount of memory that must be shifted to make room for a new value.\n  * <u>Quick Sort</u>\n    * Use when you want a good average-case result*\n    * Further computation to identify the proper pivot (beyond median-of-3/5) is rarely able to provide beneficial results because of the incurred costs.\n  * <u>Counting Sort</u>\n    * Can only be used in limited situations because of the constraints that the elements in the array being sorted are drawn from a limited set of *k* elements.\n  * <u>Bucket Sort</u>\n    * Use when the elements are drawn from a dense universe.\n    * The fastest sort when the elements to be sorted can be uniformly partitioned using a fast hashing function.\n    * Reduces its processing costs at the expense of extra space.\n    * Data must be uniformly distributed, so it's evenly partitioned between buckets and an ordered hash function must be used so all elements in bucket b<sub>i</sub> are lexicographically smaller than all elements in bucket b<sub>i+1</sub>.\n    * Once all the elements are sorted into buckets the values can be extracted in sorted order using insertion sort on each bucket.\n5. *Searching*\n  * <u>Sequential Search</u>\n    * If the predominant result of a sequential search is false, you may want to consider a different search algorithm, even when the collection is relatively small.\n    * Move element up/to the front on a successful sequential search to exploit an increased likelihood that the item will be searched for again.  Like Most-Recently-Used (MRU).\n  *  <u>Binary Search</u>\n    * Using secondary storage, the time required to search for an element is dominated by the costs to access the storage.\n    * Can incrementally search for a word as it is being typed.\n  * <u>Hash-based Search</u>\n    * Use a *hash function* to transform one or more characteristics of the searched-for item into a value that is used to index into an indexed hash table.\n    * A poorly designed hash function will leave many of the slots in hash table empty (wasting space) and there will be many collisions where keys map to the same slot (bad performance).\n    * Java's .hashCode() tries to be efficient and caches the value of the computed hash to avoid recomputation.\n    * <u>Perfect hash function</u> guarantees no collisions for a specific set of keys.\n    * The size of A is typically chosen to be a prime number but we can use any number when we are not using open addressing.\n    * As the load factor goes down, the average length of each slot's linked list also goes down improving performance.\n    * Open addressing reduces storage overhead, such as pointers to the next element in a list of collisions.\n    * <u>Perfect hashing<u/> uses a standard hash function to index into a primary table, A.  Each slot, A[*i*], points to a smaller secondary hash table, S<sub>i</sub>, that has an associated hash function h<sub>i</sub>.  The selection of appropriate hash functions guarantees that there are no collisions in the secondary tables giving O(1) performance.\n  * <u>Binary Tree Search</u>\n    * Prefer over arrays when the underlying data in the search set changes (lots of inserts/deletes) frequently.\n    * Prefer over hash-based solution when the set size is unknown, the set is highly dynamic (lots of inserts/deletes), and you want to traverse the data in ascending/descending order.\n    * B-tree variation that minimizes the number of disk accesses.\n6. *Graph Algorithms*\n  * <u>Adjacency matrices</u>\n    * Fixed upper limit beyond which no matrix can be constructed with the available memory.\n    * Unsuitable when there are multiple relationships between a pair of elements.  We end up storing a list at each matrix element which is nearly an adjacently list.\n  * <u>Adjacently list</u>\n    * Vertices could be stored in sorted order to enable rapid failure when searching if an edge exists.\n  * <u>Breadth First Search</u>\n    * Guaranteed to find the shortest path\n    * Stores \"to be visited\" vertices so there may be a non-trivial amount of storage space required for very large graphs.\n  * <u>Dijkstra's algorithm</u> - Single source shortest path\n    * Runs forever if a negative edge weight exists.\n    * Uses priority queue to keep track of the vertice with the shortest distance for the current path.\n  * The <u>most reliable path</u> is the path with the greatest value when each step on the path's probability of success is multiplied together.  Convert to the log probability of success so they can be added instead.\n  * <u>Bellman-Ford</u> - Single source shortest path\n    * Avoid using for dense graphs or it degenerates to O(V<sup>3</sup>)\n    * Works with negative edge weights as long as no negative cycle exists.\n    * Detect negative edge weight by executing primary loop one extra time and looking for changes in values.\n * <u>Floyd-Warshall</u> - All pairs shortest paths\n    * To detect negative edge weights scan the diagonal (i==j) at the end and any -ve values indicate that a -ve cycle exists.\n    * Only need to keep track of matrix of subproblems because we are concerned with the total distance, not the path that involves the fewest number of vertices.\n  * <u>Prim's Algorithm</u> - Minimum spanning tree\n    * Intuition is that the edge(*u,v*) with the lowest weight between the current minimum subgraph and the remaining elements must belong to the minimum spanning tree.\n7. *Path Finding in AI*\n  * Construct a <u>Game tree</u> to find a path from the current game state to some future game state that ensures victory or a draw.\n  * Search tree can be greatly reduced by detecting and eliminating identical states that may simply be rotated or reflected.\n  * <u>A* Search</u>\n    * Variation of Dijkstra's algorithm that directs search with heuristic information when approximate answers are acceptable.\n8. *Network Flow Algorithms*\n  * You could apply linear programming to network flow problems but specialized algorithms with outperform it by several orders of magnitude.\n9. *Computational Geometry*\n10. *When All Else Fails*\n11. *Epilogue*\n  * <u>Know your data</u> - without specific knowledge of your data, it is only possible to recommend algorithms in the most general way.\n  * <u>Decompose the problem into smaller problems</u>\n  * <u>Choose the right data structure</u>\n  * <u>Add storage to increase performance</u> - Many algorithms are optimizied by storing information that reflects the results of past computations.\n  * <u>If not solution is evident, construct a search</u> - Convert the problem into a search over a very large graph.\n  * <u>If no solution is evident, reduce your problem to another problem that has a solution</u>\n  * <u>Writing algorithms is hard -- testing algorithms is harder</u>","slug":"Algorithms-in-a-Nutshell","published":1,"updated":"2016-04-22T15:05:06.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjrt0001y0kwr2fkaec1","content":"<p>For a desktop reference book, this is a surprisingly fun read.  It gives a broad overview of different algorithms focusing on when you would want to use them and any tradeoffs compared to other solutions.  The book’s small size is convenient if you want something to read on the plane.  It also has one of the best chapters on network flow problems I’ve come across.</p>\n<p><a href=\"https://www.goodreads.com/book/show/4229486-algorithms-in-a-nutshell?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n<p><strong>Chapter Quotes &amp; Nodes</strong></p>\n<ul>\n<li><em>Preface</em></li>\n</ul>\n<ol>\n<li><em>Algorithms Matter</em><ul>\n<li>Start with the big picture: understand the problem, identify potential causes, and then dig into the details.  If you decide to try to solve the problem because you <em>think</em> you know the cause, you may solve the wrong problem.</li>\n<li>Various algorithms have “sweet spots” in which their performance has no equal and designers can take advantage of specific information about the problem to improve performance.</li>\n</ul>\n</li>\n<li><em>The Mathematics of Algorithms</em><ul>\n<li><u>Logarithmic algorithms</u> are extremely efficient because they rapidly converge on a solution.  In general, these algorithms succeed because they reduce the size of the problem by about half each time.</li>\n<li>Not every operation can be optimized; in fact, optimizing one operation may degrade the execution of another operation.</li>\n</ul>\n</li>\n<li><em>Patterns and Domains</em><ul>\n<li><u>Patterns</u> are a great way to communicate precisely and concisely well-formed concepts.</li>\n<li>A pattern is not a template where you simply fill in the blanks <em>(except the template method ☺)</em>.   It is an approach, or a plan, for solving a particular class of problems.</li>\n<li>A test suite is composed of a set of <em>k</em> individual trials (typically <em>k</em>≥10).  The best and worse performers are discarded as outliers, the remaining <em>k</em>-2 trials are aggregated, and the average and standard deviations are computed.</li>\n<li><u>Domains</u> are application areas that share common traits.  Each domain has its own vocabulary that provides a language to describe the domain.</li>\n<li>a <u>floating-point number</u> is a finite representation that is designed to approximate a real number whose representation may be infinite.</li>\n<li>The most common way of describing floating-point error is to use the term <u>relative error</u>, which computes the ratio of the absolute error (desired - approximation) with the desired value.</li>\n<li>The stack grows “downward” and the heap grows upward … if the stack grows too large, a program crashes because the memory for the individual stack frames will overwrite memory that should be safely protected in the heap.</li>\n<li>Dynamic types languages are often interpreted and variable values are known only at runtime, and therefore cannot be checked statically.</li>\n</ul>\n</li>\n<li><em>Sorting Algorithms</em><ul>\n<li><u>Pointer-based storage</u> - A contiguous array of information contains pointers to the actual information rather than storing the information itself.</li>\n<li><u>Value-based storage</u> - Packs a collection of <em>n</em> elements into record blocks of a fixed size.</li>\n<li>Information is written to secondary storage usually a value-based contiguous collection of bytes.</li>\n<li><u>total ordering</u> - For any two elements <em>p</em> and <em>q</em> in a collection, exactly one of the following three predicates is true: <em>p=q, p<q, p=\"\">q</q,></em>.</li>\n<li>No algorithm that sorts by comparing elements can do better than O(<em>n</em> log <em>n</em>) performance in the average or worst case.</li>\n<li><u>Insertion sort</u><ul>\n<li>Use when you have a small number of elements to sort or the elements in the initial collection are already “nearly sorted”.</li>\n<li>Inefficient for value-based data because of the amount of memory that must be shifted to make room for a new value.</li>\n</ul>\n</li>\n<li><u>Quick Sort</u><ul>\n<li>Use when you want a good average-case result*</li>\n<li>Further computation to identify the proper pivot (beyond median-of-3/5) is rarely able to provide beneficial results because of the incurred costs.</li>\n</ul>\n</li>\n<li><u>Counting Sort</u><ul>\n<li>Can only be used in limited situations because of the constraints that the elements in the array being sorted are drawn from a limited set of <em>k</em> elements.</li>\n</ul>\n</li>\n<li><u>Bucket Sort</u><ul>\n<li>Use when the elements are drawn from a dense universe.</li>\n<li>The fastest sort when the elements to be sorted can be uniformly partitioned using a fast hashing function.</li>\n<li>Reduces its processing costs at the expense of extra space.</li>\n<li>Data must be uniformly distributed, so it’s evenly partitioned between buckets and an ordered hash function must be used so all elements in bucket b<sub>i</sub> are lexicographically smaller than all elements in bucket b<sub>i+1</sub>.</li>\n<li>Once all the elements are sorted into buckets the values can be extracted in sorted order using insertion sort on each bucket.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Searching</em><ul>\n<li><u>Sequential Search</u><ul>\n<li>If the predominant result of a sequential search is false, you may want to consider a different search algorithm, even when the collection is relatively small.</li>\n<li>Move element up/to the front on a successful sequential search to exploit an increased likelihood that the item will be searched for again.  Like Most-Recently-Used (MRU).</li>\n</ul>\n</li>\n<li><u>Binary Search</u><ul>\n<li>Using secondary storage, the time required to search for an element is dominated by the costs to access the storage.</li>\n<li>Can incrementally search for a word as it is being typed.</li>\n</ul>\n</li>\n<li><u>Hash-based Search</u><ul>\n<li>Use a <em>hash function</em> to transform one or more characteristics of the searched-for item into a value that is used to index into an indexed hash table.</li>\n<li>A poorly designed hash function will leave many of the slots in hash table empty (wasting space) and there will be many collisions where keys map to the same slot (bad performance).</li>\n<li>Java’s .hashCode() tries to be efficient and caches the value of the computed hash to avoid recomputation.</li>\n<li><u>Perfect hash function</u> guarantees no collisions for a specific set of keys.</li>\n<li>The size of A is typically chosen to be a prime number but we can use any number when we are not using open addressing.</li>\n<li>As the load factor goes down, the average length of each slot’s linked list also goes down improving performance.</li>\n<li>Open addressing reduces storage overhead, such as pointers to the next element in a list of collisions.</li>\n<li><u>Perfect hashing<u> uses a standard hash function to index into a primary table, A.  Each slot, A[<em>i</em>], points to a smaller secondary hash table, S<sub>i</sub>, that has an associated hash function h<sub>i</sub>.  The selection of appropriate hash functions guarantees that there are no collisions in the secondary tables giving O(1) performance.</u></u></li>\n</ul>\n</li>\n<li><u>Binary Tree Search</u><ul>\n<li>Prefer over arrays when the underlying data in the search set changes (lots of inserts/deletes) frequently.</li>\n<li>Prefer over hash-based solution when the set size is unknown, the set is highly dynamic (lots of inserts/deletes), and you want to traverse the data in ascending/descending order.</li>\n<li>B-tree variation that minimizes the number of disk accesses.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Graph Algorithms</em><ul>\n<li><u>Adjacency matrices</u><ul>\n<li>Fixed upper limit beyond which no matrix can be constructed with the available memory.</li>\n<li>Unsuitable when there are multiple relationships between a pair of elements.  We end up storing a list at each matrix element which is nearly an adjacently list.</li>\n</ul>\n</li>\n<li><u>Adjacently list</u><ul>\n<li>Vertices could be stored in sorted order to enable rapid failure when searching if an edge exists.</li>\n</ul>\n</li>\n<li><u>Breadth First Search</u><ul>\n<li>Guaranteed to find the shortest path</li>\n<li>Stores “to be visited” vertices so there may be a non-trivial amount of storage space required for very large graphs.</li>\n</ul>\n</li>\n<li><u>Dijkstra’s algorithm</u> - Single source shortest path<ul>\n<li>Runs forever if a negative edge weight exists.</li>\n<li>Uses priority queue to keep track of the vertice with the shortest distance for the current path.</li>\n</ul>\n</li>\n<li>The <u>most reliable path</u> is the path with the greatest value when each step on the path’s probability of success is multiplied together.  Convert to the log probability of success so they can be added instead.</li>\n<li><u>Bellman-Ford</u> - Single source shortest path<ul>\n<li>Avoid using for dense graphs or it degenerates to O(V<sup>3</sup>)</li>\n<li>Works with negative edge weights as long as no negative cycle exists.</li>\n<li>Detect negative edge weight by executing primary loop one extra time and looking for changes in values.</li>\n</ul>\n</li>\n<li><u>Floyd-Warshall</u> - All pairs shortest paths<ul>\n<li>To detect negative edge weights scan the diagonal (i==j) at the end and any -ve values indicate that a -ve cycle exists.</li>\n<li>Only need to keep track of matrix of subproblems because we are concerned with the total distance, not the path that involves the fewest number of vertices.</li>\n</ul>\n</li>\n<li><u>Prim’s Algorithm</u> - Minimum spanning tree<ul>\n<li>Intuition is that the edge(<em>u,v</em>) with the lowest weight between the current minimum subgraph and the remaining elements must belong to the minimum spanning tree.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Path Finding in AI</em><ul>\n<li>Construct a <u>Game tree</u> to find a path from the current game state to some future game state that ensures victory or a draw.</li>\n<li>Search tree can be greatly reduced by detecting and eliminating identical states that may simply be rotated or reflected.</li>\n<li><u>A* Search</u><ul>\n<li>Variation of Dijkstra’s algorithm that directs search with heuristic information when approximate answers are acceptable.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Network Flow Algorithms</em><ul>\n<li>You could apply linear programming to network flow problems but specialized algorithms with outperform it by several orders of magnitude.</li>\n</ul>\n</li>\n<li><em>Computational Geometry</em></li>\n<li><em>When All Else Fails</em></li>\n<li><em>Epilogue</em><ul>\n<li><u>Know your data</u> - without specific knowledge of your data, it is only possible to recommend algorithms in the most general way.</li>\n<li><u>Decompose the problem into smaller problems</u></li>\n<li><u>Choose the right data structure</u></li>\n<li><u>Add storage to increase performance</u> - Many algorithms are optimizied by storing information that reflects the results of past computations.</li>\n<li><u>If not solution is evident, construct a search</u> - Convert the problem into a search over a very large graph.</li>\n<li><u>If no solution is evident, reduce your problem to another problem that has a solution</u></li>\n<li><u>Writing algorithms is hard – testing algorithms is harder</u></li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>For a desktop reference book, this is a surprisingly fun read.  It gives a broad overview of different algorithms focusing on when you would want to use them and any tradeoffs compared to other solutions.  The book’s small size is convenient if you want something to read on the plane.  It also has one of the best chapters on network flow problems I’ve come across.</p>\n<p><a href=\"https://www.goodreads.com/book/show/4229486-algorithms-in-a-nutshell?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n<p><strong>Chapter Quotes &amp; Nodes</strong></p>\n<ul>\n<li><em>Preface</em></li>\n</ul>\n<ol>\n<li><em>Algorithms Matter</em><ul>\n<li>Start with the big picture: understand the problem, identify potential causes, and then dig into the details.  If you decide to try to solve the problem because you <em>think</em> you know the cause, you may solve the wrong problem.</li>\n<li>Various algorithms have “sweet spots” in which their performance has no equal and designers can take advantage of specific information about the problem to improve performance.</li>\n</ul>\n</li>\n<li><em>The Mathematics of Algorithms</em><ul>\n<li><u>Logarithmic algorithms</u> are extremely efficient because they rapidly converge on a solution.  In general, these algorithms succeed because they reduce the size of the problem by about half each time.</li>\n<li>Not every operation can be optimized; in fact, optimizing one operation may degrade the execution of another operation.</li>\n</ul>\n</li>\n<li><em>Patterns and Domains</em><ul>\n<li><u>Patterns</u> are a great way to communicate precisely and concisely well-formed concepts.</li>\n<li>A pattern is not a template where you simply fill in the blanks <em>(except the template method ☺)</em>.   It is an approach, or a plan, for solving a particular class of problems.</li>\n<li>A test suite is composed of a set of <em>k</em> individual trials (typically <em>k</em>≥10).  The best and worse performers are discarded as outliers, the remaining <em>k</em>-2 trials are aggregated, and the average and standard deviations are computed.</li>\n<li><u>Domains</u> are application areas that share common traits.  Each domain has its own vocabulary that provides a language to describe the domain.</li>\n<li>a <u>floating-point number</u> is a finite representation that is designed to approximate a real number whose representation may be infinite.</li>\n<li>The most common way of describing floating-point error is to use the term <u>relative error</u>, which computes the ratio of the absolute error (desired - approximation) with the desired value.</li>\n<li>The stack grows “downward” and the heap grows upward … if the stack grows too large, a program crashes because the memory for the individual stack frames will overwrite memory that should be safely protected in the heap.</li>\n<li>Dynamic types languages are often interpreted and variable values are known only at runtime, and therefore cannot be checked statically.</li>\n</ul>\n</li>\n<li><em>Sorting Algorithms</em><ul>\n<li><u>Pointer-based storage</u> - A contiguous array of information contains pointers to the actual information rather than storing the information itself.</li>\n<li><u>Value-based storage</u> - Packs a collection of <em>n</em> elements into record blocks of a fixed size.</li>\n<li>Information is written to secondary storage usually a value-based contiguous collection of bytes.</li>\n<li><u>total ordering</u> - For any two elements <em>p</em> and <em>q</em> in a collection, exactly one of the following three predicates is true: <em>p=q, p<q, p>q</em>.</li>\n<li>No algorithm that sorts by comparing elements can do better than O(<em>n</em> log <em>n</em>) performance in the average or worst case.</li>\n<li><u>Insertion sort</u><ul>\n<li>Use when you have a small number of elements to sort or the elements in the initial collection are already “nearly sorted”.</li>\n<li>Inefficient for value-based data because of the amount of memory that must be shifted to make room for a new value.</li>\n</ul>\n</li>\n<li><u>Quick Sort</u><ul>\n<li>Use when you want a good average-case result*</li>\n<li>Further computation to identify the proper pivot (beyond median-of-3/5) is rarely able to provide beneficial results because of the incurred costs.</li>\n</ul>\n</li>\n<li><u>Counting Sort</u><ul>\n<li>Can only be used in limited situations because of the constraints that the elements in the array being sorted are drawn from a limited set of <em>k</em> elements.</li>\n</ul>\n</li>\n<li><u>Bucket Sort</u><ul>\n<li>Use when the elements are drawn from a dense universe.</li>\n<li>The fastest sort when the elements to be sorted can be uniformly partitioned using a fast hashing function.</li>\n<li>Reduces its processing costs at the expense of extra space.</li>\n<li>Data must be uniformly distributed, so it’s evenly partitioned between buckets and an ordered hash function must be used so all elements in bucket b<sub>i</sub> are lexicographically smaller than all elements in bucket b<sub>i+1</sub>.</li>\n<li>Once all the elements are sorted into buckets the values can be extracted in sorted order using insertion sort on each bucket.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Searching</em><ul>\n<li><u>Sequential Search</u><ul>\n<li>If the predominant result of a sequential search is false, you may want to consider a different search algorithm, even when the collection is relatively small.</li>\n<li>Move element up/to the front on a successful sequential search to exploit an increased likelihood that the item will be searched for again.  Like Most-Recently-Used (MRU).</li>\n</ul>\n</li>\n<li><u>Binary Search</u><ul>\n<li>Using secondary storage, the time required to search for an element is dominated by the costs to access the storage.</li>\n<li>Can incrementally search for a word as it is being typed.</li>\n</ul>\n</li>\n<li><u>Hash-based Search</u><ul>\n<li>Use a <em>hash function</em> to transform one or more characteristics of the searched-for item into a value that is used to index into an indexed hash table.</li>\n<li>A poorly designed hash function will leave many of the slots in hash table empty (wasting space) and there will be many collisions where keys map to the same slot (bad performance).</li>\n<li>Java’s .hashCode() tries to be efficient and caches the value of the computed hash to avoid recomputation.</li>\n<li><u>Perfect hash function</u> guarantees no collisions for a specific set of keys.</li>\n<li>The size of A is typically chosen to be a prime number but we can use any number when we are not using open addressing.</li>\n<li>As the load factor goes down, the average length of each slot’s linked list also goes down improving performance.</li>\n<li>Open addressing reduces storage overhead, such as pointers to the next element in a list of collisions.</li>\n<li><u>Perfect hashing<u/> uses a standard hash function to index into a primary table, A.  Each slot, A[<em>i</em>], points to a smaller secondary hash table, S<sub>i</sub>, that has an associated hash function h<sub>i</sub>.  The selection of appropriate hash functions guarantees that there are no collisions in the secondary tables giving O(1) performance.</li>\n</ul>\n</li>\n<li><u>Binary Tree Search</u><ul>\n<li>Prefer over arrays when the underlying data in the search set changes (lots of inserts/deletes) frequently.</li>\n<li>Prefer over hash-based solution when the set size is unknown, the set is highly dynamic (lots of inserts/deletes), and you want to traverse the data in ascending/descending order.</li>\n<li>B-tree variation that minimizes the number of disk accesses.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Graph Algorithms</em><ul>\n<li><u>Adjacency matrices</u><ul>\n<li>Fixed upper limit beyond which no matrix can be constructed with the available memory.</li>\n<li>Unsuitable when there are multiple relationships between a pair of elements.  We end up storing a list at each matrix element which is nearly an adjacently list.</li>\n</ul>\n</li>\n<li><u>Adjacently list</u><ul>\n<li>Vertices could be stored in sorted order to enable rapid failure when searching if an edge exists.</li>\n</ul>\n</li>\n<li><u>Breadth First Search</u><ul>\n<li>Guaranteed to find the shortest path</li>\n<li>Stores “to be visited” vertices so there may be a non-trivial amount of storage space required for very large graphs.</li>\n</ul>\n</li>\n<li><u>Dijkstra’s algorithm</u> - Single source shortest path<ul>\n<li>Runs forever if a negative edge weight exists.</li>\n<li>Uses priority queue to keep track of the vertice with the shortest distance for the current path.</li>\n</ul>\n</li>\n<li>The <u>most reliable path</u> is the path with the greatest value when each step on the path’s probability of success is multiplied together.  Convert to the log probability of success so they can be added instead.</li>\n<li><u>Bellman-Ford</u> - Single source shortest path<ul>\n<li>Avoid using for dense graphs or it degenerates to O(V<sup>3</sup>)</li>\n<li>Works with negative edge weights as long as no negative cycle exists.</li>\n<li>Detect negative edge weight by executing primary loop one extra time and looking for changes in values.</li>\n</ul>\n</li>\n<li><u>Floyd-Warshall</u> - All pairs shortest paths<ul>\n<li>To detect negative edge weights scan the diagonal (i==j) at the end and any -ve values indicate that a -ve cycle exists.</li>\n<li>Only need to keep track of matrix of subproblems because we are concerned with the total distance, not the path that involves the fewest number of vertices.</li>\n</ul>\n</li>\n<li><u>Prim’s Algorithm</u> - Minimum spanning tree<ul>\n<li>Intuition is that the edge(<em>u,v</em>) with the lowest weight between the current minimum subgraph and the remaining elements must belong to the minimum spanning tree.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Path Finding in AI</em><ul>\n<li>Construct a <u>Game tree</u> to find a path from the current game state to some future game state that ensures victory or a draw.</li>\n<li>Search tree can be greatly reduced by detecting and eliminating identical states that may simply be rotated or reflected.</li>\n<li><u>A* Search</u><ul>\n<li>Variation of Dijkstra’s algorithm that directs search with heuristic information when approximate answers are acceptable.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Network Flow Algorithms</em><ul>\n<li>You could apply linear programming to network flow problems but specialized algorithms with outperform it by several orders of magnitude.</li>\n</ul>\n</li>\n<li><em>Computational Geometry</em></li>\n<li><em>When All Else Fails</em></li>\n<li><em>Epilogue</em><ul>\n<li><u>Know your data</u> - without specific knowledge of your data, it is only possible to recommend algorithms in the most general way.</li>\n<li><u>Decompose the problem into smaller problems</u></li>\n<li><u>Choose the right data structure</u></li>\n<li><u>Add storage to increase performance</u> - Many algorithms are optimizied by storing information that reflects the results of past computations.</li>\n<li><u>If not solution is evident, construct a search</u> - Convert the problem into a search over a very large graph.</li>\n<li><u>If no solution is evident, reduce your problem to another problem that has a solution</u></li>\n<li><u>Writing algorithms is hard – testing algorithms is harder</u></li>\n</ul>\n</li>\n</ol>\n"},{"title":"Ace the Programming Interview: 160 Questions and Answers for Success","date":"2015-01-27T00:00:00.000Z","_content":"- Good choice for entry level positions and for companies that are not doing \"program a whiteboard\" style interviews.\n- Coding problems are fairly simple compared to other interview books. \n- Good selection of behavioural/talk about x style questions.\n\n[Goodreads](https://www.goodreads.com/book/show/17219668-ace-the-programming-interview?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Ace-the-Programming-Interview-160-Questions-and-Answers-for-Success.md","raw":"---\ntitle: 'Ace the Programming Interview: 160 Questions and Answers for Success'\ndate: 2015-01-27 00:00:00\ntags:\n- Books\n- μReview\n---\n- Good choice for entry level positions and for companies that are not doing \"program a whiteboard\" style interviews.\n- Coding problems are fairly simple compared to other interview books. \n- Good selection of behavioural/talk about x style questions.\n\n[Goodreads](https://www.goodreads.com/book/show/17219668-ace-the-programming-interview?utm_medium=api&amp;utm_source=blog_book)","slug":"Ace-the-Programming-Interview-160-Questions-and-Answers-for-Success","published":1,"updated":"2016-04-14T14:55:04.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjs00003y0kwl1rkx3u4","content":"<ul>\n<li>Good choice for entry level positions and for companies that are not doing “program a whiteboard” style interviews.</li>\n<li>Coding problems are fairly simple compared to other interview books. </li>\n<li>Good selection of behavioural/talk about x style questions.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/17219668-ace-the-programming-interview?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<ul>\n<li>Good choice for entry level positions and for companies that are not doing “program a whiteboard” style interviews.</li>\n<li>Coding problems are fairly simple compared to other interview books. </li>\n<li>Good selection of behavioural/talk about x style questions.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/17219668-ace-the-programming-interview?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"4k Demo Flop","date":"2016-01-04T00:00:00.000Z","_content":"This might have been more fun if I was familiar with the Windows API.  It felt like I was spending all my time hunting for bad documentation to puzzle over.\n\nIt has a \"fire effect\" so I'm calling it a win and moving on. ☺\n\n[Source Code](https://github.com/DForshner/UnEpic4KDemo)","source":"_posts/4k-Demo-Flop.md","raw":"---\ntitle: 4k Demo Flop\ndate: 2016-01-04 00:00:00\ntags:\n- Random\n- Failure\n---\nThis might have been more fun if I was familiar with the Windows API.  It felt like I was spending all my time hunting for bad documentation to puzzle over.\n\nIt has a \"fire effect\" so I'm calling it a win and moving on. ☺\n\n[Source Code](https://github.com/DForshner/UnEpic4KDemo)","slug":"4k-Demo-Flop","published":1,"updated":"2016-04-14T14:55:50.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjs10004y0kwulifhjr3","content":"<p>This might have been more fun if I was familiar with the Windows API.  It felt like I was spending all my time hunting for bad documentation to puzzle over.</p>\n<p>It has a “fire effect” so I’m calling it a win and moving on. ☺</p>\n<p><a href=\"https://github.com/DForshner/UnEpic4KDemo\" target=\"_blank\" rel=\"external\">Source Code</a></p>\n","excerpt":"","more":"<p>This might have been more fun if I was familiar with the Windows API.  It felt like I was spending all my time hunting for bad documentation to puzzle over.</p>\n<p>It has a “fire effect” so I’m calling it a win and moving on. ☺</p>\n<p><a href=\"https://github.com/DForshner/UnEpic4KDemo\">Source Code</a></p>\n"},{"title":"Avoid tight testing tolerances for small capacitance values","date":"2008-04-30T00:00:00.000Z","_content":"I am having continual in-circuit test (ICT) failures measuring the capacitance of a set of decoupling capacitors on a customer board.  Since decoupling capacitors are connected in parallel and each capacitor's individual tolerance are combining to have a range much larger than the tolerances of the individual parts.  \n\nBeyond that measuring the capacitance of assembled components doesn't work for small values.  Everything they are connected to (including the PCB itself) affects the measured capacitance.\n\nWe agreed to widen the test limits and accept the risk of having damaged or missing decoupling capacitors.","source":"_posts/Avoid-tight-testing-tolerances-for-small-capacitance-values.md","raw":"---\ntitle: Avoid tight testing tolerances for small capacitance values\ndate: 2008-04-30 00:00:00\ntags:\n- Electronics\n---\nI am having continual in-circuit test (ICT) failures measuring the capacitance of a set of decoupling capacitors on a customer board.  Since decoupling capacitors are connected in parallel and each capacitor's individual tolerance are combining to have a range much larger than the tolerances of the individual parts.  \n\nBeyond that measuring the capacitance of assembled components doesn't work for small values.  Everything they are connected to (including the PCB itself) affects the measured capacitance.\n\nWe agreed to widen the test limits and accept the risk of having damaged or missing decoupling capacitors.","slug":"Avoid-tight-testing-tolerances-for-small-capacitance-values","published":1,"updated":"2016-04-14T15:01:17.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjs40006y0kw4ozm35w8","content":"<p>I am having continual in-circuit test (ICT) failures measuring the capacitance of a set of decoupling capacitors on a customer board.  Since decoupling capacitors are connected in parallel and each capacitor’s individual tolerance are combining to have a range much larger than the tolerances of the individual parts.  </p>\n<p>Beyond that measuring the capacitance of assembled components doesn’t work for small values.  Everything they are connected to (including the PCB itself) affects the measured capacitance.</p>\n<p>We agreed to widen the test limits and accept the risk of having damaged or missing decoupling capacitors.</p>\n","excerpt":"","more":"<p>I am having continual in-circuit test (ICT) failures measuring the capacitance of a set of decoupling capacitors on a customer board.  Since decoupling capacitors are connected in parallel and each capacitor’s individual tolerance are combining to have a range much larger than the tolerances of the individual parts.  </p>\n<p>Beyond that measuring the capacitance of assembled components doesn’t work for small values.  Everything they are connected to (including the PCB itself) affects the measured capacitance.</p>\n<p>We agreed to widen the test limits and accept the risk of having damaged or missing decoupling capacitors.</p>\n"},{"title":"Avoid Overlapping Footprints","date":"2009-03-03T00:00:00.000Z","_content":"I'm having problems while trying to do a power test for customer's board.  The voltage measurements I'm reading on the +5VDC test point is too high (5.43VDC) and the current draw during start-up was 49.2ma when it should have been around 30ma.\n\nI removed the driver and wired it directly into the power supply by soldering some jumper wires to vias in an attempt to narrow the problem down to the component or the PCB itself.  After doing this is started working normally.\n\nThe customer put down two overlapping sets of component footprints so they could build the board with two different driver components and the driver's metal case is shorting on the unused pads :-/.\n\nToday's corrective action = add tape.","source":"_posts/Avoid-Overlapping-Footprints.md","raw":"---\ntitle: Avoid Overlapping Footprints\ndate: 2009-03-03 00:00:00\ntags:\n- Electronics\n---\nI'm having problems while trying to do a power test for customer's board.  The voltage measurements I'm reading on the +5VDC test point is too high (5.43VDC) and the current draw during start-up was 49.2ma when it should have been around 30ma.\n\nI removed the driver and wired it directly into the power supply by soldering some jumper wires to vias in an attempt to narrow the problem down to the component or the PCB itself.  After doing this is started working normally.\n\nThe customer put down two overlapping sets of component footprints so they could build the board with two different driver components and the driver's metal case is shorting on the unused pads :-/.\n\nToday's corrective action = add tape.","slug":"Avoid-Overlapping-Footprints","published":1,"updated":"2016-04-14T14:54:45.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjs70007y0kwffmuygwx","content":"<p>I’m having problems while trying to do a power test for customer’s board.  The voltage measurements I’m reading on the +5VDC test point is too high (5.43VDC) and the current draw during start-up was 49.2ma when it should have been around 30ma.</p>\n<p>I removed the driver and wired it directly into the power supply by soldering some jumper wires to vias in an attempt to narrow the problem down to the component or the PCB itself.  After doing this is started working normally.</p>\n<p>The customer put down two overlapping sets of component footprints so they could build the board with two different driver components and the driver’s metal case is shorting on the unused pads :-/.</p>\n<p>Today’s corrective action = add tape.</p>\n","excerpt":"","more":"<p>I’m having problems while trying to do a power test for customer’s board.  The voltage measurements I’m reading on the +5VDC test point is too high (5.43VDC) and the current draw during start-up was 49.2ma when it should have been around 30ma.</p>\n<p>I removed the driver and wired it directly into the power supply by soldering some jumper wires to vias in an attempt to narrow the problem down to the component or the PCB itself.  After doing this is started working normally.</p>\n<p>The customer put down two overlapping sets of component footprints so they could build the board with two different driver components and the driver’s metal case is shorting on the unused pads :-/.</p>\n<p>Today’s corrective action = add tape.</p>\n"},{"title":"Code Retreat - Rule 110","date":"2016-02-17T16:52:39.000Z","_content":"Attended my first [boltmade](https://www.boltmade.com/) code retreat.  The basic idea is to pair program with another attendee to try and implement Rule 110 in 30 min rounds.  The catch is that each round you start over with a different partner, variation of the problem, and possibly programming language.\n\n[Meetup event](http://www.meetup.com/boltmade-sessions/events/228679956/)\n\nI was a bit nervous but it was a surprisingly fun time.  I had some ideas I didn't get to try so I ended up doing [my own version](https://github.com/DForshner/CSharpExperiments/blob/master/Rule110CellularAutomaton.cs) the next day.","source":"_posts/Boltmade-CodeRetreat-Rule110.md","raw":"---\ntitle: Code Retreat - Rule 110\ndate: 2016-02-17 16:52:39\ntags:\n- Meetup\n- Purposeful Practice\n---\nAttended my first [boltmade](https://www.boltmade.com/) code retreat.  The basic idea is to pair program with another attendee to try and implement Rule 110 in 30 min rounds.  The catch is that each round you start over with a different partner, variation of the problem, and possibly programming language.\n\n[Meetup event](http://www.meetup.com/boltmade-sessions/events/228679956/)\n\nI was a bit nervous but it was a surprisingly fun time.  I had some ideas I didn't get to try so I ended up doing [my own version](https://github.com/DForshner/CSharpExperiments/blob/master/Rule110CellularAutomaton.cs) the next day.","slug":"Boltmade-CodeRetreat-Rule110","published":1,"updated":"2016-04-14T15:01:04.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjs80008y0kwn7qrxtbe","content":"<p>Attended my first <a href=\"https://www.boltmade.com/\" target=\"_blank\" rel=\"external\">boltmade</a> code retreat.  The basic idea is to pair program with another attendee to try and implement Rule 110 in 30 min rounds.  The catch is that each round you start over with a different partner, variation of the problem, and possibly programming language.</p>\n<p><a href=\"http://www.meetup.com/boltmade-sessions/events/228679956/\" target=\"_blank\" rel=\"external\">Meetup event</a></p>\n<p>I was a bit nervous but it was a surprisingly fun time.  I had some ideas I didn’t get to try so I ended up doing <a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/Rule110CellularAutomaton.cs\" target=\"_blank\" rel=\"external\">my own version</a> the next day.</p>\n","excerpt":"","more":"<p>Attended my first <a href=\"https://www.boltmade.com/\">boltmade</a> code retreat.  The basic idea is to pair program with another attendee to try and implement Rule 110 in 30 min rounds.  The catch is that each round you start over with a different partner, variation of the problem, and possibly programming language.</p>\n<p><a href=\"http://www.meetup.com/boltmade-sessions/events/228679956/\">Meetup event</a></p>\n<p>I was a bit nervous but it was a surprisingly fun time.  I had some ideas I didn’t get to try so I ended up doing <a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/Rule110CellularAutomaton.cs\">my own version</a> the next day.</p>\n"},{"title":"Building Microservices Review","date":"2016-02-04T00:00:00.000Z","_content":"I thought I was getting a book on architecture patterns but I got a book on applying Conway's Law to an organization while migrating to microservices.  This book appears to be aimed at people working with a traditional n-tier architecture with a shared database who are having problems scaling both their application and organization.  The author gives a high-level overview of microservices and the patterns used but this book is about organizational change.\n\nAfter reading this, I don't think microservices are a good fit for the products I work on.  I've been associating microservices with things like automated deployment, centralized logging and performance monitoring, etc. but these are actually prerequisites to get into microservices.  I don't think the additional complexity that a microservices architecture brings are going to be worth it in my case.\n\n[Good Reads Link](https://www.goodreads.com/book/show/22512931-building-microservices?utm_medium=api&utm_source=blog_book)\n\n**Chapter Notes**\n1. *Microservices*\n * If shared libraries are specific to a business domain or talk to particular services they can limit the ability to independently scale and deploy different parts of the system.\n2. *The Evolutionary Architect*\n  * Helping people grow so they can understand the overall technical vision and can be active participants in shaping and implementing it.\n  * Great software comes from great people. If you worry only about the technology side of the equation, you're missing the picture.\n3. *How to Model Services*\n  * By aligning services to the seams between bounded contexts we ensure the services are built around relatively stable boundaries.\n4. *Integration*\n  * <u>Expand Only Types</u> - Types sent over the wire using binary serialization can become a mass of fields, some of which are no longer used but can't be removed safely.\n  * Don't violate DRY within a microservice, but be relaxed about violating DRY across services.  The evils of too much coupling between services are far worse than the problems caused by code duplication.\n  * <u>The Strangler Pattern</u> - Capture and intercept calls to the old system and either route these calls the existing or new code.  This allows you to replace functionality over time instead of doing a re-write.\n  * Database integration makes it very hard to avoid breaking changes.  Prefer REST because changes to internal implementation detail are less likely to result in a change to the service interface.\n  * <u>Tolerant Reader</u> - A reader able to ignore changes we don't care about.\n  * <u>Semantic Versioning</u> - Outlines the expectations of clients can have of changes to the API and simplifies the process of communicating about whether changes should impact consumers.\n5. *Splitting the Monolith*\n  * Bounded contexts make great seams because they represent cohesive  units that are the loosely coupled boundaries in an organization.\n6. *Deployment*\n  * Focus on the ability to release each service independently of each other.\n  * One source control repository, one CI build, and one host/container per service.\n  * Culture of automation is key to managing everything.\n7. *Testing*\n  * <u>Service Test</u> - Test a slice of functionality across the whole service but isolate yourself from other services by using stubbed collaborators.\n  * <u>Normalization of deviance</u> - Over time we become accustomed to things being wrong and we start to accept that as being normal and not a problem.  Ex: flakey tests, alarms that should be warnings, etc.\n  * Anything that causes multiple service versions to be deployed in a specific order will eventually destroy the ability to deploy one service by itself.\n  * Focus on a small number of core journeys to test for the whole system when developing end-to-end tests.\n  * <u>Consumer-Driven Tests</u> - Capture the expectations of how a consumer will use a service in tests to make sure that when new versions of the service go to production it won't break consumers.\n  * <u>Smoke tests</u> - Set of tests designed to run against newly deployed software to confirm the deployment worked.\n  * <u>Blue/Green Deployment</u> - Have two copies of software deployed at the same time, but only one version if receiving real requests.  Allows you to switch back quickly if something goes wrong.\n  * <u>Canary Releasing</u> - Verify a deployment by directing small amounts of production traffic against to see if it performs as expected.  Can send either divert a portion of real traffic or can shadow production traffic and direct it to the canary.\n  * <u>Optimizing mean time between failures (MTBF) vs. mean time to repair (MTTR)</u> - Expending the same effort into getting better at remediation of a release can be more beneficial than adding more automated tests.\n8. *Monitoring*\n  * <u>Service metrics</u> - Generate service specific events for monitoring. Examples: web requests, number of times customers view past orders, transactions per second, etc.\n  * <u>Synthetic transaction</u> - A fake event inserted into the system to show the it is still working.  Like a heartbeat.\n  * Correlation ids allow us to reconstruct the flow of calls in order to reproduce and fix a problem.  Allows us to trace inter-service calls.\n  * At a minimum track inbound response time, error rates, and the response times of downstream calls.\n9. *Security*\n   * <u>Confused deputy problem</u> - A malicious party tricks a deputy service into making calls to a downstream service on their behalf.\n  * Many high profile security breaches involve data at rest being acquired by an attacker and that data being readable by that attacker.\n  * Prevent services from allowing bulk retrieval of customer data.\n  * VPNs allow us to segregate the network by team and/or risk level.\n  * If you don't store it, no one can steal it.\n10. *Conway's Law and System Design*\n  * A team owning a service is responsible for making changes to that service.  The team should feel free to restructure the code however it wants, as long as the change doesn't break consuming services.\n  * Feature teams don't produce functioning custodians and technology oriented teams waste time coordinating changes.  Align teams along business domains.\n  * Try to align service ownership to colocated teams, which themselves are aligned around the bounded contexts of the organization.\n11. *Microservices at Scale*\n12. *Bringing It All Together*\n  * Avoid orchestration systems (ex: enterprise service bus) which lead to centralization of business logic and dumb services.  Instead, prefer choreography over orchestration and dumb middleware, with smart endpoints.\n  * The less you understand a domain, the harder it will be to find proper bounded contexts for your services.  Identify clean boundaries prior to splitting out services or you will have to make lots of expensive changes to service-to-service collaborators.\n  * Consider starting green-field projects as a monolith and breaking them up once they are stable.","source":"_posts/Building-Microservices-Review.md","raw":"---\ntitle: Building Microservices Review\ndate: 2016-02-04 00:00:00\ntags:\n- Books\n- Reviews\n- Software Architectures\n- Distributed Systems\n---\nI thought I was getting a book on architecture patterns but I got a book on applying Conway's Law to an organization while migrating to microservices.  This book appears to be aimed at people working with a traditional n-tier architecture with a shared database who are having problems scaling both their application and organization.  The author gives a high-level overview of microservices and the patterns used but this book is about organizational change.\n\nAfter reading this, I don't think microservices are a good fit for the products I work on.  I've been associating microservices with things like automated deployment, centralized logging and performance monitoring, etc. but these are actually prerequisites to get into microservices.  I don't think the additional complexity that a microservices architecture brings are going to be worth it in my case.\n\n[Good Reads Link](https://www.goodreads.com/book/show/22512931-building-microservices?utm_medium=api&utm_source=blog_book)\n\n**Chapter Notes**\n1. *Microservices*\n * If shared libraries are specific to a business domain or talk to particular services they can limit the ability to independently scale and deploy different parts of the system.\n2. *The Evolutionary Architect*\n  * Helping people grow so they can understand the overall technical vision and can be active participants in shaping and implementing it.\n  * Great software comes from great people. If you worry only about the technology side of the equation, you're missing the picture.\n3. *How to Model Services*\n  * By aligning services to the seams between bounded contexts we ensure the services are built around relatively stable boundaries.\n4. *Integration*\n  * <u>Expand Only Types</u> - Types sent over the wire using binary serialization can become a mass of fields, some of which are no longer used but can't be removed safely.\n  * Don't violate DRY within a microservice, but be relaxed about violating DRY across services.  The evils of too much coupling between services are far worse than the problems caused by code duplication.\n  * <u>The Strangler Pattern</u> - Capture and intercept calls to the old system and either route these calls the existing or new code.  This allows you to replace functionality over time instead of doing a re-write.\n  * Database integration makes it very hard to avoid breaking changes.  Prefer REST because changes to internal implementation detail are less likely to result in a change to the service interface.\n  * <u>Tolerant Reader</u> - A reader able to ignore changes we don't care about.\n  * <u>Semantic Versioning</u> - Outlines the expectations of clients can have of changes to the API and simplifies the process of communicating about whether changes should impact consumers.\n5. *Splitting the Monolith*\n  * Bounded contexts make great seams because they represent cohesive  units that are the loosely coupled boundaries in an organization.\n6. *Deployment*\n  * Focus on the ability to release each service independently of each other.\n  * One source control repository, one CI build, and one host/container per service.\n  * Culture of automation is key to managing everything.\n7. *Testing*\n  * <u>Service Test</u> - Test a slice of functionality across the whole service but isolate yourself from other services by using stubbed collaborators.\n  * <u>Normalization of deviance</u> - Over time we become accustomed to things being wrong and we start to accept that as being normal and not a problem.  Ex: flakey tests, alarms that should be warnings, etc.\n  * Anything that causes multiple service versions to be deployed in a specific order will eventually destroy the ability to deploy one service by itself.\n  * Focus on a small number of core journeys to test for the whole system when developing end-to-end tests.\n  * <u>Consumer-Driven Tests</u> - Capture the expectations of how a consumer will use a service in tests to make sure that when new versions of the service go to production it won't break consumers.\n  * <u>Smoke tests</u> - Set of tests designed to run against newly deployed software to confirm the deployment worked.\n  * <u>Blue/Green Deployment</u> - Have two copies of software deployed at the same time, but only one version if receiving real requests.  Allows you to switch back quickly if something goes wrong.\n  * <u>Canary Releasing</u> - Verify a deployment by directing small amounts of production traffic against to see if it performs as expected.  Can send either divert a portion of real traffic or can shadow production traffic and direct it to the canary.\n  * <u>Optimizing mean time between failures (MTBF) vs. mean time to repair (MTTR)</u> - Expending the same effort into getting better at remediation of a release can be more beneficial than adding more automated tests.\n8. *Monitoring*\n  * <u>Service metrics</u> - Generate service specific events for monitoring. Examples: web requests, number of times customers view past orders, transactions per second, etc.\n  * <u>Synthetic transaction</u> - A fake event inserted into the system to show the it is still working.  Like a heartbeat.\n  * Correlation ids allow us to reconstruct the flow of calls in order to reproduce and fix a problem.  Allows us to trace inter-service calls.\n  * At a minimum track inbound response time, error rates, and the response times of downstream calls.\n9. *Security*\n   * <u>Confused deputy problem</u> - A malicious party tricks a deputy service into making calls to a downstream service on their behalf.\n  * Many high profile security breaches involve data at rest being acquired by an attacker and that data being readable by that attacker.\n  * Prevent services from allowing bulk retrieval of customer data.\n  * VPNs allow us to segregate the network by team and/or risk level.\n  * If you don't store it, no one can steal it.\n10. *Conway's Law and System Design*\n  * A team owning a service is responsible for making changes to that service.  The team should feel free to restructure the code however it wants, as long as the change doesn't break consuming services.\n  * Feature teams don't produce functioning custodians and technology oriented teams waste time coordinating changes.  Align teams along business domains.\n  * Try to align service ownership to colocated teams, which themselves are aligned around the bounded contexts of the organization.\n11. *Microservices at Scale*\n12. *Bringing It All Together*\n  * Avoid orchestration systems (ex: enterprise service bus) which lead to centralization of business logic and dumb services.  Instead, prefer choreography over orchestration and dumb middleware, with smart endpoints.\n  * The less you understand a domain, the harder it will be to find proper bounded contexts for your services.  Identify clean boundaries prior to splitting out services or you will have to make lots of expensive changes to service-to-service collaborators.\n  * Consider starting green-field projects as a monolith and breaking them up once they are stable.","slug":"Building-Microservices-Review","published":1,"updated":"2016-04-21T19:11:49.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjsc000ay0kwf76okdkq","content":"<p>I thought I was getting a book on architecture patterns but I got a book on applying Conway’s Law to an organization while migrating to microservices.  This book appears to be aimed at people working with a traditional n-tier architecture with a shared database who are having problems scaling both their application and organization.  The author gives a high-level overview of microservices and the patterns used but this book is about organizational change.</p>\n<p>After reading this, I don’t think microservices are a good fit for the products I work on.  I’ve been associating microservices with things like automated deployment, centralized logging and performance monitoring, etc. but these are actually prerequisites to get into microservices.  I don’t think the additional complexity that a microservices architecture brings are going to be worth it in my case.</p>\n<p><a href=\"https://www.goodreads.com/book/show/22512931-building-microservices?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Good Reads Link</a></p>\n<p><strong>Chapter Notes</strong></p>\n<ol>\n<li><em>Microservices</em><ul>\n<li>If shared libraries are specific to a business domain or talk to particular services they can limit the ability to independently scale and deploy different parts of the system.</li>\n</ul>\n</li>\n<li><em>The Evolutionary Architect</em><ul>\n<li>Helping people grow so they can understand the overall technical vision and can be active participants in shaping and implementing it.</li>\n<li>Great software comes from great people. If you worry only about the technology side of the equation, you’re missing the picture.</li>\n</ul>\n</li>\n<li><em>How to Model Services</em><ul>\n<li>By aligning services to the seams between bounded contexts we ensure the services are built around relatively stable boundaries.</li>\n</ul>\n</li>\n<li><em>Integration</em><ul>\n<li><u>Expand Only Types</u> - Types sent over the wire using binary serialization can become a mass of fields, some of which are no longer used but can’t be removed safely.</li>\n<li>Don’t violate DRY within a microservice, but be relaxed about violating DRY across services.  The evils of too much coupling between services are far worse than the problems caused by code duplication.</li>\n<li><u>The Strangler Pattern</u> - Capture and intercept calls to the old system and either route these calls the existing or new code.  This allows you to replace functionality over time instead of doing a re-write.</li>\n<li>Database integration makes it very hard to avoid breaking changes.  Prefer REST because changes to internal implementation detail are less likely to result in a change to the service interface.</li>\n<li><u>Tolerant Reader</u> - A reader able to ignore changes we don’t care about.</li>\n<li><u>Semantic Versioning</u> - Outlines the expectations of clients can have of changes to the API and simplifies the process of communicating about whether changes should impact consumers.</li>\n</ul>\n</li>\n<li><em>Splitting the Monolith</em><ul>\n<li>Bounded contexts make great seams because they represent cohesive  units that are the loosely coupled boundaries in an organization.</li>\n</ul>\n</li>\n<li><em>Deployment</em><ul>\n<li>Focus on the ability to release each service independently of each other.</li>\n<li>One source control repository, one CI build, and one host/container per service.</li>\n<li>Culture of automation is key to managing everything.</li>\n</ul>\n</li>\n<li><em>Testing</em><ul>\n<li><u>Service Test</u> - Test a slice of functionality across the whole service but isolate yourself from other services by using stubbed collaborators.</li>\n<li><u>Normalization of deviance</u> - Over time we become accustomed to things being wrong and we start to accept that as being normal and not a problem.  Ex: flakey tests, alarms that should be warnings, etc.</li>\n<li>Anything that causes multiple service versions to be deployed in a specific order will eventually destroy the ability to deploy one service by itself.</li>\n<li>Focus on a small number of core journeys to test for the whole system when developing end-to-end tests.</li>\n<li><u>Consumer-Driven Tests</u> - Capture the expectations of how a consumer will use a service in tests to make sure that when new versions of the service go to production it won’t break consumers.</li>\n<li><u>Smoke tests</u> - Set of tests designed to run against newly deployed software to confirm the deployment worked.</li>\n<li><u>Blue/Green Deployment</u> - Have two copies of software deployed at the same time, but only one version if receiving real requests.  Allows you to switch back quickly if something goes wrong.</li>\n<li><u>Canary Releasing</u> - Verify a deployment by directing small amounts of production traffic against to see if it performs as expected.  Can send either divert a portion of real traffic or can shadow production traffic and direct it to the canary.</li>\n<li><u>Optimizing mean time between failures (MTBF) vs. mean time to repair (MTTR)</u> - Expending the same effort into getting better at remediation of a release can be more beneficial than adding more automated tests.</li>\n</ul>\n</li>\n<li><em>Monitoring</em><ul>\n<li><u>Service metrics</u> - Generate service specific events for monitoring. Examples: web requests, number of times customers view past orders, transactions per second, etc.</li>\n<li><u>Synthetic transaction</u> - A fake event inserted into the system to show the it is still working.  Like a heartbeat.</li>\n<li>Correlation ids allow us to reconstruct the flow of calls in order to reproduce and fix a problem.  Allows us to trace inter-service calls.</li>\n<li>At a minimum track inbound response time, error rates, and the response times of downstream calls.</li>\n</ul>\n</li>\n<li><em>Security</em><ul>\n<li><u>Confused deputy problem</u> - A malicious party tricks a deputy service into making calls to a downstream service on their behalf.</li>\n<li>Many high profile security breaches involve data at rest being acquired by an attacker and that data being readable by that attacker.</li>\n<li>Prevent services from allowing bulk retrieval of customer data.</li>\n<li>VPNs allow us to segregate the network by team and/or risk level.</li>\n<li>If you don’t store it, no one can steal it.</li>\n</ul>\n</li>\n<li><em>Conway’s Law and System Design</em><ul>\n<li>A team owning a service is responsible for making changes to that service.  The team should feel free to restructure the code however it wants, as long as the change doesn’t break consuming services.</li>\n<li>Feature teams don’t produce functioning custodians and technology oriented teams waste time coordinating changes.  Align teams along business domains.</li>\n<li>Try to align service ownership to colocated teams, which themselves are aligned around the bounded contexts of the organization.</li>\n</ul>\n</li>\n<li><em>Microservices at Scale</em></li>\n<li><em>Bringing It All Together</em><ul>\n<li>Avoid orchestration systems (ex: enterprise service bus) which lead to centralization of business logic and dumb services.  Instead, prefer choreography over orchestration and dumb middleware, with smart endpoints.</li>\n<li>The less you understand a domain, the harder it will be to find proper bounded contexts for your services.  Identify clean boundaries prior to splitting out services or you will have to make lots of expensive changes to service-to-service collaborators.</li>\n<li>Consider starting green-field projects as a monolith and breaking them up once they are stable.</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>I thought I was getting a book on architecture patterns but I got a book on applying Conway’s Law to an organization while migrating to microservices.  This book appears to be aimed at people working with a traditional n-tier architecture with a shared database who are having problems scaling both their application and organization.  The author gives a high-level overview of microservices and the patterns used but this book is about organizational change.</p>\n<p>After reading this, I don’t think microservices are a good fit for the products I work on.  I’ve been associating microservices with things like automated deployment, centralized logging and performance monitoring, etc. but these are actually prerequisites to get into microservices.  I don’t think the additional complexity that a microservices architecture brings are going to be worth it in my case.</p>\n<p><a href=\"https://www.goodreads.com/book/show/22512931-building-microservices?utm_medium=api&amp;utm_source=blog_book\">Good Reads Link</a></p>\n<p><strong>Chapter Notes</strong></p>\n<ol>\n<li><em>Microservices</em><ul>\n<li>If shared libraries are specific to a business domain or talk to particular services they can limit the ability to independently scale and deploy different parts of the system.</li>\n</ul>\n</li>\n<li><em>The Evolutionary Architect</em><ul>\n<li>Helping people grow so they can understand the overall technical vision and can be active participants in shaping and implementing it.</li>\n<li>Great software comes from great people. If you worry only about the technology side of the equation, you’re missing the picture.</li>\n</ul>\n</li>\n<li><em>How to Model Services</em><ul>\n<li>By aligning services to the seams between bounded contexts we ensure the services are built around relatively stable boundaries.</li>\n</ul>\n</li>\n<li><em>Integration</em><ul>\n<li><u>Expand Only Types</u> - Types sent over the wire using binary serialization can become a mass of fields, some of which are no longer used but can’t be removed safely.</li>\n<li>Don’t violate DRY within a microservice, but be relaxed about violating DRY across services.  The evils of too much coupling between services are far worse than the problems caused by code duplication.</li>\n<li><u>The Strangler Pattern</u> - Capture and intercept calls to the old system and either route these calls the existing or new code.  This allows you to replace functionality over time instead of doing a re-write.</li>\n<li>Database integration makes it very hard to avoid breaking changes.  Prefer REST because changes to internal implementation detail are less likely to result in a change to the service interface.</li>\n<li><u>Tolerant Reader</u> - A reader able to ignore changes we don’t care about.</li>\n<li><u>Semantic Versioning</u> - Outlines the expectations of clients can have of changes to the API and simplifies the process of communicating about whether changes should impact consumers.</li>\n</ul>\n</li>\n<li><em>Splitting the Monolith</em><ul>\n<li>Bounded contexts make great seams because they represent cohesive  units that are the loosely coupled boundaries in an organization.</li>\n</ul>\n</li>\n<li><em>Deployment</em><ul>\n<li>Focus on the ability to release each service independently of each other.</li>\n<li>One source control repository, one CI build, and one host/container per service.</li>\n<li>Culture of automation is key to managing everything.</li>\n</ul>\n</li>\n<li><em>Testing</em><ul>\n<li><u>Service Test</u> - Test a slice of functionality across the whole service but isolate yourself from other services by using stubbed collaborators.</li>\n<li><u>Normalization of deviance</u> - Over time we become accustomed to things being wrong and we start to accept that as being normal and not a problem.  Ex: flakey tests, alarms that should be warnings, etc.</li>\n<li>Anything that causes multiple service versions to be deployed in a specific order will eventually destroy the ability to deploy one service by itself.</li>\n<li>Focus on a small number of core journeys to test for the whole system when developing end-to-end tests.</li>\n<li><u>Consumer-Driven Tests</u> - Capture the expectations of how a consumer will use a service in tests to make sure that when new versions of the service go to production it won’t break consumers.</li>\n<li><u>Smoke tests</u> - Set of tests designed to run against newly deployed software to confirm the deployment worked.</li>\n<li><u>Blue/Green Deployment</u> - Have two copies of software deployed at the same time, but only one version if receiving real requests.  Allows you to switch back quickly if something goes wrong.</li>\n<li><u>Canary Releasing</u> - Verify a deployment by directing small amounts of production traffic against to see if it performs as expected.  Can send either divert a portion of real traffic or can shadow production traffic and direct it to the canary.</li>\n<li><u>Optimizing mean time between failures (MTBF) vs. mean time to repair (MTTR)</u> - Expending the same effort into getting better at remediation of a release can be more beneficial than adding more automated tests.</li>\n</ul>\n</li>\n<li><em>Monitoring</em><ul>\n<li><u>Service metrics</u> - Generate service specific events for monitoring. Examples: web requests, number of times customers view past orders, transactions per second, etc.</li>\n<li><u>Synthetic transaction</u> - A fake event inserted into the system to show the it is still working.  Like a heartbeat.</li>\n<li>Correlation ids allow us to reconstruct the flow of calls in order to reproduce and fix a problem.  Allows us to trace inter-service calls.</li>\n<li>At a minimum track inbound response time, error rates, and the response times of downstream calls.</li>\n</ul>\n</li>\n<li><em>Security</em><ul>\n<li><u>Confused deputy problem</u> - A malicious party tricks a deputy service into making calls to a downstream service on their behalf.</li>\n<li>Many high profile security breaches involve data at rest being acquired by an attacker and that data being readable by that attacker.</li>\n<li>Prevent services from allowing bulk retrieval of customer data.</li>\n<li>VPNs allow us to segregate the network by team and/or risk level.</li>\n<li>If you don’t store it, no one can steal it.</li>\n</ul>\n</li>\n<li><em>Conway’s Law and System Design</em><ul>\n<li>A team owning a service is responsible for making changes to that service.  The team should feel free to restructure the code however it wants, as long as the change doesn’t break consuming services.</li>\n<li>Feature teams don’t produce functioning custodians and technology oriented teams waste time coordinating changes.  Align teams along business domains.</li>\n<li>Try to align service ownership to colocated teams, which themselves are aligned around the bounded contexts of the organization.</li>\n</ul>\n</li>\n<li><em>Microservices at Scale</em></li>\n<li><em>Bringing It All Together</em><ul>\n<li>Avoid orchestration systems (ex: enterprise service bus) which lead to centralization of business logic and dumb services.  Instead, prefer choreography over orchestration and dumb middleware, with smart endpoints.</li>\n<li>The less you understand a domain, the harder it will be to find proper bounded contexts for your services.  Identify clean boundaries prior to splitting out services or you will have to make lots of expensive changes to service-to-service collaborators.</li>\n<li>Consider starting green-field projects as a monolith and breaking them up once they are stable.</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Card Sorting Meetup","date":"2016-04-08T00:00:00.000Z","_content":"The session centered on using the [card sorting](https://en.wikipedia.org/wiki/Card_sorting) technique to develop intuitive layouts.  For example, developing a website navigation structure that is obvious to users.  Card sorting is considered a brainstorming step, so it's important that users focus on grouping into categories and not on designing the site.\n\nCard sorting comprises grouping cards that describe features and content into groups.  The number of cards ranges from 30 Cards for a general user to 60 cards for a domain expert.  Users should aim for 5+ groupings.\n\nIn the first half, we got into groups and did an open card sort in groups of 2-4 people.  In an open card sort, users generate their own categories when grouping the cards.  It's a generative tool used to discover the categories and vocabulary that users use.\n\nThe discussions that occur while a group is doing the sort are a valuable source for information you won't get from an individual card sort.  Disagreements can be a good thing that allows the best ideas to rise to the top, but you want to be careful to prevent an individual group member from dominating the conversation.\n\nIn the second half, we did a closed card sort as individuals using [optimal workshop](https://www.optimalworkshop.com/).  Closed card sorts have pre-defined categories and are best for validating your design. \n\nThe presenter pointed out that prototypes are the best way of validating that users can find stuff.  They use card sorting to help develop a prototype and then use the prototype to do their validation.  As an example, they showed a series of paper screen mock-ups they asked users to navigate while performing different tasks.\n\n[Meetup Event](http://www.meetup.com/boltmade-sessions/events/229760347/)","source":"_posts/Card-Sorting-Meetup.md","raw":"title: Card Sorting Meetup\ndate: 2016-04-08 00:00:00\ntags:\n- Meetup\n- User Experience Design\n---\nThe session centered on using the [card sorting](https://en.wikipedia.org/wiki/Card_sorting) technique to develop intuitive layouts.  For example, developing a website navigation structure that is obvious to users.  Card sorting is considered a brainstorming step, so it's important that users focus on grouping into categories and not on designing the site.\n\nCard sorting comprises grouping cards that describe features and content into groups.  The number of cards ranges from 30 Cards for a general user to 60 cards for a domain expert.  Users should aim for 5+ groupings.\n\nIn the first half, we got into groups and did an open card sort in groups of 2-4 people.  In an open card sort, users generate their own categories when grouping the cards.  It's a generative tool used to discover the categories and vocabulary that users use.\n\nThe discussions that occur while a group is doing the sort are a valuable source for information you won't get from an individual card sort.  Disagreements can be a good thing that allows the best ideas to rise to the top, but you want to be careful to prevent an individual group member from dominating the conversation.\n\nIn the second half, we did a closed card sort as individuals using [optimal workshop](https://www.optimalworkshop.com/).  Closed card sorts have pre-defined categories and are best for validating your design. \n\nThe presenter pointed out that prototypes are the best way of validating that users can find stuff.  They use card sorting to help develop a prototype and then use the prototype to do their validation.  As an example, they showed a series of paper screen mock-ups they asked users to navigate while performing different tasks.\n\n[Meetup Event](http://www.meetup.com/boltmade-sessions/events/229760347/)","slug":"Card-Sorting-Meetup","published":1,"updated":"2016-04-22T15:08:39.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjsv000by0kwjjo1bycj","content":"<p>The session centered on using the <a href=\"https://en.wikipedia.org/wiki/Card_sorting\" target=\"_blank\" rel=\"external\">card sorting</a> technique to develop intuitive layouts.  For example, developing a website navigation structure that is obvious to users.  Card sorting is considered a brainstorming step, so it’s important that users focus on grouping into categories and not on designing the site.</p>\n<p>Card sorting comprises grouping cards that describe features and content into groups.  The number of cards ranges from 30 Cards for a general user to 60 cards for a domain expert.  Users should aim for 5+ groupings.</p>\n<p>In the first half, we got into groups and did an open card sort in groups of 2-4 people.  In an open card sort, users generate their own categories when grouping the cards.  It’s a generative tool used to discover the categories and vocabulary that users use.</p>\n<p>The discussions that occur while a group is doing the sort are a valuable source for information you won’t get from an individual card sort.  Disagreements can be a good thing that allows the best ideas to rise to the top, but you want to be careful to prevent an individual group member from dominating the conversation.</p>\n<p>In the second half, we did a closed card sort as individuals using <a href=\"https://www.optimalworkshop.com/\" target=\"_blank\" rel=\"external\">optimal workshop</a>.  Closed card sorts have pre-defined categories and are best for validating your design. </p>\n<p>The presenter pointed out that prototypes are the best way of validating that users can find stuff.  They use card sorting to help develop a prototype and then use the prototype to do their validation.  As an example, they showed a series of paper screen mock-ups they asked users to navigate while performing different tasks.</p>\n<p><a href=\"http://www.meetup.com/boltmade-sessions/events/229760347/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>The session centered on using the <a href=\"https://en.wikipedia.org/wiki/Card_sorting\">card sorting</a> technique to develop intuitive layouts.  For example, developing a website navigation structure that is obvious to users.  Card sorting is considered a brainstorming step, so it’s important that users focus on grouping into categories and not on designing the site.</p>\n<p>Card sorting comprises grouping cards that describe features and content into groups.  The number of cards ranges from 30 Cards for a general user to 60 cards for a domain expert.  Users should aim for 5+ groupings.</p>\n<p>In the first half, we got into groups and did an open card sort in groups of 2-4 people.  In an open card sort, users generate their own categories when grouping the cards.  It’s a generative tool used to discover the categories and vocabulary that users use.</p>\n<p>The discussions that occur while a group is doing the sort are a valuable source for information you won’t get from an individual card sort.  Disagreements can be a good thing that allows the best ideas to rise to the top, but you want to be careful to prevent an individual group member from dominating the conversation.</p>\n<p>In the second half, we did a closed card sort as individuals using <a href=\"https://www.optimalworkshop.com/\">optimal workshop</a>.  Closed card sorts have pre-defined categories and are best for validating your design. </p>\n<p>The presenter pointed out that prototypes are the best way of validating that users can find stuff.  They use card sorting to help develop a prototype and then use the prototype to do their validation.  As an example, they showed a series of paper screen mock-ups they asked users to navigate while performing different tasks.</p>\n<p><a href=\"http://www.meetup.com/boltmade-sessions/events/229760347/\">Meetup Event</a></p>\n"},{"title":"Code Complete: A Practical Handbook of Software Construction","date":"2015-01-01T00:00:00.000Z","_content":"- I'm forever recommending people buy this book.\n- Great advice on managing complexity and writing code you can understand in a year.\n\n[Goodreads](https://www.goodreads.com/book/show/4845.Code_Complete?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Code-Complete-A-Practical-Handbook-of-Software-Construction.md","raw":"---\ntitle: 'Code Complete: A Practical Handbook of Software Construction'\ndate: 2015-01-01 00:00:00\ntags:\n- Books\n- μReview\n---\n- I'm forever recommending people buy this book.\n- Great advice on managing complexity and writing code you can understand in a year.\n\n[Goodreads](https://www.goodreads.com/book/show/4845.Code_Complete?utm_medium=api&amp;utm_source=blog_book)","slug":"Code-Complete-A-Practical-Handbook-of-Software-Construction","published":1,"updated":"2016-04-14T15:00:56.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjsx000dy0kwodb103mv","content":"<ul>\n<li>I’m forever recommending people buy this book.</li>\n<li>Great advice on managing complexity and writing code you can understand in a year.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/4845.Code_Complete?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<ul>\n<li>I’m forever recommending people buy this book.</li>\n<li>Great advice on managing complexity and writing code you can understand in a year.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/4845.Code_Complete?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Cross Platform Localization Strategies","date":"2015-09-09T18:00:00.000Z","_content":"The main point seemed to be that it's easier to consider localization at the start of a project (even for one language) than add it later.\n\n[Meetup Event](http://www.meetup.com/CTTDNUG/events/223674975/)","source":"_posts/Cross-Platform-Localization-Strategies.md","raw":"---\ntitle: Cross Platform Localization Strategies\ndate: 2015-09-09 18:00:00\ntags:\n- Meetup\n---\nThe main point seemed to be that it's easier to consider localization at the start of a project (even for one language) than add it later.\n\n[Meetup Event](http://www.meetup.com/CTTDNUG/events/223674975/)","slug":"Cross-Platform-Localization-Strategies","published":1,"updated":"2016-04-14T15:00:42.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjsy000fy0kwyg5n4bfp","content":"<p>The main point seemed to be that it’s easier to consider localization at the start of a project (even for one language) than add it later.</p>\n<p><a href=\"http://www.meetup.com/CTTDNUG/events/223674975/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>The main point seemed to be that it’s easier to consider localization at the start of a project (even for one language) than add it later.</p>\n<p><a href=\"http://www.meetup.com/CTTDNUG/events/223674975/\">Meetup Event</a></p>\n"},{"title":"CSS Diner","date":"2015-08-20T16:54:28.000Z","link":"https://flukeout.github.io","_content":"Learn CSS selectors by selecting different objects on a table.\n\n[Link](https://flukeout.github.io/)","source":"_posts/CSS-Diner.md","raw":"---\ntitle: CSS Diner\ndate: 2015-08-20 16:54:28\nlink: https://flukeout.github.io\ntags:\n- Gamification\n- Web\n---\nLearn CSS selectors by selecting different objects on a table.\n\n[Link](https://flukeout.github.io/)","slug":"CSS-Diner","published":1,"updated":"2016-04-14T15:00:39.431Z","comments":1,"layout":"post","photos":[],"_id":"cioeidjt0000iy0kw1t18st3b","content":"<p>Learn CSS selectors by selecting different objects on a table.</p>\n<p><a href=\"https://flukeout.github.io/\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>Learn CSS selectors by selecting different objects on a table.</p>\n<p><a href=\"https://flukeout.github.io/\">Link</a></p>\n"},{"title":"Coverage Is Not Strongly Correlated With Test Suite Effectiveness","date":"2015-12-01T18:31:15.000Z","_content":"No great surprises here.  I think people's time is better spent testing the common paths through their code and capturing important functional requirements.  I found the ideas in [Functional Core, Imperative Shell](https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell) and [There Are Only Two Roles of Code](http://simpleprogrammer.com/2012/10/21/there-are-only-two-roles-of-code/) were helpful in figuring out how to spend my test writing budget.\n\n> We found that there is a low to moderate correlation between coverage and effectiveness when the number of tests in the suite is controlled for. In addition, we found that stronger forms of coverage do not provide greater insight into the effectiveness of the suite. Our results suggest that coverage, while useful for identifying under-tested parts of a program, should not be used as a quality target because it is not a good indicator of test suite effectiveness.\n\n[Study](http://www.linozemtseva.com/research/2014/icse/coverage/)","source":"_posts/Coverage-Is-Not-Strongly-Correlated-With-Test-Suite-Effectiveness.md","raw":"---\ntitle: Coverage Is Not Strongly Correlated With Test Suite Effectiveness\ndate: 2015-12-01 18:31:15\ntags:\n- Empirical Studies\n- Software Development Practices\n---\nNo great surprises here.  I think people's time is better spent testing the common paths through their code and capturing important functional requirements.  I found the ideas in [Functional Core, Imperative Shell](https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell) and [There Are Only Two Roles of Code](http://simpleprogrammer.com/2012/10/21/there-are-only-two-roles-of-code/) were helpful in figuring out how to spend my test writing budget.\n\n> We found that there is a low to moderate correlation between coverage and effectiveness when the number of tests in the suite is controlled for. In addition, we found that stronger forms of coverage do not provide greater insight into the effectiveness of the suite. Our results suggest that coverage, while useful for identifying under-tested parts of a program, should not be used as a quality target because it is not a good indicator of test suite effectiveness.\n\n[Study](http://www.linozemtseva.com/research/2014/icse/coverage/)","slug":"Coverage-Is-Not-Strongly-Correlated-With-Test-Suite-Effectiveness","published":1,"updated":"2016-04-14T15:00:50.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjt1000ky0kwzuqar60d","content":"<p>No great surprises here.  I think people’s time is better spent testing the common paths through their code and capturing important functional requirements.  I found the ideas in <a href=\"https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell\" target=\"_blank\" rel=\"external\">Functional Core, Imperative Shell</a> and <a href=\"http://simpleprogrammer.com/2012/10/21/there-are-only-two-roles-of-code/\" target=\"_blank\" rel=\"external\">There Are Only Two Roles of Code</a> were helpful in figuring out how to spend my test writing budget.</p>\n<blockquote>\n<p>We found that there is a low to moderate correlation between coverage and effectiveness when the number of tests in the suite is controlled for. In addition, we found that stronger forms of coverage do not provide greater insight into the effectiveness of the suite. Our results suggest that coverage, while useful for identifying under-tested parts of a program, should not be used as a quality target because it is not a good indicator of test suite effectiveness.</p>\n</blockquote>\n<p><a href=\"http://www.linozemtseva.com/research/2014/icse/coverage/\" target=\"_blank\" rel=\"external\">Study</a></p>\n","excerpt":"","more":"<p>No great surprises here.  I think people’s time is better spent testing the common paths through their code and capturing important functional requirements.  I found the ideas in <a href=\"https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell\">Functional Core, Imperative Shell</a> and <a href=\"http://simpleprogrammer.com/2012/10/21/there-are-only-two-roles-of-code/\">There Are Only Two Roles of Code</a> were helpful in figuring out how to spend my test writing budget.</p>\n<blockquote>\n<p>We found that there is a low to moderate correlation between coverage and effectiveness when the number of tests in the suite is controlled for. In addition, we found that stronger forms of coverage do not provide greater insight into the effectiveness of the suite. Our results suggest that coverage, while useful for identifying under-tested parts of a program, should not be used as a quality target because it is not a good indicator of test suite effectiveness.</p>\n</blockquote>\n<p><a href=\"http://www.linozemtseva.com/research/2014/icse/coverage/\">Study</a></p>\n"},{"title":"Cracking the Coding Interview: 150 Programming Questions and Solutions","date":"2015-01-27T00:00:00.000Z","_content":"If I had to pick one book to prepare for coding interviews with it would be this one.\n\nI'm largely self-taught and I this book was as great at both providing patterns to approach different problems and explaining the recommended solutions. I purchased this book along with \"Elements of Programming Interviews\" and while I strongly suggest purchasing both books, I feel this one is better for people without a formal computer science background.\n\nI was a bit discouraging when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable 'running' code in your head. These are more than just useful interview skills. Estimating how code scales lets you judge when it's worth increasing code complexity to optimize or when a simple brute force is 'good enough' and once you are in the habit of 'running' code in you head potential errors will start to jump out at you while reading code. I'd recommend both these books for anyone interested in becoming a better software engineer.\n\n[Goodreads](https://www.goodreads.com/book/show/12544648-cracking-the-coding-interview?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Cracking-the-Coding-Interview-150-Programming-Questions-and-Solutions.md","raw":"---\ntitle: 'Cracking the Coding Interview: 150 Programming Questions and Solutions'\ndate: 2015-01-27 00:00:00\ntags:\n- Books\n- μReview\n---\nIf I had to pick one book to prepare for coding interviews with it would be this one.\n\nI'm largely self-taught and I this book was as great at both providing patterns to approach different problems and explaining the recommended solutions. I purchased this book along with \"Elements of Programming Interviews\" and while I strongly suggest purchasing both books, I feel this one is better for people without a formal computer science background.\n\nI was a bit discouraging when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable 'running' code in your head. These are more than just useful interview skills. Estimating how code scales lets you judge when it's worth increasing code complexity to optimize or when a simple brute force is 'good enough' and once you are in the habit of 'running' code in you head potential errors will start to jump out at you while reading code. I'd recommend both these books for anyone interested in becoming a better software engineer.\n\n[Goodreads](https://www.goodreads.com/book/show/12544648-cracking-the-coding-interview?utm_medium=api&amp;utm_source=blog_book)","slug":"Cracking-the-Coding-Interview-150-Programming-Questions-and-Solutions","published":1,"updated":"2016-04-14T15:00:46.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjt2000ny0kw6qp0ea45","content":"<p>If I had to pick one book to prepare for coding interviews with it would be this one.</p>\n<p>I’m largely self-taught and I this book was as great at both providing patterns to approach different problems and explaining the recommended solutions. I purchased this book along with “Elements of Programming Interviews” and while I strongly suggest purchasing both books, I feel this one is better for people without a formal computer science background.</p>\n<p>I was a bit discouraging when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable ‘running’ code in your head. These are more than just useful interview skills. Estimating how code scales lets you judge when it’s worth increasing code complexity to optimize or when a simple brute force is ‘good enough’ and once you are in the habit of ‘running’ code in you head potential errors will start to jump out at you while reading code. I’d recommend both these books for anyone interested in becoming a better software engineer.</p>\n<p><a href=\"https://www.goodreads.com/book/show/12544648-cracking-the-coding-interview?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<p>If I had to pick one book to prepare for coding interviews with it would be this one.</p>\n<p>I’m largely self-taught and I this book was as great at both providing patterns to approach different problems and explaining the recommended solutions. I purchased this book along with “Elements of Programming Interviews” and while I strongly suggest purchasing both books, I feel this one is better for people without a formal computer science background.</p>\n<p>I was a bit discouraging when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable ‘running’ code in your head. These are more than just useful interview skills. Estimating how code scales lets you judge when it’s worth increasing code complexity to optimize or when a simple brute force is ‘good enough’ and once you are in the habit of ‘running’ code in you head potential errors will start to jump out at you while reading code. I’d recommend both these books for anyone interested in becoming a better software engineer.</p>\n<p><a href=\"https://www.goodreads.com/book/show/12544648-cracking-the-coding-interview?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"DevOps - Amazingly Awesome Ansible Meetup","date":"2016-04-21T00:00:00.000Z","_content":"Another great workshop with the people at [Boltmade](www.boltmade.com).  This time around, it was series of exercises to refactor the deployment of a cloud app using [Ansible](https://www.ansible.com/).\n\nAt its most basic Ansible is a way of replacing your app's initialization shell scripts or manual deployment steps.\n\nDeployments will become complex over time.  Shell scripts hit a complexity wall where you have to give up and start over with a config management system.  Ansible is simple to start with and can evolve as complexity grows over time.  Extremely useful if you are deploying unusual combinations of software.\n\nPuppet & Chef require a remote deploy server, so there is a centralized point of failure.  With Ansible, you just ssh in and start doing stuff so it can also provision a local server.\n\nDeployments are not static.  Ansible allows you to tie your deployment requirements to your source making deployment repeatable and easy.  By looking at your source history, you can see how your server requirements have changed over time.  You can look at old versions of your application and see what the infrastructure was like back then.  It also captures any workarounds required to deploy combinations of software and infrastructure versions.\n\nAnsible is a structured way of accomplishing a deployment.  It gives you a common language for how things are configured/deployed at your company.  The release engineers who follow you can understand your deployment process (playbook) because it has standard *style*.  Removes the need to have separate documents for how things should be setup.\n\nIt's possible to configure Ansible to do idempotent deployments so you can deploy again and again and get same results.  Ansible can be made smart enough to skip steps that aren't needed.  You won't need to comment out sections (like you have to with bash scripts) while doing iterative development.\n\nA potential downside of ansibles simplicity is that if you can forget about temporary fixes while getting things working that come back and haunt you later (ex: hardcoded/default passwords).\n\nRandom Notes:\n* <u>Galaxy Roles</u> - Community built roles you can use but they can be overkill (for large server farms) and have poor practices.\n* Ansible + Vagrant = Can deploy both a real server and setup a development environment using the same scripts.  You may have to do some extra work to make vagrant behave like a remove box.\n* <u>Ansible Vault</u> will encrypt data so it can be stored with the rest of the application code in source control.  It will only be decrypted when Ansible is provisioning a box.\n* Could install Ansible on the load balancer which will have access to inner boxes.\n\n[My progress through the workshop](https://github.com/DForshner/ansible-workshop-deploy)\n[Meetup event](http://www.meetup.com/boltmade-sessions/events/230344829/?rv=cr1&_af=event&_af_eid=230344829&https=off)","source":"_posts/DevOps-Amazingly-Awesome-Ansible-Meetup.md","raw":"---\ntitle: DevOps - Amazingly Awesome Ansible Meetup\ndate: 2016-04-21 00:00:00\ntags:\n- DevOps\n- Meetup\n---\nAnother great workshop with the people at [Boltmade](www.boltmade.com).  This time around, it was series of exercises to refactor the deployment of a cloud app using [Ansible](https://www.ansible.com/).\n\nAt its most basic Ansible is a way of replacing your app's initialization shell scripts or manual deployment steps.\n\nDeployments will become complex over time.  Shell scripts hit a complexity wall where you have to give up and start over with a config management system.  Ansible is simple to start with and can evolve as complexity grows over time.  Extremely useful if you are deploying unusual combinations of software.\n\nPuppet & Chef require a remote deploy server, so there is a centralized point of failure.  With Ansible, you just ssh in and start doing stuff so it can also provision a local server.\n\nDeployments are not static.  Ansible allows you to tie your deployment requirements to your source making deployment repeatable and easy.  By looking at your source history, you can see how your server requirements have changed over time.  You can look at old versions of your application and see what the infrastructure was like back then.  It also captures any workarounds required to deploy combinations of software and infrastructure versions.\n\nAnsible is a structured way of accomplishing a deployment.  It gives you a common language for how things are configured/deployed at your company.  The release engineers who follow you can understand your deployment process (playbook) because it has standard *style*.  Removes the need to have separate documents for how things should be setup.\n\nIt's possible to configure Ansible to do idempotent deployments so you can deploy again and again and get same results.  Ansible can be made smart enough to skip steps that aren't needed.  You won't need to comment out sections (like you have to with bash scripts) while doing iterative development.\n\nA potential downside of ansibles simplicity is that if you can forget about temporary fixes while getting things working that come back and haunt you later (ex: hardcoded/default passwords).\n\nRandom Notes:\n* <u>Galaxy Roles</u> - Community built roles you can use but they can be overkill (for large server farms) and have poor practices.\n* Ansible + Vagrant = Can deploy both a real server and setup a development environment using the same scripts.  You may have to do some extra work to make vagrant behave like a remove box.\n* <u>Ansible Vault</u> will encrypt data so it can be stored with the rest of the application code in source control.  It will only be decrypted when Ansible is provisioning a box.\n* Could install Ansible on the load balancer which will have access to inner boxes.\n\n[My progress through the workshop](https://github.com/DForshner/ansible-workshop-deploy)\n[Meetup event](http://www.meetup.com/boltmade-sessions/events/230344829/?rv=cr1&_af=event&_af_eid=230344829&https=off)","slug":"DevOps-Amazingly-Awesome-Ansible-Meetup","published":1,"updated":"2016-04-27T16:13:02.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjt3000py0kwe5ux9ael","content":"<p>Another great workshop with the people at <a href=\"www.boltmade.com\">Boltmade</a>.  This time around, it was series of exercises to refactor the deployment of a cloud app using <a href=\"https://www.ansible.com/\" target=\"_blank\" rel=\"external\">Ansible</a>.</p>\n<p>At its most basic Ansible is a way of replacing your app’s initialization shell scripts or manual deployment steps.</p>\n<p>Deployments will become complex over time.  Shell scripts hit a complexity wall where you have to give up and start over with a config management system.  Ansible is simple to start with and can evolve as complexity grows over time.  Extremely useful if you are deploying unusual combinations of software.</p>\n<p>Puppet &amp; Chef require a remote deploy server, so there is a centralized point of failure.  With Ansible, you just ssh in and start doing stuff so it can also provision a local server.</p>\n<p>Deployments are not static.  Ansible allows you to tie your deployment requirements to your source making deployment repeatable and easy.  By looking at your source history, you can see how your server requirements have changed over time.  You can look at old versions of your application and see what the infrastructure was like back then.  It also captures any workarounds required to deploy combinations of software and infrastructure versions.</p>\n<p>Ansible is a structured way of accomplishing a deployment.  It gives you a common language for how things are configured/deployed at your company.  The release engineers who follow you can understand your deployment process (playbook) because it has standard <em>style</em>.  Removes the need to have separate documents for how things should be setup.</p>\n<p>It’s possible to configure Ansible to do idempotent deployments so you can deploy again and again and get same results.  Ansible can be made smart enough to skip steps that aren’t needed.  You won’t need to comment out sections (like you have to with bash scripts) while doing iterative development.</p>\n<p>A potential downside of ansibles simplicity is that if you can forget about temporary fixes while getting things working that come back and haunt you later (ex: hardcoded/default passwords).</p>\n<p>Random Notes:</p>\n<ul>\n<li><u>Galaxy Roles</u> - Community built roles you can use but they can be overkill (for large server farms) and have poor practices.</li>\n<li>Ansible + Vagrant = Can deploy both a real server and setup a development environment using the same scripts.  You may have to do some extra work to make vagrant behave like a remove box.</li>\n<li><u>Ansible Vault</u> will encrypt data so it can be stored with the rest of the application code in source control.  It will only be decrypted when Ansible is provisioning a box.</li>\n<li>Could install Ansible on the load balancer which will have access to inner boxes.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/ansible-workshop-deploy\" target=\"_blank\" rel=\"external\">My progress through the workshop</a><br><a href=\"http://www.meetup.com/boltmade-sessions/events/230344829/?rv=cr1&amp;_af=event&amp;_af_eid=230344829&amp;https=off\" target=\"_blank\" rel=\"external\">Meetup event</a></p>\n","excerpt":"","more":"<p>Another great workshop with the people at <a href=\"www.boltmade.com\">Boltmade</a>.  This time around, it was series of exercises to refactor the deployment of a cloud app using <a href=\"https://www.ansible.com/\">Ansible</a>.</p>\n<p>At its most basic Ansible is a way of replacing your app’s initialization shell scripts or manual deployment steps.</p>\n<p>Deployments will become complex over time.  Shell scripts hit a complexity wall where you have to give up and start over with a config management system.  Ansible is simple to start with and can evolve as complexity grows over time.  Extremely useful if you are deploying unusual combinations of software.</p>\n<p>Puppet &amp; Chef require a remote deploy server, so there is a centralized point of failure.  With Ansible, you just ssh in and start doing stuff so it can also provision a local server.</p>\n<p>Deployments are not static.  Ansible allows you to tie your deployment requirements to your source making deployment repeatable and easy.  By looking at your source history, you can see how your server requirements have changed over time.  You can look at old versions of your application and see what the infrastructure was like back then.  It also captures any workarounds required to deploy combinations of software and infrastructure versions.</p>\n<p>Ansible is a structured way of accomplishing a deployment.  It gives you a common language for how things are configured/deployed at your company.  The release engineers who follow you can understand your deployment process (playbook) because it has standard <em>style</em>.  Removes the need to have separate documents for how things should be setup.</p>\n<p>It’s possible to configure Ansible to do idempotent deployments so you can deploy again and again and get same results.  Ansible can be made smart enough to skip steps that aren’t needed.  You won’t need to comment out sections (like you have to with bash scripts) while doing iterative development.</p>\n<p>A potential downside of ansibles simplicity is that if you can forget about temporary fixes while getting things working that come back and haunt you later (ex: hardcoded/default passwords).</p>\n<p>Random Notes:</p>\n<ul>\n<li><u>Galaxy Roles</u> - Community built roles you can use but they can be overkill (for large server farms) and have poor practices.</li>\n<li>Ansible + Vagrant = Can deploy both a real server and setup a development environment using the same scripts.  You may have to do some extra work to make vagrant behave like a remove box.</li>\n<li><u>Ansible Vault</u> will encrypt data so it can be stored with the rest of the application code in source control.  It will only be decrypted when Ansible is provisioning a box.</li>\n<li>Could install Ansible on the load balancer which will have access to inner boxes.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/ansible-workshop-deploy\">My progress through the workshop</a><br><a href=\"http://www.meetup.com/boltmade-sessions/events/230344829/?rv=cr1&amp;_af=event&amp;_af_eid=230344829&amp;https=off\">Meetup event</a></p>\n"},{"title":"Design Patterns: Elements of Reusable Object-Oriented Software","date":"2015-06-01T00:00:00.000Z","_content":"- Most of the patterns revolve around solving problems in the GUI domain using a static language.\n- This strikes me as one of those books everyone says to read but havent' read themselves.\n- It's ... rather dry.  Useful if you have insomnia.\n- I'd recommend [Head First Design Patterns](https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book) instead.\n\n[Goodreads](https://www.goodreads.com/book/show/85009.Design_Patterns?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Design-Patterns-Elements-of-Reusable-Object-Oriented-Software.md","raw":"---\ntitle: 'Design Patterns: Elements of Reusable Object-Oriented Software'\ndate: 2015-06-01 00:00:00\ntags:\n- Books\n- μReview\n---\n- Most of the patterns revolve around solving problems in the GUI domain using a static language.\n- This strikes me as one of those books everyone says to read but havent' read themselves.\n- It's ... rather dry.  Useful if you have insomnia.\n- I'd recommend [Head First Design Patterns](https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book) instead.\n\n[Goodreads](https://www.goodreads.com/book/show/85009.Design_Patterns?utm_medium=api&amp;utm_source=blog_book)","slug":"Design-Patterns-Elements-of-Reusable-Object-Oriented-Software","published":1,"updated":"2016-04-14T15:00:31.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjt5000ry0kwi7qts6gj","content":"<ul>\n<li>Most of the patterns revolve around solving problems in the GUI domain using a static language.</li>\n<li>This strikes me as one of those books everyone says to read but havent’ read themselves.</li>\n<li>It’s … rather dry.  Useful if you have insomnia.</li>\n<li>I’d recommend <a href=\"https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Head First Design Patterns</a> instead.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/85009.Design_Patterns?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<ul>\n<li>Most of the patterns revolve around solving problems in the GUI domain using a static language.</li>\n<li>This strikes me as one of those books everyone says to read but havent’ read themselves.</li>\n<li>It’s … rather dry.  Useful if you have insomnia.</li>\n<li>I’d recommend <a href=\"https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book\">Head First Design Patterns</a> instead.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/85009.Design_Patterns?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Designing Data-Intensive Applications Review","date":"2016-04-04T00:00:00.000Z","_content":"This [book](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&utm_source=blog_book) is still in pre-release so I've only been able to go through the first nine chapters.  It breaks a confusing field into logical pieces and then shows you how they fit together.  I'd recommend it to anyone who interested in databases or distributed systems.\n\n- Does an amazing job of explaining the algorithms and data structures used to implement systems and what problems they are best at solving.\n- Focuses on concepts and avoids the mistake of only talking about particular products or implementations.\n- Explains different guarantees and the tradeoffs made in providing them.\n- Lots of references and examples.  The author has pulled together a lot of material for this book.\n\n**Chapter Notes**\n1. *Reliable, Scalable, and Maintainable Applications*\n  * Think of response time not a single number but as a distribution of values you can measure.\n  * The mean is not a good metric if you want to know your \"typical\" response time because it doesn't tell you how many users actually experience that delay.\n  * The architecture of large scale systems is usually highly specific to the application.  There is not such thing as **magic scaling sauce** (a generic one-size-fits-all scalable architecture).\n2. *The Battle of the Data Models*\n  * <u>Many to one relationships</u> - Prefer relational model\n  * <u>One to many (hierarchy) relationships</u> - Prefer document model\n  * <u>Many to many relationships</u> - Prefer graph model\n  * The advantage of using and ID is that it has no reason to change even in the information it identifies changes.\n  * Document databases don't need joins to work with one-to-many tree structures, and support for joins if often weak.\n3. *Storage and Retrieval*\n  * Storage engines fall into two broad categories:\n    * <u>Transaction processing systems</u> - Many queries each accessing a small number of records using some kind of key.  Disk seek time is often the bottleneck.\n    * <u>Analytic system</u> - Few queries each accessing a large number of records.  Disk bandwidth is often the bottleneck.  Column databases work best for computing aggregated statistics.\n   * Two major implementations of storage engines are:\n    * <u>log-structured</u> - Only ever appends to files (Cassandra).\n    * <u>update-in-place</u> - Treat disk as fixed size pages that can be overwritten (Traditional RDMS/B-Trees).\n   * The performance of in-memory databases is more because they avoid the overhead of encoding the data into data structures that can be written to disk than the actual reading from disk.\n   * Easier to maintain sorted order in memory with Red-Black/AVL trees which allow keys to be inserted in any order and read back in sorted order.\n   * The star schema divides data into facts and dimensions.  Each row in a <u>fact table</u> represents and event that occurred at a particular time.  Each row in a <u>dimension table</u> represents the who, what, where, when, how, and why of the event.  Visually the fact table is in the middle, surrounded by its foreign keys to dimension tables like rays of a star.\n   * The key idea of log-structured storage engines is to turn random-access writes into sequential writes on disk which are faster on HDD/SSD.\n   * When queries involve sequentially scanning across a large number of rows, indexes are much less relevant.  Instead, it becomes important to encode data compactly, to minimize the amount of data the query needs to read from disk.\n4. *Encoding and Evolution*\n  * Data flow:\n    * <u>Databases</u> - Different applications read/write to a shared database.\n    * <u>REST/RPC</u> - Clients connect to a server that exposes API (service).  The server may talk to other servers to handle client request (microservices).\n    * <u>Message Passing</u> - Asynchronous message passing systems (Message brokers or distributed actors) where nodes send each other messages.\n  * During rolling upgrades different nodes will be running different versions of code so we need the data flowing in the system to have both backward compatibility and forward compatibility.\n5. *Replication*\n  * Reasons to replicate:\n    * Keep working even when machines go down (availability)\n    * Continue to work during network partitions (availability)\n    * Place data geographically close to users (latency)\n    * Handle higher volume of writes than possible with one machine (scalability).\n  * Replication types:\n    * <u>Single-leader</u> - Clients sent all writes to single leader node which streams changes to followers.  Can read from any node but followers may be stale.\n    * <u>Multi-leader</u> - Clients send each write to one of several leader nodes.  Leaders send streams of changes to each other and followers.   Need to handle write concurrency conflicts.\n    * <u>Leaderless replication</u> - Clients read and write to/from several nodes in parallel.   Need to handle write concurrency conflicts.\n  * Consistency models:\n    * <u>Read-after-write</u> - User should see the latest copy of any data they submitted themselves.\n    * <u>Monotonic reads</u> - After user sees data from one point in time they should never see data from an earlier point in time.\n    * <u>Consistent prefix reads</u> - Users see data in casual order.  Should not see the answer before the question.\n6. *Partitioning*\n  * Partitioning Strategies:\n    * <u>Key</u> Range - assign a continuous range of keys.  Allows efficient range queries but increases the risk of hot spots.\n    * <u>Hash</u> - assign based on the hash of the key.  Uniformly distribute skewed data preventing hot spots but inefficient range queries.\n    * <u>Compound Key</u> -  Hybrid approach. The first part of the key is hashed to determine partition and the second part is used to sort the data within the partition.  Allows efficient range queries on the columns in the second part of the key.\n7. *Transactions*\n  * An abstraction layer that allows applications to pretend certain types of concurrency problems and faults don't exist.\n8. *The Trouble with Distributed Systems*\n  * Typical partial failures include:\n    * Both the sent packet and its reply can be lost or delayed.\n    * Node clocks being out of sync with each other.\n    * Clocks jumping forward or back in time due to NTP.\n    * Processes pausing for long periods and not realizing they have been paused when resumed.\n  * To tolerate faults you first need to detect them and the only tool we have is timeouts which tell us nothing about the nature of the fault.\n9. *Consistency and Consensus*\n  * Shows how the CAP theorem is misleading when applied to real-world systems.  The author also has a [Blog Post](https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html).  Before this, I thought that quorum style systems with a majority were consistent but it turns out I didn't even understand what the word consistent means.\n\n[Goodreads](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&utm_source=blog_book)","source":"_posts/Designing-Data-Intensive-Applications.md","raw":"---\ntitle: Designing Data-Intensive Applications Review\ndate: 2016-04-04 00:00:00\ntags:\n- Books\n- Reviews\n- Distributed Systems\n- Databases\n---\nThis [book](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&utm_source=blog_book) is still in pre-release so I've only been able to go through the first nine chapters.  It breaks a confusing field into logical pieces and then shows you how they fit together.  I'd recommend it to anyone who interested in databases or distributed systems.\n\n- Does an amazing job of explaining the algorithms and data structures used to implement systems and what problems they are best at solving.\n- Focuses on concepts and avoids the mistake of only talking about particular products or implementations.\n- Explains different guarantees and the tradeoffs made in providing them.\n- Lots of references and examples.  The author has pulled together a lot of material for this book.\n\n**Chapter Notes**\n1. *Reliable, Scalable, and Maintainable Applications*\n  * Think of response time not a single number but as a distribution of values you can measure.\n  * The mean is not a good metric if you want to know your \"typical\" response time because it doesn't tell you how many users actually experience that delay.\n  * The architecture of large scale systems is usually highly specific to the application.  There is not such thing as **magic scaling sauce** (a generic one-size-fits-all scalable architecture).\n2. *The Battle of the Data Models*\n  * <u>Many to one relationships</u> - Prefer relational model\n  * <u>One to many (hierarchy) relationships</u> - Prefer document model\n  * <u>Many to many relationships</u> - Prefer graph model\n  * The advantage of using and ID is that it has no reason to change even in the information it identifies changes.\n  * Document databases don't need joins to work with one-to-many tree structures, and support for joins if often weak.\n3. *Storage and Retrieval*\n  * Storage engines fall into two broad categories:\n    * <u>Transaction processing systems</u> - Many queries each accessing a small number of records using some kind of key.  Disk seek time is often the bottleneck.\n    * <u>Analytic system</u> - Few queries each accessing a large number of records.  Disk bandwidth is often the bottleneck.  Column databases work best for computing aggregated statistics.\n   * Two major implementations of storage engines are:\n    * <u>log-structured</u> - Only ever appends to files (Cassandra).\n    * <u>update-in-place</u> - Treat disk as fixed size pages that can be overwritten (Traditional RDMS/B-Trees).\n   * The performance of in-memory databases is more because they avoid the overhead of encoding the data into data structures that can be written to disk than the actual reading from disk.\n   * Easier to maintain sorted order in memory with Red-Black/AVL trees which allow keys to be inserted in any order and read back in sorted order.\n   * The star schema divides data into facts and dimensions.  Each row in a <u>fact table</u> represents and event that occurred at a particular time.  Each row in a <u>dimension table</u> represents the who, what, where, when, how, and why of the event.  Visually the fact table is in the middle, surrounded by its foreign keys to dimension tables like rays of a star.\n   * The key idea of log-structured storage engines is to turn random-access writes into sequential writes on disk which are faster on HDD/SSD.\n   * When queries involve sequentially scanning across a large number of rows, indexes are much less relevant.  Instead, it becomes important to encode data compactly, to minimize the amount of data the query needs to read from disk.\n4. *Encoding and Evolution*\n  * Data flow:\n    * <u>Databases</u> - Different applications read/write to a shared database.\n    * <u>REST/RPC</u> - Clients connect to a server that exposes API (service).  The server may talk to other servers to handle client request (microservices).\n    * <u>Message Passing</u> - Asynchronous message passing systems (Message brokers or distributed actors) where nodes send each other messages.\n  * During rolling upgrades different nodes will be running different versions of code so we need the data flowing in the system to have both backward compatibility and forward compatibility.\n5. *Replication*\n  * Reasons to replicate:\n    * Keep working even when machines go down (availability)\n    * Continue to work during network partitions (availability)\n    * Place data geographically close to users (latency)\n    * Handle higher volume of writes than possible with one machine (scalability).\n  * Replication types:\n    * <u>Single-leader</u> - Clients sent all writes to single leader node which streams changes to followers.  Can read from any node but followers may be stale.\n    * <u>Multi-leader</u> - Clients send each write to one of several leader nodes.  Leaders send streams of changes to each other and followers.   Need to handle write concurrency conflicts.\n    * <u>Leaderless replication</u> - Clients read and write to/from several nodes in parallel.   Need to handle write concurrency conflicts.\n  * Consistency models:\n    * <u>Read-after-write</u> - User should see the latest copy of any data they submitted themselves.\n    * <u>Monotonic reads</u> - After user sees data from one point in time they should never see data from an earlier point in time.\n    * <u>Consistent prefix reads</u> - Users see data in casual order.  Should not see the answer before the question.\n6. *Partitioning*\n  * Partitioning Strategies:\n    * <u>Key</u> Range - assign a continuous range of keys.  Allows efficient range queries but increases the risk of hot spots.\n    * <u>Hash</u> - assign based on the hash of the key.  Uniformly distribute skewed data preventing hot spots but inefficient range queries.\n    * <u>Compound Key</u> -  Hybrid approach. The first part of the key is hashed to determine partition and the second part is used to sort the data within the partition.  Allows efficient range queries on the columns in the second part of the key.\n7. *Transactions*\n  * An abstraction layer that allows applications to pretend certain types of concurrency problems and faults don't exist.\n8. *The Trouble with Distributed Systems*\n  * Typical partial failures include:\n    * Both the sent packet and its reply can be lost or delayed.\n    * Node clocks being out of sync with each other.\n    * Clocks jumping forward or back in time due to NTP.\n    * Processes pausing for long periods and not realizing they have been paused when resumed.\n  * To tolerate faults you first need to detect them and the only tool we have is timeouts which tell us nothing about the nature of the fault.\n9. *Consistency and Consensus*\n  * Shows how the CAP theorem is misleading when applied to real-world systems.  The author also has a [Blog Post](https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html).  Before this, I thought that quorum style systems with a majority were consistent but it turns out I didn't even understand what the word consistent means.\n\n[Goodreads](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&utm_source=blog_book)","slug":"Designing-Data-Intensive-Applications","published":1,"updated":"2016-04-21T19:11:34.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjt8000uy0kw28346dj6","content":"<p>This <a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">book</a> is still in pre-release so I’ve only been able to go through the first nine chapters.  It breaks a confusing field into logical pieces and then shows you how they fit together.  I’d recommend it to anyone who interested in databases or distributed systems.</p>\n<ul>\n<li>Does an amazing job of explaining the algorithms and data structures used to implement systems and what problems they are best at solving.</li>\n<li>Focuses on concepts and avoids the mistake of only talking about particular products or implementations.</li>\n<li>Explains different guarantees and the tradeoffs made in providing them.</li>\n<li>Lots of references and examples.  The author has pulled together a lot of material for this book.</li>\n</ul>\n<p><strong>Chapter Notes</strong></p>\n<ol>\n<li><em>Reliable, Scalable, and Maintainable Applications</em><ul>\n<li>Think of response time not a single number but as a distribution of values you can measure.</li>\n<li>The mean is not a good metric if you want to know your “typical” response time because it doesn’t tell you how many users actually experience that delay.</li>\n<li>The architecture of large scale systems is usually highly specific to the application.  There is not such thing as <strong>magic scaling sauce</strong> (a generic one-size-fits-all scalable architecture).</li>\n</ul>\n</li>\n<li><em>The Battle of the Data Models</em><ul>\n<li><u>Many to one relationships</u> - Prefer relational model</li>\n<li><u>One to many (hierarchy) relationships</u> - Prefer document model</li>\n<li><u>Many to many relationships</u> - Prefer graph model</li>\n<li>The advantage of using and ID is that it has no reason to change even in the information it identifies changes.</li>\n<li>Document databases don’t need joins to work with one-to-many tree structures, and support for joins if often weak.</li>\n</ul>\n</li>\n<li><em>Storage and Retrieval</em><ul>\n<li>Storage engines fall into two broad categories:<ul>\n<li><u>Transaction processing systems</u> - Many queries each accessing a small number of records using some kind of key.  Disk seek time is often the bottleneck.</li>\n<li><u>Analytic system</u> - Few queries each accessing a large number of records.  Disk bandwidth is often the bottleneck.  Column databases work best for computing aggregated statistics.</li>\n</ul>\n</li>\n<li>Two major implementations of storage engines are:<ul>\n<li><u>log-structured</u> - Only ever appends to files (Cassandra).</li>\n<li><u>update-in-place</u> - Treat disk as fixed size pages that can be overwritten (Traditional RDMS/B-Trees).</li>\n</ul>\n</li>\n<li>The performance of in-memory databases is more because they avoid the overhead of encoding the data into data structures that can be written to disk than the actual reading from disk.</li>\n<li>Easier to maintain sorted order in memory with Red-Black/AVL trees which allow keys to be inserted in any order and read back in sorted order.</li>\n<li>The star schema divides data into facts and dimensions.  Each row in a <u>fact table</u> represents and event that occurred at a particular time.  Each row in a <u>dimension table</u> represents the who, what, where, when, how, and why of the event.  Visually the fact table is in the middle, surrounded by its foreign keys to dimension tables like rays of a star.</li>\n<li>The key idea of log-structured storage engines is to turn random-access writes into sequential writes on disk which are faster on HDD/SSD.</li>\n<li>When queries involve sequentially scanning across a large number of rows, indexes are much less relevant.  Instead, it becomes important to encode data compactly, to minimize the amount of data the query needs to read from disk.</li>\n</ul>\n</li>\n<li><em>Encoding and Evolution</em><ul>\n<li>Data flow:<ul>\n<li><u>Databases</u> - Different applications read/write to a shared database.</li>\n<li><u>REST/RPC</u> - Clients connect to a server that exposes API (service).  The server may talk to other servers to handle client request (microservices).</li>\n<li><u>Message Passing</u> - Asynchronous message passing systems (Message brokers or distributed actors) where nodes send each other messages.</li>\n</ul>\n</li>\n<li>During rolling upgrades different nodes will be running different versions of code so we need the data flowing in the system to have both backward compatibility and forward compatibility.</li>\n</ul>\n</li>\n<li><em>Replication</em><ul>\n<li>Reasons to replicate:<ul>\n<li>Keep working even when machines go down (availability)</li>\n<li>Continue to work during network partitions (availability)</li>\n<li>Place data geographically close to users (latency)</li>\n<li>Handle higher volume of writes than possible with one machine (scalability).</li>\n</ul>\n</li>\n<li>Replication types:<ul>\n<li><u>Single-leader</u> - Clients sent all writes to single leader node which streams changes to followers.  Can read from any node but followers may be stale.</li>\n<li><u>Multi-leader</u> - Clients send each write to one of several leader nodes.  Leaders send streams of changes to each other and followers.   Need to handle write concurrency conflicts.</li>\n<li><u>Leaderless replication</u> - Clients read and write to/from several nodes in parallel.   Need to handle write concurrency conflicts.</li>\n</ul>\n</li>\n<li>Consistency models:<ul>\n<li><u>Read-after-write</u> - User should see the latest copy of any data they submitted themselves.</li>\n<li><u>Monotonic reads</u> - After user sees data from one point in time they should never see data from an earlier point in time.</li>\n<li><u>Consistent prefix reads</u> - Users see data in casual order.  Should not see the answer before the question.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Partitioning</em><ul>\n<li>Partitioning Strategies:<ul>\n<li><u>Key</u> Range - assign a continuous range of keys.  Allows efficient range queries but increases the risk of hot spots.</li>\n<li><u>Hash</u> - assign based on the hash of the key.  Uniformly distribute skewed data preventing hot spots but inefficient range queries.</li>\n<li><u>Compound Key</u> -  Hybrid approach. The first part of the key is hashed to determine partition and the second part is used to sort the data within the partition.  Allows efficient range queries on the columns in the second part of the key.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Transactions</em><ul>\n<li>An abstraction layer that allows applications to pretend certain types of concurrency problems and faults don’t exist.</li>\n</ul>\n</li>\n<li><em>The Trouble with Distributed Systems</em><ul>\n<li>Typical partial failures include:<ul>\n<li>Both the sent packet and its reply can be lost or delayed.</li>\n<li>Node clocks being out of sync with each other.</li>\n<li>Clocks jumping forward or back in time due to NTP.</li>\n<li>Processes pausing for long periods and not realizing they have been paused when resumed.</li>\n</ul>\n</li>\n<li>To tolerate faults you first need to detect them and the only tool we have is timeouts which tell us nothing about the nature of the fault.</li>\n</ul>\n</li>\n<li><em>Consistency and Consensus</em><ul>\n<li>Shows how the CAP theorem is misleading when applied to real-world systems.  The author also has a <a href=\"https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html\" target=\"_blank\" rel=\"external\">Blog Post</a>.  Before this, I thought that quorum style systems with a majority were consistent but it turns out I didn’t even understand what the word consistent means.</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<p>This <a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&amp;utm_source=blog_book\">book</a> is still in pre-release so I’ve only been able to go through the first nine chapters.  It breaks a confusing field into logical pieces and then shows you how they fit together.  I’d recommend it to anyone who interested in databases or distributed systems.</p>\n<ul>\n<li>Does an amazing job of explaining the algorithms and data structures used to implement systems and what problems they are best at solving.</li>\n<li>Focuses on concepts and avoids the mistake of only talking about particular products or implementations.</li>\n<li>Explains different guarantees and the tradeoffs made in providing them.</li>\n<li>Lots of references and examples.  The author has pulled together a lot of material for this book.</li>\n</ul>\n<p><strong>Chapter Notes</strong></p>\n<ol>\n<li><em>Reliable, Scalable, and Maintainable Applications</em><ul>\n<li>Think of response time not a single number but as a distribution of values you can measure.</li>\n<li>The mean is not a good metric if you want to know your “typical” response time because it doesn’t tell you how many users actually experience that delay.</li>\n<li>The architecture of large scale systems is usually highly specific to the application.  There is not such thing as <strong>magic scaling sauce</strong> (a generic one-size-fits-all scalable architecture).</li>\n</ul>\n</li>\n<li><em>The Battle of the Data Models</em><ul>\n<li><u>Many to one relationships</u> - Prefer relational model</li>\n<li><u>One to many (hierarchy) relationships</u> - Prefer document model</li>\n<li><u>Many to many relationships</u> - Prefer graph model</li>\n<li>The advantage of using and ID is that it has no reason to change even in the information it identifies changes.</li>\n<li>Document databases don’t need joins to work with one-to-many tree structures, and support for joins if often weak.</li>\n</ul>\n</li>\n<li><em>Storage and Retrieval</em><ul>\n<li>Storage engines fall into two broad categories:<ul>\n<li><u>Transaction processing systems</u> - Many queries each accessing a small number of records using some kind of key.  Disk seek time is often the bottleneck.</li>\n<li><u>Analytic system</u> - Few queries each accessing a large number of records.  Disk bandwidth is often the bottleneck.  Column databases work best for computing aggregated statistics.</li>\n</ul>\n</li>\n<li>Two major implementations of storage engines are:<ul>\n<li><u>log-structured</u> - Only ever appends to files (Cassandra).</li>\n<li><u>update-in-place</u> - Treat disk as fixed size pages that can be overwritten (Traditional RDMS/B-Trees).</li>\n</ul>\n</li>\n<li>The performance of in-memory databases is more because they avoid the overhead of encoding the data into data structures that can be written to disk than the actual reading from disk.</li>\n<li>Easier to maintain sorted order in memory with Red-Black/AVL trees which allow keys to be inserted in any order and read back in sorted order.</li>\n<li>The star schema divides data into facts and dimensions.  Each row in a <u>fact table</u> represents and event that occurred at a particular time.  Each row in a <u>dimension table</u> represents the who, what, where, when, how, and why of the event.  Visually the fact table is in the middle, surrounded by its foreign keys to dimension tables like rays of a star.</li>\n<li>The key idea of log-structured storage engines is to turn random-access writes into sequential writes on disk which are faster on HDD/SSD.</li>\n<li>When queries involve sequentially scanning across a large number of rows, indexes are much less relevant.  Instead, it becomes important to encode data compactly, to minimize the amount of data the query needs to read from disk.</li>\n</ul>\n</li>\n<li><em>Encoding and Evolution</em><ul>\n<li>Data flow:<ul>\n<li><u>Databases</u> - Different applications read/write to a shared database.</li>\n<li><u>REST/RPC</u> - Clients connect to a server that exposes API (service).  The server may talk to other servers to handle client request (microservices).</li>\n<li><u>Message Passing</u> - Asynchronous message passing systems (Message brokers or distributed actors) where nodes send each other messages.</li>\n</ul>\n</li>\n<li>During rolling upgrades different nodes will be running different versions of code so we need the data flowing in the system to have both backward compatibility and forward compatibility.</li>\n</ul>\n</li>\n<li><em>Replication</em><ul>\n<li>Reasons to replicate:<ul>\n<li>Keep working even when machines go down (availability)</li>\n<li>Continue to work during network partitions (availability)</li>\n<li>Place data geographically close to users (latency)</li>\n<li>Handle higher volume of writes than possible with one machine (scalability).</li>\n</ul>\n</li>\n<li>Replication types:<ul>\n<li><u>Single-leader</u> - Clients sent all writes to single leader node which streams changes to followers.  Can read from any node but followers may be stale.</li>\n<li><u>Multi-leader</u> - Clients send each write to one of several leader nodes.  Leaders send streams of changes to each other and followers.   Need to handle write concurrency conflicts.</li>\n<li><u>Leaderless replication</u> - Clients read and write to/from several nodes in parallel.   Need to handle write concurrency conflicts.</li>\n</ul>\n</li>\n<li>Consistency models:<ul>\n<li><u>Read-after-write</u> - User should see the latest copy of any data they submitted themselves.</li>\n<li><u>Monotonic reads</u> - After user sees data from one point in time they should never see data from an earlier point in time.</li>\n<li><u>Consistent prefix reads</u> - Users see data in casual order.  Should not see the answer before the question.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Partitioning</em><ul>\n<li>Partitioning Strategies:<ul>\n<li><u>Key</u> Range - assign a continuous range of keys.  Allows efficient range queries but increases the risk of hot spots.</li>\n<li><u>Hash</u> - assign based on the hash of the key.  Uniformly distribute skewed data preventing hot spots but inefficient range queries.</li>\n<li><u>Compound Key</u> -  Hybrid approach. The first part of the key is hashed to determine partition and the second part is used to sort the data within the partition.  Allows efficient range queries on the columns in the second part of the key.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>Transactions</em><ul>\n<li>An abstraction layer that allows applications to pretend certain types of concurrency problems and faults don’t exist.</li>\n</ul>\n</li>\n<li><em>The Trouble with Distributed Systems</em><ul>\n<li>Typical partial failures include:<ul>\n<li>Both the sent packet and its reply can be lost or delayed.</li>\n<li>Node clocks being out of sync with each other.</li>\n<li>Clocks jumping forward or back in time due to NTP.</li>\n<li>Processes pausing for long periods and not realizing they have been paused when resumed.</li>\n</ul>\n</li>\n<li>To tolerate faults you first need to detect them and the only tool we have is timeouts which tell us nothing about the nature of the fault.</li>\n</ul>\n</li>\n<li><em>Consistency and Consensus</em><ul>\n<li>Shows how the CAP theorem is misleading when applied to real-world systems.  The author also has a <a href=\"https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html\">Blog Post</a>.  Before this, I thought that quorum style systems with a majority were consistent but it turns out I didn’t even understand what the word consistent means.</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Data Structures for Web Devs Presentation","date":"2016-04-12T00:00:00.000Z","_content":"I did a ½ presentation ½ discussion on data structures for our web developer team.\n\nWhere I work developers come from different backgrounds and not everyone has a computer science vocabulary.  It was interesting trying to talk about data structures without cheating by using CS jargon.  It was surprising how much I depend on having a shared specialized language when discussing algorithms and data structures.  They weren't joking when they said the easiest way to learn something is to explain it to someone else.\n\nI only had 1.5 hours, so it was tricky fitting in everything I wanted to go over with enough time to discuss each slide.  My goal was to persuade people to use ES6's new Map() and Set() data structures instead of arrays when appropriate.  We are also planning to increase the amount we use Immutable.js with React so I accepted to give a hand-wavey explanation of persistent data structures.\n\nI should have spent more time the persistent data structure section.  I think people got that we can check for changes in constant time (by reference equality) but I don't think I did a great job of giving people a rough idea of how the internal bookkeeping works.\n\nAn infinite amount of time to fact check my slides would also have been nice :-).\n\n[Presentation](/pdfs/Data Structures for Web Devs.pdf)","source":"_posts/Data-Structures-for-Web-Devs-Presentation.md","raw":"---\ntitle: Data Structures for Web Devs Presentation\ndate: 2016-04-12 00:00:00\ntags:\n- Presentations\n- Data Structures\n---\nI did a ½ presentation ½ discussion on data structures for our web developer team.\n\nWhere I work developers come from different backgrounds and not everyone has a computer science vocabulary.  It was interesting trying to talk about data structures without cheating by using CS jargon.  It was surprising how much I depend on having a shared specialized language when discussing algorithms and data structures.  They weren't joking when they said the easiest way to learn something is to explain it to someone else.\n\nI only had 1.5 hours, so it was tricky fitting in everything I wanted to go over with enough time to discuss each slide.  My goal was to persuade people to use ES6's new Map() and Set() data structures instead of arrays when appropriate.  We are also planning to increase the amount we use Immutable.js with React so I accepted to give a hand-wavey explanation of persistent data structures.\n\nI should have spent more time the persistent data structure section.  I think people got that we can check for changes in constant time (by reference equality) but I don't think I did a great job of giving people a rough idea of how the internal bookkeeping works.\n\nAn infinite amount of time to fact check my slides would also have been nice :-).\n\n[Presentation](/pdfs/Data Structures for Web Devs.pdf)","slug":"Data-Structures-for-Web-Devs-Presentation","published":1,"updated":"2016-04-14T18:23:10.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjta000wy0kwu1g47lfk","content":"<p>I did a ½ presentation ½ discussion on data structures for our web developer team.</p>\n<p>Where I work developers come from different backgrounds and not everyone has a computer science vocabulary.  It was interesting trying to talk about data structures without cheating by using CS jargon.  It was surprising how much I depend on having a shared specialized language when discussing algorithms and data structures.  They weren’t joking when they said the easiest way to learn something is to explain it to someone else.</p>\n<p>I only had 1.5 hours, so it was tricky fitting in everything I wanted to go over with enough time to discuss each slide.  My goal was to persuade people to use ES6’s new Map() and Set() data structures instead of arrays when appropriate.  We are also planning to increase the amount we use Immutable.js with React so I accepted to give a hand-wavey explanation of persistent data structures.</p>\n<p>I should have spent more time the persistent data structure section.  I think people got that we can check for changes in constant time (by reference equality) but I don’t think I did a great job of giving people a rough idea of how the internal bookkeeping works.</p>\n<p>An infinite amount of time to fact check my slides would also have been nice :-).</p>\n<p><a href=\"/pdfs/Data Structures for Web Devs.pdf\">Presentation</a></p>\n","excerpt":"","more":"<p>I did a ½ presentation ½ discussion on data structures for our web developer team.</p>\n<p>Where I work developers come from different backgrounds and not everyone has a computer science vocabulary.  It was interesting trying to talk about data structures without cheating by using CS jargon.  It was surprising how much I depend on having a shared specialized language when discussing algorithms and data structures.  They weren’t joking when they said the easiest way to learn something is to explain it to someone else.</p>\n<p>I only had 1.5 hours, so it was tricky fitting in everything I wanted to go over with enough time to discuss each slide.  My goal was to persuade people to use ES6’s new Map() and Set() data structures instead of arrays when appropriate.  We are also planning to increase the amount we use Immutable.js with React so I accepted to give a hand-wavey explanation of persistent data structures.</p>\n<p>I should have spent more time the persistent data structure section.  I think people got that we can check for changes in constant time (by reference equality) but I don’t think I did a great job of giving people a rough idea of how the internal bookkeeping works.</p>\n<p>An infinite amount of time to fact check my slides would also have been nice :-).</p>\n<p><a href=\"/pdfs/Data Structures for Web Devs.pdf\">Presentation</a></p>\n"},{"title":"Elements of Programming Interviews: 300 Questions and Solutions","date":"2015-01-27T00:00:00.000Z","_content":"Not having a formal computer science background I found working through this book difficult but well worth the time. If you are also largely self-taught I'd recommend working through \"Cracking the Coding interview\" in parallel. I found the problems in CTCI a bit easier with better explanations which helped me to tackle the problems in this book.\n\nThis is a fairly dense book so I'd recommend buying it well before you intend to start interviewing and try doing a question or two a day.\n\nI was a bit discouraged when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable 'running' code in your head. These are not just useful interview skills. Estimating how code scales lets you judge when it's worth increasing code complexity to optimize or when a simple brute force is 'good enough' and the habit of 'running' code in you head causes potential errors to jump out at you while reading code. I'd recommend both these books for anyone interested in being a better software engineer.\n\n[Goodreads](https://www.goodreads.com/book/show/16253895-elements-of-programming-interviews?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Elements-of-Programming-Interviews-300-Questions-and-Solutions.md","raw":"---\ntitle: 'Elements of Programming Interviews: 300 Questions and Solutions'\ndate: 2015-01-27 00:00:00\ntags:\n- Books\n- μReview\n---\nNot having a formal computer science background I found working through this book difficult but well worth the time. If you are also largely self-taught I'd recommend working through \"Cracking the Coding interview\" in parallel. I found the problems in CTCI a bit easier with better explanations which helped me to tackle the problems in this book.\n\nThis is a fairly dense book so I'd recommend buying it well before you intend to start interviewing and try doing a question or two a day.\n\nI was a bit discouraged when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable 'running' code in your head. These are not just useful interview skills. Estimating how code scales lets you judge when it's worth increasing code complexity to optimize or when a simple brute force is 'good enough' and the habit of 'running' code in you head causes potential errors to jump out at you while reading code. I'd recommend both these books for anyone interested in being a better software engineer.\n\n[Goodreads](https://www.goodreads.com/book/show/16253895-elements-of-programming-interviews?utm_medium=api&amp;utm_source=blog_book)","slug":"Elements-of-Programming-Interviews-300-Questions-and-Solutions","published":1,"updated":"2016-04-14T15:00:24.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtb000zy0kwm5ic0xa8","content":"<p>Not having a formal computer science background I found working through this book difficult but well worth the time. If you are also largely self-taught I’d recommend working through “Cracking the Coding interview” in parallel. I found the problems in CTCI a bit easier with better explanations which helped me to tackle the problems in this book.</p>\n<p>This is a fairly dense book so I’d recommend buying it well before you intend to start interviewing and try doing a question or two a day.</p>\n<p>I was a bit discouraged when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable ‘running’ code in your head. These are not just useful interview skills. Estimating how code scales lets you judge when it’s worth increasing code complexity to optimize or when a simple brute force is ‘good enough’ and the habit of ‘running’ code in you head causes potential errors to jump out at you while reading code. I’d recommend both these books for anyone interested in being a better software engineer.</p>\n<p><a href=\"https://www.goodreads.com/book/show/16253895-elements-of-programming-interviews?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<p>Not having a formal computer science background I found working through this book difficult but well worth the time. If you are also largely self-taught I’d recommend working through “Cracking the Coding interview” in parallel. I found the problems in CTCI a bit easier with better explanations which helped me to tackle the problems in this book.</p>\n<p>This is a fairly dense book so I’d recommend buying it well before you intend to start interviewing and try doing a question or two a day.</p>\n<p>I was a bit discouraged when I first started practising with these books but as I worked through them I started to enjoy the process. You eventually start seeing common patterns, become familiar with common algorithms/data structures, and get comfortable ‘running’ code in your head. These are not just useful interview skills. Estimating how code scales lets you judge when it’s worth increasing code complexity to optimize or when a simple brute force is ‘good enough’ and the habit of ‘running’ code in you head causes potential errors to jump out at you while reading code. I’d recommend both these books for anyone interested in being a better software engineer.</p>\n<p><a href=\"https://www.goodreads.com/book/show/16253895-elements-of-programming-interviews?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Effective Code Reviews Presentation","date":"2016-01-29T00:00:00.000Z","_content":"I gave a presentation on doing effective code reviews at my company's internal developer summit.  There were a *few* more people than I was expecting.  I'm told I didn't look nervous which I'm guessing was due to the dark lighting ☺.\n\nHaving worked on both teams that do code reviews and those that do not I'm convinced that they make a real difference.  They are even more important when people are new to a team (or to software development).  I'd put code reviews right up there with source control on the **must do** development practices list.\n\n[Presentation](/pdfs/Effective Code Reviews.pdf)","source":"_posts/Effective-Code-Reviews.md","raw":"---\ntitle: Effective Code Reviews Presentation\ndate: 2016-01-29 00:00:00\ntags:\n- Presentations\n- Software Development Practices\n---\nI gave a presentation on doing effective code reviews at my company's internal developer summit.  There were a *few* more people than I was expecting.  I'm told I didn't look nervous which I'm guessing was due to the dark lighting ☺.\n\nHaving worked on both teams that do code reviews and those that do not I'm convinced that they make a real difference.  They are even more important when people are new to a team (or to software development).  I'd put code reviews right up there with source control on the **must do** development practices list.\n\n[Presentation](/pdfs/Effective Code Reviews.pdf)","slug":"Effective-Code-Reviews","published":1,"updated":"2016-04-14T18:53:23.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtc0011y0kw5k90uvs2","content":"<p>I gave a presentation on doing effective code reviews at my company’s internal developer summit.  There were a <em>few</em> more people than I was expecting.  I’m told I didn’t look nervous which I’m guessing was due to the dark lighting ☺.</p>\n<p>Having worked on both teams that do code reviews and those that do not I’m convinced that they make a real difference.  They are even more important when people are new to a team (or to software development).  I’d put code reviews right up there with source control on the <strong>must do</strong> development practices list.</p>\n<p><a href=\"/pdfs/Effective Code Reviews.pdf\">Presentation</a></p>\n","excerpt":"","more":"<p>I gave a presentation on doing effective code reviews at my company’s internal developer summit.  There were a <em>few</em> more people than I was expecting.  I’m told I didn’t look nervous which I’m guessing was due to the dark lighting ☺.</p>\n<p>Having worked on both teams that do code reviews and those that do not I’m convinced that they make a real difference.  They are even more important when people are new to a team (or to software development).  I’d put code reviews right up there with source control on the <strong>must do</strong> development practices list.</p>\n<p><a href=\"/pdfs/Effective Code Reviews.pdf\">Presentation</a></p>\n"},{"title":"Ensemble Learning Basics","date":"2015-11-19T18:00:00.000Z","_content":"Interesting talk about how ensemble learning was used in the Netflix contest and a short presentation on statistical bootstrapping.\n- The basic idea is that multiple models are used and they are fitted to the data they work best with.\n- Usually, we compare models and take the best one but what if instead we combine different models and take the best characteristics of each?\n- Cross-validation - using a portion of the sample data to check of over-fitting.\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/226637424/)","source":"_posts/Ensemble-Learning-Basics.md","raw":"---\ntitle: Ensemble Learning Basics\ndate: 2015-11-19 18:00:00\ntags:\n- Data Science\n- Meetup\n---\nInteresting talk about how ensemble learning was used in the Netflix contest and a short presentation on statistical bootstrapping.\n- The basic idea is that multiple models are used and they are fitted to the data they work best with.\n- Usually, we compare models and take the best one but what if instead we combine different models and take the best characteristics of each?\n- Cross-validation - using a portion of the sample data to check of over-fitting.\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/226637424/)","slug":"Ensemble-Learning-Basics","published":1,"updated":"2016-04-14T15:00:18.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtf0014y0kwlpootwzw","content":"<p>Interesting talk about how ensemble learning was used in the Netflix contest and a short presentation on statistical bootstrapping.</p>\n<ul>\n<li>The basic idea is that multiple models are used and they are fitted to the data they work best with.</li>\n<li>Usually, we compare models and take the best one but what if instead we combine different models and take the best characteristics of each?</li>\n<li>Cross-validation - using a portion of the sample data to check of over-fitting.</li>\n</ul>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/226637424/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>Interesting talk about how ensemble learning was used in the Netflix contest and a short presentation on statistical bootstrapping.</p>\n<ul>\n<li>The basic idea is that multiple models are used and they are fitted to the data they work best with.</li>\n<li>Usually, we compare models and take the best one but what if instead we combine different models and take the best characteristics of each?</li>\n<li>Cross-validation - using a portion of the sample data to check of over-fitting.</li>\n</ul>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/226637424/\">Meetup Event</a></p>\n"},{"title":"Expert Android Developers Speak","date":"2015-12-03T19:00:00.000Z","_content":"Presentations on Kotlin and using JNI for android development.\n- I really like Kotlin's idea of separating nullable and non-nullable references.  It seems similar to the option/maybe monad idea (apologies if you design type systems and languages).\n- The gist of the JNI presentation seemed to be that you really don't want to use and the extra layers will probably make your code slower.  It's a way of using C/C++ libraries and not a way to increase performance.\n\n[Meetup Event](http://www.meetup.com/GDG-Waterloo/events/226754660/)","source":"_posts/Expert-Android-Developers-Speak.md","raw":"---\ntitle: Expert Android Developers Speak\ndate: 2015-12-03 19:00:00\ntags:\n- Meetup\n---\nPresentations on Kotlin and using JNI for android development.\n- I really like Kotlin's idea of separating nullable and non-nullable references.  It seems similar to the option/maybe monad idea (apologies if you design type systems and languages).\n- The gist of the JNI presentation seemed to be that you really don't want to use and the extra layers will probably make your code slower.  It's a way of using C/C++ libraries and not a way to increase performance.\n\n[Meetup Event](http://www.meetup.com/GDG-Waterloo/events/226754660/)","slug":"Expert-Android-Developers-Speak","published":1,"updated":"2016-04-14T15:00:12.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtg0016y0kwe6gjgai3","content":"<p>Presentations on Kotlin and using JNI for android development.</p>\n<ul>\n<li>I really like Kotlin’s idea of separating nullable and non-nullable references.  It seems similar to the option/maybe monad idea (apologies if you design type systems and languages).</li>\n<li>The gist of the JNI presentation seemed to be that you really don’t want to use and the extra layers will probably make your code slower.  It’s a way of using C/C++ libraries and not a way to increase performance.</li>\n</ul>\n<p><a href=\"http://www.meetup.com/GDG-Waterloo/events/226754660/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>Presentations on Kotlin and using JNI for android development.</p>\n<ul>\n<li>I really like Kotlin’s idea of separating nullable and non-nullable references.  It seems similar to the option/maybe monad idea (apologies if you design type systems and languages).</li>\n<li>The gist of the JNI presentation seemed to be that you really don’t want to use and the extra layers will probably make your code slower.  It’s a way of using C/C++ libraries and not a way to increase performance.</li>\n</ul>\n<p><a href=\"http://www.meetup.com/GDG-Waterloo/events/226754660/\">Meetup Event</a></p>\n"},{"title":"Ever have one of those days where your L1 cache collapses into a black hole?","date":"2015-02-12T18:20:47.000Z","_content":"Interesting look at how to incorporate the cost of random access into complexity estimates.\n\n> In short: if you try to squeeze too much L1 cache onto your CPU it will eventually collapse into a black hole, and that would make it awkward to get the results of the computation back to the user.\n\n[The Myth of RAM - Part 1](http://www.ilikebigbits.com/blog/2014/4/21/the-myth-of-ram-part-i)\n[The Myth of RAM - Part 2](http://www.ilikebigbits.com/blog/2014/4/28/the-myth-of-ram-part-ii)\n[The Myth of RAM - Part 3](http://www.ilikebigbits.com/blog/2014/4/29/the-myth-of-ram-part-iii)\n[The Myth of RAM - Part 4](http://www.ilikebigbits.com/blog/2015/2/9/the-myth-of-ram-part-iv)","source":"_posts/Ever-have-one-of-those-days-where-your-L1-cache-collapses-into-a-black-hole.md","raw":"---\ntitle: Ever have one of those days where your L1 cache collapses into a black hole?\ndate: 2015-02-12 18:20:47\ntags:\n- Complexity\n---\nInteresting look at how to incorporate the cost of random access into complexity estimates.\n\n> In short: if you try to squeeze too much L1 cache onto your CPU it will eventually collapse into a black hole, and that would make it awkward to get the results of the computation back to the user.\n\n[The Myth of RAM - Part 1](http://www.ilikebigbits.com/blog/2014/4/21/the-myth-of-ram-part-i)\n[The Myth of RAM - Part 2](http://www.ilikebigbits.com/blog/2014/4/28/the-myth-of-ram-part-ii)\n[The Myth of RAM - Part 3](http://www.ilikebigbits.com/blog/2014/4/29/the-myth-of-ram-part-iii)\n[The Myth of RAM - Part 4](http://www.ilikebigbits.com/blog/2015/2/9/the-myth-of-ram-part-iv)","slug":"Ever-have-one-of-those-days-where-your-L1-cache-collapses-into-a-black-hole","published":1,"updated":"2016-04-14T15:00:15.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtj0019y0kwxmgexti5","content":"<p>Interesting look at how to incorporate the cost of random access into complexity estimates.</p>\n<blockquote>\n<p>In short: if you try to squeeze too much L1 cache onto your CPU it will eventually collapse into a black hole, and that would make it awkward to get the results of the computation back to the user.</p>\n</blockquote>\n<p><a href=\"http://www.ilikebigbits.com/blog/2014/4/21/the-myth-of-ram-part-i\" target=\"_blank\" rel=\"external\">The Myth of RAM - Part 1</a><br><a href=\"http://www.ilikebigbits.com/blog/2014/4/28/the-myth-of-ram-part-ii\" target=\"_blank\" rel=\"external\">The Myth of RAM - Part 2</a><br><a href=\"http://www.ilikebigbits.com/blog/2014/4/29/the-myth-of-ram-part-iii\" target=\"_blank\" rel=\"external\">The Myth of RAM - Part 3</a><br><a href=\"http://www.ilikebigbits.com/blog/2015/2/9/the-myth-of-ram-part-iv\" target=\"_blank\" rel=\"external\">The Myth of RAM - Part 4</a></p>\n","excerpt":"","more":"<p>Interesting look at how to incorporate the cost of random access into complexity estimates.</p>\n<blockquote>\n<p>In short: if you try to squeeze too much L1 cache onto your CPU it will eventually collapse into a black hole, and that would make it awkward to get the results of the computation back to the user.</p>\n</blockquote>\n<p><a href=\"http://www.ilikebigbits.com/blog/2014/4/21/the-myth-of-ram-part-i\">The Myth of RAM - Part 1</a><br><a href=\"http://www.ilikebigbits.com/blog/2014/4/28/the-myth-of-ram-part-ii\">The Myth of RAM - Part 2</a><br><a href=\"http://www.ilikebigbits.com/blog/2014/4/29/the-myth-of-ram-part-iii\">The Myth of RAM - Part 3</a><br><a href=\"http://www.ilikebigbits.com/blog/2015/2/9/the-myth-of-ram-part-iv\">The Myth of RAM - Part 4</a></p>\n"},{"title":"Explained Visually","date":"2016-03-05T00:00:00.000Z","_content":"Explained Visually has some pretty amazing visual explanations of different ideas.  If a picture is worth a 1000 words what do SVG Animations go for?\n\n[Link](http://setosa.io/ev/)","source":"_posts/Explained-Visually.md","raw":"---\ntitle: Explained Visually\ndate: 2016-03-05 00:00:00\ntags:\n- Visual Learning\n---\nExplained Visually has some pretty amazing visual explanations of different ideas.  If a picture is worth a 1000 words what do SVG Animations go for?\n\n[Link](http://setosa.io/ev/)","slug":"Explained-Visually","published":1,"updated":"2016-04-14T15:00:07.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtk001by0kwyf1kkdt8","content":"<p>Explained Visually has some pretty amazing visual explanations of different ideas.  If a picture is worth a 1000 words what do SVG Animations go for?</p>\n<p><a href=\"http://setosa.io/ev/\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>Explained Visually has some pretty amazing visual explanations of different ideas.  If a picture is worth a 1000 words what do SVG Animations go for?</p>\n<p><a href=\"http://setosa.io/ev/\">Link</a></p>\n"},{"title":"Avoid disregarding data sheets","date":"2009-03-09T00:00:00.000Z","_content":"\nThere is a problem with high-efficiency LED drivers used for a lighting product.  One of the final steps in the build is to reduce the current to a set point, but this is causing the units to start strobing on/off.\n\nAfter testing the possible combinations of power supplies and product boards I was able to make the high-efficiency power supplies consistently to fail which pointed towards the power supply being the culprit.\n\nThe high-efficiency power supply stabilized when the current was raised above the desired set point of 1.08A to 1.29A.  After the fixture & electronics warmed up, it would start to strobe on/off again unless the current was again raised to 1.40A.  The power waveform on the oscilloscope showed the unit powering up, holding steady for a moment, dropping down and then powering back up again in a cyclic pattern.  The puzzling part was that performing the same test with a 48V standard efficiency version of the driver didn't cause strobing.\n\nIt turns out that that the design was under driving the supplies by providing only 36V when the data sheet required between 40V-50V.  This was tripping the short circuit protection on the driver causing the unit to reboot.\n\nWhile I suspect that component vendors add slack to their data sheet tolerances you are asking for trouble when you disregard them.","source":"_posts/Avoid-disregarding-datasheets.md","raw":"---\ntitle: Avoid disregarding data sheets\ndate: 2009-03-09 00:00:00\ntags:\n- Electronics\n---\n\nThere is a problem with high-efficiency LED drivers used for a lighting product.  One of the final steps in the build is to reduce the current to a set point, but this is causing the units to start strobing on/off.\n\nAfter testing the possible combinations of power supplies and product boards I was able to make the high-efficiency power supplies consistently to fail which pointed towards the power supply being the culprit.\n\nThe high-efficiency power supply stabilized when the current was raised above the desired set point of 1.08A to 1.29A.  After the fixture & electronics warmed up, it would start to strobe on/off again unless the current was again raised to 1.40A.  The power waveform on the oscilloscope showed the unit powering up, holding steady for a moment, dropping down and then powering back up again in a cyclic pattern.  The puzzling part was that performing the same test with a 48V standard efficiency version of the driver didn't cause strobing.\n\nIt turns out that that the design was under driving the supplies by providing only 36V when the data sheet required between 40V-50V.  This was tripping the short circuit protection on the driver causing the unit to reboot.\n\nWhile I suspect that component vendors add slack to their data sheet tolerances you are asking for trouble when you disregard them.","slug":"Avoid-disregarding-datasheets","published":1,"updated":"2016-04-14T14:54:52.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtm001ey0kwpqel3wz4","content":"<p>There is a problem with high-efficiency LED drivers used for a lighting product.  One of the final steps in the build is to reduce the current to a set point, but this is causing the units to start strobing on/off.</p>\n<p>After testing the possible combinations of power supplies and product boards I was able to make the high-efficiency power supplies consistently to fail which pointed towards the power supply being the culprit.</p>\n<p>The high-efficiency power supply stabilized when the current was raised above the desired set point of 1.08A to 1.29A.  After the fixture &amp; electronics warmed up, it would start to strobe on/off again unless the current was again raised to 1.40A.  The power waveform on the oscilloscope showed the unit powering up, holding steady for a moment, dropping down and then powering back up again in a cyclic pattern.  The puzzling part was that performing the same test with a 48V standard efficiency version of the driver didn’t cause strobing.</p>\n<p>It turns out that that the design was under driving the supplies by providing only 36V when the data sheet required between 40V-50V.  This was tripping the short circuit protection on the driver causing the unit to reboot.</p>\n<p>While I suspect that component vendors add slack to their data sheet tolerances you are asking for trouble when you disregard them.</p>\n","excerpt":"","more":"<p>There is a problem with high-efficiency LED drivers used for a lighting product.  One of the final steps in the build is to reduce the current to a set point, but this is causing the units to start strobing on/off.</p>\n<p>After testing the possible combinations of power supplies and product boards I was able to make the high-efficiency power supplies consistently to fail which pointed towards the power supply being the culprit.</p>\n<p>The high-efficiency power supply stabilized when the current was raised above the desired set point of 1.08A to 1.29A.  After the fixture &amp; electronics warmed up, it would start to strobe on/off again unless the current was again raised to 1.40A.  The power waveform on the oscilloscope showed the unit powering up, holding steady for a moment, dropping down and then powering back up again in a cyclic pattern.  The puzzling part was that performing the same test with a 48V standard efficiency version of the driver didn’t cause strobing.</p>\n<p>It turns out that that the design was under driving the supplies by providing only 36V when the data sheet required between 40V-50V.  This was tripping the short circuit protection on the driver causing the unit to reboot.</p>\n<p>While I suspect that component vendors add slack to their data sheet tolerances you are asking for trouble when you disregard them.</p>\n"},{"title":"Engie Award 2015","date":"2016-01-22T15:17:49.000Z","_content":"I won a thing :-)\n\n![](/images/Engie-award-2015.jpg)","source":"_posts/Engie-Award-2015.md","raw":"---\ntitle: Engie Award 2015\ndate: 2016-01-22 15:17:49\ntags:\n- Random\n---\nI won a thing :-)\n\n![](/images/Engie-award-2015.jpg)","slug":"Engie-Award-2015","published":1,"updated":"2016-04-14T15:00:21.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjto001gy0kwc8a01uzr","content":"<p>I won a thing :-)</p>\n<p><img src=\"/images/Engie-award-2015.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>I won a thing :-)</p>\n<p><img src=\"/images/Engie-award-2015.jpg\" alt=\"\"></p>\n"},{"title":"Exploding Software-Engineering Myths","date":"2015-02-18T18:31:15.000Z","_content":"An overview of different empirical studies on software development methodologies.\n\n> ongoing research in his quest to validate conventional software-engineering wisdom.\n\n[Link](http://research.microsoft.com/apps/mobile/news.aspx?post=/en-us/news/features/nagappan-100609.aspx)","source":"_posts/Exploding-Software-Engineering-Myths.md","raw":"---\ntitle: Exploding Software-Engineering Myths\ndate: 2015-02-18 18:31:15\ntags:\n- Empirical Studies\n- Software Development Practices\n---\nAn overview of different empirical studies on software development methodologies.\n\n> ongoing research in his quest to validate conventional software-engineering wisdom.\n\n[Link](http://research.microsoft.com/apps/mobile/news.aspx?post=/en-us/news/features/nagappan-100609.aspx)","slug":"Exploding-Software-Engineering-Myths","published":1,"updated":"2016-04-14T15:00:04.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtq001jy0kwq8jslc9j","content":"<p>An overview of different empirical studies on software development methodologies.</p>\n<blockquote>\n<p>ongoing research in his quest to validate conventional software-engineering wisdom.</p>\n</blockquote>\n<p><a href=\"http://research.microsoft.com/apps/mobile/news.aspx?post=/en-us/news/features/nagappan-100609.aspx\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>An overview of different empirical studies on software development methodologies.</p>\n<blockquote>\n<p>ongoing research in his quest to validate conventional software-engineering wisdom.</p>\n</blockquote>\n<p><a href=\"http://research.microsoft.com/apps/mobile/news.aspx?post=/en-us/news/features/nagappan-100609.aspx\">Link</a></p>\n"},{"title":"Exploring Classifying Listings Using A Naive Bayes Classifier","date":"2016-05-06T00:00:00.000Z","_content":"I built a Naive Bayes classifier listings as being either for a camera or an accessory.  To generate the training set, I'm using a heuristic classifier I developed earlier and then going through the results manually.\n\nSteps to run:\n1) Create a preliminary training set using a heuristic based classifier.  Only a randomly selected subset of the listings should be used to build the training set. As there are far more camera listings than accessory listings, it's important to reflect that ratio in the training set.\n2) Manually go through the training data to remove any entries.  Try to remove incorrect classifications in pairs to keep the ratio of camera listings to accessory listings the same.\n3) Run the Bayes classifier using the training set you created.  To not be considered a camera a listing must contain more than 2 \"accessory\" words and more than 90% of the words need to be \"camera\" words.\n\n*The +/- signs prepended to each term show how they contributed to a listing being classified as a camera*\n\n**Positives:**\n\n| Listing | Classification |\n| - | - |\n| +fujifilm +finepix +z70 +12 +mp +digital +camera +with +5x +optical +zoom +and +2 +7 +inch +lcd +bronze [Camera] | Camera |\n| +pentax +k +x +12 +4 +mp +digital +slr +with +2 +7 +inch +lcd +and +18 +55mm +f +3 +5 +5 +6 +al +and +50 +200mm +f +4 +5 +6 +ed +lenses +black | Camera |\n| +vivitar -vivicam vx029bl +10 +1mp +digital +camera +blue | Camera |\n| +sony dsct2b +digital +camera +black +8 +1mp +3x +optical +zoom +2 +7 +lcd +4gb internal +memory | Camera |\n| +agfaphoto +precisa 107 +digitalkamera +12 +megapixel +5 +fach +opt +zoom +6 +8 +cm +2 +7 +zoll +display +bildstabilisiert +schwarz | Camera |\n|  lenco +dc 511 +digitalkamera +12 +megapixel +8 +fach +digital +zoom +6 +cm +2 +4 +zoll +tft +lcd +orange | Camera |\n\n**Negatives:**\n\n| Listing | Classification |\n| - | - |\n| -duragadget premium wrist +camera +carrying -strap +with +2 +year +warranty -for +panasonic +lumix -fh27 -fh25 -fp5 -fp7 -fh5 -fh2 -s3 +s1 | Accessory |\n| cushioned neo absorption +camera -strap -for +nikon +canon +pentax +panasonic +olympus +fujifilm +kodak +sony +and +more +digital +slr -cameras +card +reader +included | Accessory |\n| -sigmatek -ds 740 +7 +digital +photo -frame +black -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers | Accessory |\n| biostek -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers +cleaning -applicator -for +digital +photo -frames | Accessory |\n| -fototasche -kameratasche -typ hardbox hellblau -set +mit +4 +gb +sd -karte -für +samsung st60 es55 es60 +es65 es70  | Accessory |\n\n**False positives:**\n\n| Listing | Classification |\n| - | - |\n| kingston kingston valueram 512 mo ddr sdram pc3200 cas3 wet wipe dispenser +100 wipes dust removal spray +250 ml foam -cleaner -for screens +and keyboards +150 ml | Camera |\n| -duragadget +deluxe +mini flat folding +camera +camcorder +tripod stand -for +canon +ixus 1000hs +ixus 300hs +ixus +210 +ixus 200is +ixus 130 +ixus 120is | Camera |\n\n[Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/NaiveBayesCameraListingClassifier.cs)","source":"_posts/Exploring-Classifying-Listings-Using-A-Naive-Bayes-Classifier.md","raw":"---\ntitle: Exploring Classifying Listings Using A Naive Bayes Classifier\ndate: 2016-05-06 00:00:00\ntags:\n- Exploring\n- Machine Learning\n---\nI built a Naive Bayes classifier listings as being either for a camera or an accessory.  To generate the training set, I'm using a heuristic classifier I developed earlier and then going through the results manually.\n\nSteps to run:\n1) Create a preliminary training set using a heuristic based classifier.  Only a randomly selected subset of the listings should be used to build the training set. As there are far more camera listings than accessory listings, it's important to reflect that ratio in the training set.\n2) Manually go through the training data to remove any entries.  Try to remove incorrect classifications in pairs to keep the ratio of camera listings to accessory listings the same.\n3) Run the Bayes classifier using the training set you created.  To not be considered a camera a listing must contain more than 2 \"accessory\" words and more than 90% of the words need to be \"camera\" words.\n\n*The +/- signs prepended to each term show how they contributed to a listing being classified as a camera*\n\n**Positives:**\n\n| Listing | Classification |\n| - | - |\n| +fujifilm +finepix +z70 +12 +mp +digital +camera +with +5x +optical +zoom +and +2 +7 +inch +lcd +bronze [Camera] | Camera |\n| +pentax +k +x +12 +4 +mp +digital +slr +with +2 +7 +inch +lcd +and +18 +55mm +f +3 +5 +5 +6 +al +and +50 +200mm +f +4 +5 +6 +ed +lenses +black | Camera |\n| +vivitar -vivicam vx029bl +10 +1mp +digital +camera +blue | Camera |\n| +sony dsct2b +digital +camera +black +8 +1mp +3x +optical +zoom +2 +7 +lcd +4gb internal +memory | Camera |\n| +agfaphoto +precisa 107 +digitalkamera +12 +megapixel +5 +fach +opt +zoom +6 +8 +cm +2 +7 +zoll +display +bildstabilisiert +schwarz | Camera |\n|  lenco +dc 511 +digitalkamera +12 +megapixel +8 +fach +digital +zoom +6 +cm +2 +4 +zoll +tft +lcd +orange | Camera |\n\n**Negatives:**\n\n| Listing | Classification |\n| - | - |\n| -duragadget premium wrist +camera +carrying -strap +with +2 +year +warranty -for +panasonic +lumix -fh27 -fh25 -fp5 -fp7 -fh5 -fh2 -s3 +s1 | Accessory |\n| cushioned neo absorption +camera -strap -for +nikon +canon +pentax +panasonic +olympus +fujifilm +kodak +sony +and +more +digital +slr -cameras +card +reader +included | Accessory |\n| -sigmatek -ds 740 +7 +digital +photo -frame +black -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers | Accessory |\n| biostek -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers +cleaning -applicator -for +digital +photo -frames | Accessory |\n| -fototasche -kameratasche -typ hardbox hellblau -set +mit +4 +gb +sd -karte -für +samsung st60 es55 es60 +es65 es70  | Accessory |\n\n**False positives:**\n\n| Listing | Classification |\n| - | - |\n| kingston kingston valueram 512 mo ddr sdram pc3200 cas3 wet wipe dispenser +100 wipes dust removal spray +250 ml foam -cleaner -for screens +and keyboards +150 ml | Camera |\n| -duragadget +deluxe +mini flat folding +camera +camcorder +tripod stand -for +canon +ixus 1000hs +ixus 300hs +ixus +210 +ixus 200is +ixus 130 +ixus 120is | Camera |\n\n[Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/NaiveBayesCameraListingClassifier.cs)","slug":"Exploring-Classifying-Listings-Using-A-Naive-Bayes-Classifier","published":1,"updated":"2016-05-06T21:00:45.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjts001ly0kw7f3jqn2a","content":"<p>I built a Naive Bayes classifier listings as being either for a camera or an accessory.  To generate the training set, I’m using a heuristic classifier I developed earlier and then going through the results manually.</p>\n<p>Steps to run:<br>1) Create a preliminary training set using a heuristic based classifier.  Only a randomly selected subset of the listings should be used to build the training set. As there are far more camera listings than accessory listings, it’s important to reflect that ratio in the training set.<br>2) Manually go through the training data to remove any entries.  Try to remove incorrect classifications in pairs to keep the ratio of camera listings to accessory listings the same.<br>3) Run the Bayes classifier using the training set you created.  To not be considered a camera a listing must contain more than 2 “accessory” words and more than 90% of the words need to be “camera” words.</p>\n<p><em>The +/- signs prepended to each term show how they contributed to a listing being classified as a camera</em></p>\n<p><strong>Positives:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Listing</th>\n<th>Classification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+fujifilm +finepix +z70 +12 +mp +digital +camera +with +5x +optical +zoom +and +2 +7 +inch +lcd +bronze [Camera]</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+pentax +k +x +12 +4 +mp +digital +slr +with +2 +7 +inch +lcd +and +18 +55mm +f +3 +5 +5 +6 +al +and +50 +200mm +f +4 +5 +6 +ed +lenses +black</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+vivitar -vivicam vx029bl +10 +1mp +digital +camera +blue</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+sony dsct2b +digital +camera +black +8 +1mp +3x +optical +zoom +2 +7 +lcd +4gb internal +memory</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+agfaphoto +precisa 107 +digitalkamera +12 +megapixel +5 +fach +opt +zoom +6 +8 +cm +2 +7 +zoll +display +bildstabilisiert +schwarz</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>lenco +dc 511 +digitalkamera +12 +megapixel +8 +fach +digital +zoom +6 +cm +2 +4 +zoll +tft +lcd +orange</td>\n<td>Camera</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Negatives:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Listing</th>\n<th>Classification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-duragadget premium wrist +camera +carrying -strap +with +2 +year +warranty -for +panasonic +lumix -fh27 -fh25 -fp5 -fp7 -fh5 -fh2 -s3 +s1</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>cushioned neo absorption +camera -strap -for +nikon +canon +pentax +panasonic +olympus +fujifilm +kodak +sony +and +more +digital +slr -cameras +card +reader +included</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>-sigmatek -ds 740 +7 +digital +photo -frame +black -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>biostek -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers +cleaning -applicator -for +digital +photo -frames</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>-fototasche -kameratasche -typ hardbox hellblau -set +mit +4 +gb +sd -karte -für +samsung st60 es55 es60 +es65 es70</td>\n<td>Accessory</td>\n</tr>\n</tbody>\n</table>\n<p><strong>False positives:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Listing</th>\n<th>Classification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>kingston kingston valueram 512 mo ddr sdram pc3200 cas3 wet wipe dispenser +100 wipes dust removal spray +250 ml foam -cleaner -for screens +and keyboards +150 ml</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>-duragadget +deluxe +mini flat folding +camera +camcorder +tripod stand -for +canon +ixus 1000hs +ixus 300hs +ixus +210 +ixus 200is +ixus 130 +ixus 120is</td>\n<td>Camera</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/NaiveBayesCameraListingClassifier.cs\" target=\"_blank\" rel=\"external\">Source Code</a></p>\n","excerpt":"","more":"<p>I built a Naive Bayes classifier listings as being either for a camera or an accessory.  To generate the training set, I’m using a heuristic classifier I developed earlier and then going through the results manually.</p>\n<p>Steps to run:<br>1) Create a preliminary training set using a heuristic based classifier.  Only a randomly selected subset of the listings should be used to build the training set. As there are far more camera listings than accessory listings, it’s important to reflect that ratio in the training set.<br>2) Manually go through the training data to remove any entries.  Try to remove incorrect classifications in pairs to keep the ratio of camera listings to accessory listings the same.<br>3) Run the Bayes classifier using the training set you created.  To not be considered a camera a listing must contain more than 2 “accessory” words and more than 90% of the words need to be “camera” words.</p>\n<p><em>The +/- signs prepended to each term show how they contributed to a listing being classified as a camera</em></p>\n<p><strong>Positives:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Listing</th>\n<th>Classification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+fujifilm +finepix +z70 +12 +mp +digital +camera +with +5x +optical +zoom +and +2 +7 +inch +lcd +bronze [Camera]</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+pentax +k +x +12 +4 +mp +digital +slr +with +2 +7 +inch +lcd +and +18 +55mm +f +3 +5 +5 +6 +al +and +50 +200mm +f +4 +5 +6 +ed +lenses +black</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+vivitar -vivicam vx029bl +10 +1mp +digital +camera +blue</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+sony dsct2b +digital +camera +black +8 +1mp +3x +optical +zoom +2 +7 +lcd +4gb internal +memory</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>+agfaphoto +precisa 107 +digitalkamera +12 +megapixel +5 +fach +opt +zoom +6 +8 +cm +2 +7 +zoll +display +bildstabilisiert +schwarz</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>lenco +dc 511 +digitalkamera +12 +megapixel +8 +fach +digital +zoom +6 +cm +2 +4 +zoll +tft +lcd +orange</td>\n<td>Camera</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Negatives:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Listing</th>\n<th>Classification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-duragadget premium wrist +camera +carrying -strap +with +2 +year +warranty -for +panasonic +lumix -fh27 -fh25 -fp5 -fp7 -fh5 -fh2 -s3 +s1</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>cushioned neo absorption +camera -strap -for +nikon +canon +pentax +panasonic +olympus +fujifilm +kodak +sony +and +more +digital +slr -cameras +card +reader +included</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>-sigmatek -ds 740 +7 +digital +photo -frame +black -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>biostek -ds -240 +2 +4 +mini +digital +photo -frame +2 -covers +cleaning -applicator -for +digital +photo -frames</td>\n<td>Accessory</td>\n</tr>\n<tr>\n<td>-fototasche -kameratasche -typ hardbox hellblau -set +mit +4 +gb +sd -karte -für +samsung st60 es55 es60 +es65 es70</td>\n<td>Accessory</td>\n</tr>\n</tbody>\n</table>\n<p><strong>False positives:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Listing</th>\n<th>Classification</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>kingston kingston valueram 512 mo ddr sdram pc3200 cas3 wet wipe dispenser +100 wipes dust removal spray +250 ml foam -cleaner -for screens +and keyboards +150 ml</td>\n<td>Camera</td>\n</tr>\n<tr>\n<td>-duragadget +deluxe +mini flat folding +camera +camcorder +tripod stand -for +canon +ixus 1000hs +ixus 300hs +ixus +210 +ixus 200is +ixus 130 +ixus 120is</td>\n<td>Camera</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/NaiveBayesCameraListingClassifier.cs\">Source Code</a></p>\n"},{"title":"Exploring Augmented Interval Trees","date":"2016-02-29T00:00:00.000Z","_content":"Interval trees store a set of intervals and can be used to find all intervals that overlap with the query interval.  In the augmented variant, each node maintains the maximum end value of the node and all of its children.  We can use this extra information during searches to rule out subtrees that cannot possibly contain the query interval.\n\n[The Code](https://github.com/DForshner/CSharpExperiments/blob/master/AugmentedIntervalTree.cs)","source":"_posts/Exploring-Augmented-Interval-Trees.md","raw":"---\ntitle: Exploring Augmented Interval Trees\ndate: 2016-02-29 00:00:00\ntags:\n- Exploring\n- Data Structures\n---\nInterval trees store a set of intervals and can be used to find all intervals that overlap with the query interval.  In the augmented variant, each node maintains the maximum end value of the node and all of its children.  We can use this extra information during searches to rule out subtrees that cannot possibly contain the query interval.\n\n[The Code](https://github.com/DForshner/CSharpExperiments/blob/master/AugmentedIntervalTree.cs)","slug":"Exploring-Augmented-Interval-Trees","published":1,"updated":"2016-04-14T15:00:00.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtv001oy0kwfmtt3gz5","content":"<p>Interval trees store a set of intervals and can be used to find all intervals that overlap with the query interval.  In the augmented variant, each node maintains the maximum end value of the node and all of its children.  We can use this extra information during searches to rule out subtrees that cannot possibly contain the query interval.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/AugmentedIntervalTree.cs\" target=\"_blank\" rel=\"external\">The Code</a></p>\n","excerpt":"","more":"<p>Interval trees store a set of intervals and can be used to find all intervals that overlap with the query interval.  In the augmented variant, each node maintains the maximum end value of the node and all of its children.  We can use this extra information during searches to rule out subtrees that cannot possibly contain the query interval.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/AugmentedIntervalTree.cs\">The Code</a></p>\n"},{"title":"Exploring Finding Entity Aliases Using N-Gram Similarity","date":"2016-05-01T00:00:00.000Z","_content":"This is my second attempt at generating entity aliases from a set of product listings.  In my [first attempt](/2016/04/11/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity/) I tried to use MinHash to group similar product listings, but it didn't work out.  This time, I'm going to be joining on n-grams of the manufacturer name and model number and then scoring the joins by the inverse term probability of the model n-grams.\n\nI'm planning to use this in a pre-processing stage so that when I block by canonical manufacturer names I can include listings that have different variations of the canonical name.\n\nFor each listing, I'm attempting to find a *similar* canonical product record.  The criteria I'm using for something being similar are:\n1. Similar manufacture using character n-gram similarity\n2. Similar model using shingles made from model parts\n\nIf I find enough instances where a listing is similar to a canonical product, I'll consider the listing's manufacturer name to be an alias for the canonical product's manufacturer name.\n\nHere are some aliases I was able to find:\n\n| Canonical | Alias |\n| - | - |\n| fujifilm | fuji |\n| kodak | eastman kodak company |\n| canon | canon canada |\n| fujifilm | fujifilm electronic imaging europe gmbh firstorder |\n| panasonic | panasonic deutschland gmbh |\n| sony | sony uk consumer electronics instock account |\n| fujifilm| fuji photo film europe gmbh |\n| fujifilm | fujifilm imaging systems |\n| kodak | kodak stock account |\n| fujifilm | fujifilm canada |\n| canon | canon uk ltd |\n| olympus | olympus canada |\n\nMy main goal was to relate listings with a manufacturer of **fuji** to **fujifilm** so it looks like this is going to work.  I had to change the scoring method to use the inverse term probably because some of the model names have common numbers or words *(ex: \"zoom\")* which caused lots of false positives.\n\n[Messy Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/AliasGenerationBySimilarManufacturerAndModel.cs)","source":"_posts/Exploring-Finding-Entity-Aliases-Using-N-Gram-Similarity.md","raw":"---\ntitle: Exploring Finding Entity Aliases Using N-Gram Similarity\ndate: 2016-05-01 00:00:00\ntags:\n- Exploring\n- Natural Language Processing\n---\nThis is my second attempt at generating entity aliases from a set of product listings.  In my [first attempt](/2016/04/11/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity/) I tried to use MinHash to group similar product listings, but it didn't work out.  This time, I'm going to be joining on n-grams of the manufacturer name and model number and then scoring the joins by the inverse term probability of the model n-grams.\n\nI'm planning to use this in a pre-processing stage so that when I block by canonical manufacturer names I can include listings that have different variations of the canonical name.\n\nFor each listing, I'm attempting to find a *similar* canonical product record.  The criteria I'm using for something being similar are:\n1. Similar manufacture using character n-gram similarity\n2. Similar model using shingles made from model parts\n\nIf I find enough instances where a listing is similar to a canonical product, I'll consider the listing's manufacturer name to be an alias for the canonical product's manufacturer name.\n\nHere are some aliases I was able to find:\n\n| Canonical | Alias |\n| - | - |\n| fujifilm | fuji |\n| kodak | eastman kodak company |\n| canon | canon canada |\n| fujifilm | fujifilm electronic imaging europe gmbh firstorder |\n| panasonic | panasonic deutschland gmbh |\n| sony | sony uk consumer electronics instock account |\n| fujifilm| fuji photo film europe gmbh |\n| fujifilm | fujifilm imaging systems |\n| kodak | kodak stock account |\n| fujifilm | fujifilm canada |\n| canon | canon uk ltd |\n| olympus | olympus canada |\n\nMy main goal was to relate listings with a manufacturer of **fuji** to **fujifilm** so it looks like this is going to work.  I had to change the scoring method to use the inverse term probably because some of the model names have common numbers or words *(ex: \"zoom\")* which caused lots of false positives.\n\n[Messy Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/AliasGenerationBySimilarManufacturerAndModel.cs)","slug":"Exploring-Finding-Entity-Aliases-Using-N-Gram-Similarity","published":1,"updated":"2016-05-03T15:31:35.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtx001qy0kwj7fp7oo2","content":"<p>This is my second attempt at generating entity aliases from a set of product listings.  In my <a href=\"/2016/04/11/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity/\">first attempt</a> I tried to use MinHash to group similar product listings, but it didn’t work out.  This time, I’m going to be joining on n-grams of the manufacturer name and model number and then scoring the joins by the inverse term probability of the model n-grams.</p>\n<p>I’m planning to use this in a pre-processing stage so that when I block by canonical manufacturer names I can include listings that have different variations of the canonical name.</p>\n<p>For each listing, I’m attempting to find a <em>similar</em> canonical product record.  The criteria I’m using for something being similar are:</p>\n<ol>\n<li>Similar manufacture using character n-gram similarity</li>\n<li>Similar model using shingles made from model parts</li>\n</ol>\n<p>If I find enough instances where a listing is similar to a canonical product, I’ll consider the listing’s manufacturer name to be an alias for the canonical product’s manufacturer name.</p>\n<p>Here are some aliases I was able to find:</p>\n<table>\n<thead>\n<tr>\n<th>Canonical</th>\n<th>Alias</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fujifilm</td>\n<td>fuji</td>\n</tr>\n<tr>\n<td>kodak</td>\n<td>eastman kodak company</td>\n</tr>\n<tr>\n<td>canon</td>\n<td>canon canada</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fujifilm electronic imaging europe gmbh firstorder</td>\n</tr>\n<tr>\n<td>panasonic</td>\n<td>panasonic deutschland gmbh</td>\n</tr>\n<tr>\n<td>sony</td>\n<td>sony uk consumer electronics instock account</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fuji photo film europe gmbh</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fujifilm imaging systems</td>\n</tr>\n<tr>\n<td>kodak</td>\n<td>kodak stock account</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fujifilm canada</td>\n</tr>\n<tr>\n<td>canon</td>\n<td>canon uk ltd</td>\n</tr>\n<tr>\n<td>olympus</td>\n<td>olympus canada</td>\n</tr>\n</tbody>\n</table>\n<p>My main goal was to relate listings with a manufacturer of <strong>fuji</strong> to <strong>fujifilm</strong> so it looks like this is going to work.  I had to change the scoring method to use the inverse term probably because some of the model names have common numbers or words <em>(ex: “zoom”)</em> which caused lots of false positives.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/AliasGenerationBySimilarManufacturerAndModel.cs\" target=\"_blank\" rel=\"external\">Messy Source Code</a></p>\n","excerpt":"","more":"<p>This is my second attempt at generating entity aliases from a set of product listings.  In my <a href=\"/2016/04/11/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity/\">first attempt</a> I tried to use MinHash to group similar product listings, but it didn’t work out.  This time, I’m going to be joining on n-grams of the manufacturer name and model number and then scoring the joins by the inverse term probability of the model n-grams.</p>\n<p>I’m planning to use this in a pre-processing stage so that when I block by canonical manufacturer names I can include listings that have different variations of the canonical name.</p>\n<p>For each listing, I’m attempting to find a <em>similar</em> canonical product record.  The criteria I’m using for something being similar are:</p>\n<ol>\n<li>Similar manufacture using character n-gram similarity</li>\n<li>Similar model using shingles made from model parts</li>\n</ol>\n<p>If I find enough instances where a listing is similar to a canonical product, I’ll consider the listing’s manufacturer name to be an alias for the canonical product’s manufacturer name.</p>\n<p>Here are some aliases I was able to find:</p>\n<table>\n<thead>\n<tr>\n<th>Canonical</th>\n<th>Alias</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fujifilm</td>\n<td>fuji</td>\n</tr>\n<tr>\n<td>kodak</td>\n<td>eastman kodak company</td>\n</tr>\n<tr>\n<td>canon</td>\n<td>canon canada</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fujifilm electronic imaging europe gmbh firstorder</td>\n</tr>\n<tr>\n<td>panasonic</td>\n<td>panasonic deutschland gmbh</td>\n</tr>\n<tr>\n<td>sony</td>\n<td>sony uk consumer electronics instock account</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fuji photo film europe gmbh</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fujifilm imaging systems</td>\n</tr>\n<tr>\n<td>kodak</td>\n<td>kodak stock account</td>\n</tr>\n<tr>\n<td>fujifilm</td>\n<td>fujifilm canada</td>\n</tr>\n<tr>\n<td>canon</td>\n<td>canon uk ltd</td>\n</tr>\n<tr>\n<td>olympus</td>\n<td>olympus canada</td>\n</tr>\n</tbody>\n</table>\n<p>My main goal was to relate listings with a manufacturer of <strong>fuji</strong> to <strong>fujifilm</strong> so it looks like this is going to work.  I had to change the scoring method to use the inverse term probably because some of the model names have common numbers or words <em>(ex: “zoom”)</em> which caused lots of false positives.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/AliasGenerationBySimilarManufacturerAndModel.cs\">Messy Source Code</a></p>\n"},{"title":"Exploring Data Orientated Game Engines","date":"2015-07-01T00:00:00.000Z","_content":"I made a little proof of concept demo comparing an object orientated to a data orientated entity component system for fun.\n\nI poked around with a C++ port of [Artimis](http://piemaster.net/2011/07/entity-component-artemis/) (a data-oriented game engine) for [PostApocalypticFarming](https://github.com/DForshner/PostApocalypticFarming) but that never to the point of doing anything interesting.\n\n[The Code](https://github.com/DForshner/CSharpExperiments/blob/master/EntityComponentSystemObjectOrientatedVsDataOrientated.cs)","source":"_posts/Exploring-Data-Orientated-Game-Engines.md","raw":"---\ntitle: Exploring Data Orientated Game Engines\ndate: 2015-07-01 00:00:00\ntags:\n- Exploring\n- Data Orientated Design\n- Game Engines\n---\nI made a little proof of concept demo comparing an object orientated to a data orientated entity component system for fun.\n\nI poked around with a C++ port of [Artimis](http://piemaster.net/2011/07/entity-component-artemis/) (a data-oriented game engine) for [PostApocalypticFarming](https://github.com/DForshner/PostApocalypticFarming) but that never to the point of doing anything interesting.\n\n[The Code](https://github.com/DForshner/CSharpExperiments/blob/master/EntityComponentSystemObjectOrientatedVsDataOrientated.cs)","slug":"Exploring-Data-Orientated-Game-Engines","published":1,"updated":"2016-04-14T14:59:32.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjty001sy0kwqdlyvtx0","content":"<p>I made a little proof of concept demo comparing an object orientated to a data orientated entity component system for fun.</p>\n<p>I poked around with a C++ port of <a href=\"http://piemaster.net/2011/07/entity-component-artemis/\" target=\"_blank\" rel=\"external\">Artimis</a> (a data-oriented game engine) for <a href=\"https://github.com/DForshner/PostApocalypticFarming\" target=\"_blank\" rel=\"external\">PostApocalypticFarming</a> but that never to the point of doing anything interesting.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/EntityComponentSystemObjectOrientatedVsDataOrientated.cs\" target=\"_blank\" rel=\"external\">The Code</a></p>\n","excerpt":"","more":"<p>I made a little proof of concept demo comparing an object orientated to a data orientated entity component system for fun.</p>\n<p>I poked around with a C++ port of <a href=\"http://piemaster.net/2011/07/entity-component-artemis/\">Artimis</a> (a data-oriented game engine) for <a href=\"https://github.com/DForshner/PostApocalypticFarming\">PostApocalypticFarming</a> but that never to the point of doing anything interesting.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/EntityComponentSystemObjectOrientatedVsDataOrientated.cs\">The Code</a></p>\n"},{"title":"Exploring Min Heap Priority Queue","date":"2015-03-15T00:00:00.000Z","_content":"A heap-based implementation of a min priority queue.  I'm not sure why C# doesn't have priority queues as part of the language.\n\n[The Code](https://github.com/DForshner/CSharpExperiments/blob/master/MinHeapPriorityQueue.cs)","source":"_posts/Exploring-Min-Heap-Priority-Queue.md","raw":"---\ntitle: Exploring Min Heap Priority Queue\ndate: 2015-03-15 00:00:00\ntags:\n- Exploring\n- Data Structures\n---\nA heap-based implementation of a min priority queue.  I'm not sure why C# doesn't have priority queues as part of the language.\n\n[The Code](https://github.com/DForshner/CSharpExperiments/blob/master/MinHeapPriorityQueue.cs)","slug":"Exploring-Min-Heap-Priority-Queue","published":1,"updated":"2016-04-14T14:59:07.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjtz001uy0kwk7hdr7om","content":"<p>A heap-based implementation of a min priority queue.  I’m not sure why C# doesn’t have priority queues as part of the language.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/MinHeapPriorityQueue.cs\" target=\"_blank\" rel=\"external\">The Code</a></p>\n","excerpt":"","more":"<p>A heap-based implementation of a min priority queue.  I’m not sure why C# doesn’t have priority queues as part of the language.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/MinHeapPriorityQueue.cs\">The Code</a></p>\n"},{"title":"Exploring Shannon's Prediction And Entropy Of Printed English Paper","date":"2016-03-29T00:00:00.000Z","_content":"Tried and mostly failing to replicate the results from [Shannon's paper](http://languagelog.ldc.upenn.edu/myl/Shannon1950.pdf) using War and Peace as a stand in for \"The English Language\".\n\nI say mostly because I'm pretty sure I am measuring the entropy measurements for different length n-grams in the English language but it turns out I'm calculating isolated symbols entropy while Shannon is calculating conditional n-gram entropy.\n[Helpful SO answer](https://stackoverflow.com/questions/9604460/how-to-find-out-the-entropy-of-the-english-language)\n\nI did get interesting results for the top 10 unigrams and bigrams:\n\n{% googlecharts PieChart 500 %}\n  Top 10 Unigrams\n  {\"legend\": \"none\", \"pieSliceText\": \"label\", \"slices\": { \"0\": { \"color\": \"gray\" } } }\n  'Unigram', 'Probability'\n  'other', 0.24359794\n  '\" \"', 0.1826038\n  'e', 0.1017603\n  't', 0.07308632\n  'a', 0.06643674\n  'o', 0.06226344\n  'n', 0.05945337\n  'i', 0.05626013\n  'h', 0.05403983\n  's', 0.05258396\n  'r', 0.04791417\n{% endgooglecharts %}\n\n{% googlecharts PieChart 500 %}\n  Top 10 Bigrams\n  {\"legend\": { \"position\": \"left\" }, \"pieSliceText\": \"label\", \"slices\": { \"0\": { \"color\": \"gray\" }, \"1\": { \"offset\": 0.2 } } }\n  'Bigram', 'Probability'\n  'other', 0.80588987\n  '\"e \"', 0.03586495\n  '\" t\"', 0.02825758\n  '\"d \"', 0.02448941\n  '\"he\"', 0.02429185\n  '\"th\"', 0.02381377\n  '\" a\"', 0.02245183\n  '\"s \"', 0.02028996\n  '\"t \"', 0.01880665\n  '\" h\"', 0.01607567\n  '\"in\"', 0.01563341\n{% endgooglecharts %}\n\n[Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/ShannonPredictionAndEntropyOfPrintedEnglish.cs)","source":"_posts/Exploring-Shannon-s-Prediction-And-Entropy-Of-Written-English.md","raw":"---\ntitle: Exploring Shannon's Prediction And Entropy Of Printed English Paper\ndate: 2016-03-29 00:00:00\ntags:\n- Natural Language Processing\n- Exploring\n---\nTried and mostly failing to replicate the results from [Shannon's paper](http://languagelog.ldc.upenn.edu/myl/Shannon1950.pdf) using War and Peace as a stand in for \"The English Language\".\n\nI say mostly because I'm pretty sure I am measuring the entropy measurements for different length n-grams in the English language but it turns out I'm calculating isolated symbols entropy while Shannon is calculating conditional n-gram entropy.\n[Helpful SO answer](https://stackoverflow.com/questions/9604460/how-to-find-out-the-entropy-of-the-english-language)\n\nI did get interesting results for the top 10 unigrams and bigrams:\n\n{% googlecharts PieChart 500 %}\n  Top 10 Unigrams\n  {\"legend\": \"none\", \"pieSliceText\": \"label\", \"slices\": { \"0\": { \"color\": \"gray\" } } }\n  'Unigram', 'Probability'\n  'other', 0.24359794\n  '\" \"', 0.1826038\n  'e', 0.1017603\n  't', 0.07308632\n  'a', 0.06643674\n  'o', 0.06226344\n  'n', 0.05945337\n  'i', 0.05626013\n  'h', 0.05403983\n  's', 0.05258396\n  'r', 0.04791417\n{% endgooglecharts %}\n\n{% googlecharts PieChart 500 %}\n  Top 10 Bigrams\n  {\"legend\": { \"position\": \"left\" }, \"pieSliceText\": \"label\", \"slices\": { \"0\": { \"color\": \"gray\" }, \"1\": { \"offset\": 0.2 } } }\n  'Bigram', 'Probability'\n  'other', 0.80588987\n  '\"e \"', 0.03586495\n  '\" t\"', 0.02825758\n  '\"d \"', 0.02448941\n  '\"he\"', 0.02429185\n  '\"th\"', 0.02381377\n  '\" a\"', 0.02245183\n  '\"s \"', 0.02028996\n  '\"t \"', 0.01880665\n  '\" h\"', 0.01607567\n  '\"in\"', 0.01563341\n{% endgooglecharts %}\n\n[Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/ShannonPredictionAndEntropyOfPrintedEnglish.cs)","slug":"Exploring-Shannon-s-Prediction-And-Entropy-Of-Written-English","published":1,"updated":"2016-04-14T15:04:31.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidju3001vy0kwednjn5zm","content":"<p>Tried and mostly failing to replicate the results from <a href=\"http://languagelog.ldc.upenn.edu/myl/Shannon1950.pdf\" target=\"_blank\" rel=\"external\">Shannon’s paper</a> using War and Peace as a stand in for “The English Language”.</p>\n<p>I say mostly because I’m pretty sure I am measuring the entropy measurements for different length n-grams in the English language but it turns out I’m calculating isolated symbols entropy while Shannon is calculating conditional n-gram entropy.<br><a href=\"https://stackoverflow.com/questions/9604460/how-to-find-out-the-entropy-of-the-english-language\" target=\"_blank\" rel=\"external\">Helpful SO answer</a></p>\n<p>I did get interesting results for the top 10 unigrams and bigrams:</p>\n<div id=\"googleChart3390\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.PieChart(document.getElementById(\"googleChart3390\"))).draw(google.visualization.arrayToDataTable([['Unigram', 'Probability'],['other', 0.24359794],['\" \"', 0.1826038],['e', 0.1017603],['t', 0.07308632],['a', 0.06643674],['o', 0.06226344],['n', 0.05945337],['i', 0.05626013],['h', 0.05403983],['s', 0.05258396],['r', 0.04791417]]),{\"legend\":\"none\",\"pieSliceText\":\"label\",\"slices\":{\"0\":{\"color\":\"gray\"}},\"title\":\"Top 10 Unigrams\",\"width\":\"500\",\"height\":400});\n      });\n    })();\n  }\n</script>\n<div id=\"googleChart5666\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.PieChart(document.getElementById(\"googleChart5666\"))).draw(google.visualization.arrayToDataTable([['Bigram', 'Probability'],['other', 0.80588987],['\"e \"', 0.03586495],['\" t\"', 0.02825758],['\"d \"', 0.02448941],['\"he\"', 0.02429185],['\"th\"', 0.02381377],['\" a\"', 0.02245183],['\"s \"', 0.02028996],['\"t \"', 0.01880665],['\" h\"', 0.01607567],['\"in\"', 0.01563341]]),{\"legend\":{\"position\":\"left\"},\"pieSliceText\":\"label\",\"slices\":{\"0\":{\"color\":\"gray\"},\"1\":{\"offset\":0.2}},\"title\":\"Top 10 Bigrams\",\"width\":\"500\",\"height\":400});\n      });\n    })();\n  }\n</script>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/ShannonPredictionAndEntropyOfPrintedEnglish.cs\" target=\"_blank\" rel=\"external\">Source Code</a></p>\n","excerpt":"","more":"<p>Tried and mostly failing to replicate the results from <a href=\"http://languagelog.ldc.upenn.edu/myl/Shannon1950.pdf\">Shannon’s paper</a> using War and Peace as a stand in for “The English Language”.</p>\n<p>I say mostly because I’m pretty sure I am measuring the entropy measurements for different length n-grams in the English language but it turns out I’m calculating isolated symbols entropy while Shannon is calculating conditional n-gram entropy.<br><a href=\"https://stackoverflow.com/questions/9604460/how-to-find-out-the-entropy-of-the-english-language\">Helpful SO answer</a></p>\n<p>I did get interesting results for the top 10 unigrams and bigrams:</p>\n<div id=\"googleChart3390\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.PieChart(document.getElementById(\"googleChart3390\"))).draw(google.visualization.arrayToDataTable([['Unigram', 'Probability'],['other', 0.24359794],['\" \"', 0.1826038],['e', 0.1017603],['t', 0.07308632],['a', 0.06643674],['o', 0.06226344],['n', 0.05945337],['i', 0.05626013],['h', 0.05403983],['s', 0.05258396],['r', 0.04791417]]),{\"legend\":\"none\",\"pieSliceText\":\"label\",\"slices\":{\"0\":{\"color\":\"gray\"}},\"title\":\"Top 10 Unigrams\",\"width\":\"500\",\"height\":400});\n      });\n    })();\n  }\n</script>\n<div id=\"googleChart5666\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.PieChart(document.getElementById(\"googleChart5666\"))).draw(google.visualization.arrayToDataTable([['Bigram', 'Probability'],['other', 0.80588987],['\"e \"', 0.03586495],['\" t\"', 0.02825758],['\"d \"', 0.02448941],['\"he\"', 0.02429185],['\"th\"', 0.02381377],['\" a\"', 0.02245183],['\"s \"', 0.02028996],['\"t \"', 0.01880665],['\" h\"', 0.01607567],['\"in\"', 0.01563341]]),{\"legend\":{\"position\":\"left\"},\"pieSliceText\":\"label\",\"slices\":{\"0\":{\"color\":\"gray\"},\"1\":{\"offset\":0.2}},\"title\":\"Top 10 Bigrams\",\"width\":\"500\",\"height\":400});\n      });\n    })();\n  }\n</script>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/ShannonPredictionAndEntropyOfPrintedEnglish.cs\">Source Code</a></p>\n"},{"title":"Exploring Finding Entity Aliases Using MinHash Approximate Similarity","date":"2016-04-12T00:00:00.000Z","_content":"I tried to use a MinHash to group similar product listings, but it didn't work out.  I was trying to generate a list of aliases for entities by finding similar documents that have different entity names as attributes.  Assuming that an entity has multiple similar documents associated with it that are listed under its different aliases I should be able to generate a set of aliases by grouping similar documents together.\n\nThe data I'm working with has multiple versions of the same manufacturer.\n\n| Manufacturer | Listing Text |\n| - | - |\n| Fujifilm Canada | Fujifilm FinePix JV100 12 MP Digital Camera with 3x Optical Zoom and 2.7-Inch LCD (Black) |\n| FUJIFILM | Fujifilm FinePix XP10 12 MP Waterproof Digital Camera with 5x Optical Zoom and 2.7-Inch LCD (Black) |\n| Fujifilm Imaging Systems | Fujifilm Finepix Z700EXR Digitalkamera (12 Megapixel, 5-fach opt.Zoom, 8,9 cm Display, Bildstabilisator) silber |\n| FUJIFILM Electronic Imaging Europe GmbH - Firstorder | Fujifilm FINEPIX Z90 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 7,6 cm (3 Zoll) Display) silber |\n| Fuji Photo Film Europe GmbH | Fujifilm FINEPIX JX280 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 6,9 cm (2,7 Zoll) Display) schwarz |\n\nWhile these are all Finepix listings the manufacture name is different for each one.  This prevents me from blocking on the manufacturer's name as a first stage when matching products to listings.\n\nI tried using the [MinHash](https://en.wikipedia.org/wiki/MinHash) technique to find approximately similar documents but I don't think there's enough text per listing to get a good join.  Using only unique tokens to generate the min hashes helped but I'm getting too many false negatives on the Fuji listings for this to be useful.\n\nNext, I'm going to generate n-grams using model numbers from the products file and doing a plain old [Jaccard similarity coefficient](https://en.wikipedia.org/wiki/Jaccard_index) instead.  Hopefully, that can let me group listings for the same model together.\n\nI'll  probably come back to this code and try using it for another problem with long texts.  The examples of MinHash I've seen are on longer documents where they use shingles(n-grams where n > 1) instead of just unigrams.\n\n[Messy Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/FindingEntityAliasesUsingMinHashApproximateDocumentSimilarity.cs)","source":"_posts/Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity.md","raw":"---\ntitle: Exploring Finding Entity Aliases Using MinHash Approximate Similarity\ndate: 2016-04-12 00:00:00\ntags:\n  - Exploring\n  - Failure\n  - Natural Language Processing\n---\nI tried to use a MinHash to group similar product listings, but it didn't work out.  I was trying to generate a list of aliases for entities by finding similar documents that have different entity names as attributes.  Assuming that an entity has multiple similar documents associated with it that are listed under its different aliases I should be able to generate a set of aliases by grouping similar documents together.\n\nThe data I'm working with has multiple versions of the same manufacturer.\n\n| Manufacturer | Listing Text |\n| - | - |\n| Fujifilm Canada | Fujifilm FinePix JV100 12 MP Digital Camera with 3x Optical Zoom and 2.7-Inch LCD (Black) |\n| FUJIFILM | Fujifilm FinePix XP10 12 MP Waterproof Digital Camera with 5x Optical Zoom and 2.7-Inch LCD (Black) |\n| Fujifilm Imaging Systems | Fujifilm Finepix Z700EXR Digitalkamera (12 Megapixel, 5-fach opt.Zoom, 8,9 cm Display, Bildstabilisator) silber |\n| FUJIFILM Electronic Imaging Europe GmbH - Firstorder | Fujifilm FINEPIX Z90 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 7,6 cm (3 Zoll) Display) silber |\n| Fuji Photo Film Europe GmbH | Fujifilm FINEPIX JX280 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 6,9 cm (2,7 Zoll) Display) schwarz |\n\nWhile these are all Finepix listings the manufacture name is different for each one.  This prevents me from blocking on the manufacturer's name as a first stage when matching products to listings.\n\nI tried using the [MinHash](https://en.wikipedia.org/wiki/MinHash) technique to find approximately similar documents but I don't think there's enough text per listing to get a good join.  Using only unique tokens to generate the min hashes helped but I'm getting too many false negatives on the Fuji listings for this to be useful.\n\nNext, I'm going to generate n-grams using model numbers from the products file and doing a plain old [Jaccard similarity coefficient](https://en.wikipedia.org/wiki/Jaccard_index) instead.  Hopefully, that can let me group listings for the same model together.\n\nI'll  probably come back to this code and try using it for another problem with long texts.  The examples of MinHash I've seen are on longer documents where they use shingles(n-grams where n > 1) instead of just unigrams.\n\n[Messy Source Code](https://github.com/DForshner/CSharpExperiments/blob/master/FindingEntityAliasesUsingMinHashApproximateDocumentSimilarity.cs)","slug":"Exploring-Finding-Entity-Aliases-Using-MinHash-Approximate-Similarity","published":1,"updated":"2016-04-22T16:59:52.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidju4001xy0kwr9ivwn5k","content":"<p>I tried to use a MinHash to group similar product listings, but it didn’t work out.  I was trying to generate a list of aliases for entities by finding similar documents that have different entity names as attributes.  Assuming that an entity has multiple similar documents associated with it that are listed under its different aliases I should be able to generate a set of aliases by grouping similar documents together.</p>\n<p>The data I’m working with has multiple versions of the same manufacturer.</p>\n<table>\n<thead>\n<tr>\n<th>Manufacturer</th>\n<th>Listing Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fujifilm Canada</td>\n<td>Fujifilm FinePix JV100 12 MP Digital Camera with 3x Optical Zoom and 2.7-Inch LCD (Black)</td>\n</tr>\n<tr>\n<td>FUJIFILM</td>\n<td>Fujifilm FinePix XP10 12 MP Waterproof Digital Camera with 5x Optical Zoom and 2.7-Inch LCD (Black)</td>\n</tr>\n<tr>\n<td>Fujifilm Imaging Systems</td>\n<td>Fujifilm Finepix Z700EXR Digitalkamera (12 Megapixel, 5-fach opt.Zoom, 8,9 cm Display, Bildstabilisator) silber</td>\n</tr>\n<tr>\n<td>FUJIFILM Electronic Imaging Europe GmbH - Firstorder</td>\n<td>Fujifilm FINEPIX Z90 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 7,6 cm (3 Zoll) Display) silber</td>\n</tr>\n<tr>\n<td>Fuji Photo Film Europe GmbH</td>\n<td>Fujifilm FINEPIX JX280 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 6,9 cm (2,7 Zoll) Display) schwarz</td>\n</tr>\n</tbody>\n</table>\n<p>While these are all Finepix listings the manufacture name is different for each one.  This prevents me from blocking on the manufacturer’s name as a first stage when matching products to listings.</p>\n<p>I tried using the <a href=\"https://en.wikipedia.org/wiki/MinHash\" target=\"_blank\" rel=\"external\">MinHash</a> technique to find approximately similar documents but I don’t think there’s enough text per listing to get a good join.  Using only unique tokens to generate the min hashes helped but I’m getting too many false negatives on the Fuji listings for this to be useful.</p>\n<p>Next, I’m going to generate n-grams using model numbers from the products file and doing a plain old <a href=\"https://en.wikipedia.org/wiki/Jaccard_index\" target=\"_blank\" rel=\"external\">Jaccard similarity coefficient</a> instead.  Hopefully, that can let me group listings for the same model together.</p>\n<p>I’ll  probably come back to this code and try using it for another problem with long texts.  The examples of MinHash I’ve seen are on longer documents where they use shingles(n-grams where n &gt; 1) instead of just unigrams.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/FindingEntityAliasesUsingMinHashApproximateDocumentSimilarity.cs\" target=\"_blank\" rel=\"external\">Messy Source Code</a></p>\n","excerpt":"","more":"<p>I tried to use a MinHash to group similar product listings, but it didn’t work out.  I was trying to generate a list of aliases for entities by finding similar documents that have different entity names as attributes.  Assuming that an entity has multiple similar documents associated with it that are listed under its different aliases I should be able to generate a set of aliases by grouping similar documents together.</p>\n<p>The data I’m working with has multiple versions of the same manufacturer.</p>\n<table>\n<thead>\n<tr>\n<th>Manufacturer</th>\n<th>Listing Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fujifilm Canada</td>\n<td>Fujifilm FinePix JV100 12 MP Digital Camera with 3x Optical Zoom and 2.7-Inch LCD (Black)</td>\n</tr>\n<tr>\n<td>FUJIFILM</td>\n<td>Fujifilm FinePix XP10 12 MP Waterproof Digital Camera with 5x Optical Zoom and 2.7-Inch LCD (Black)</td>\n</tr>\n<tr>\n<td>Fujifilm Imaging Systems</td>\n<td>Fujifilm Finepix Z700EXR Digitalkamera (12 Megapixel, 5-fach opt.Zoom, 8,9 cm Display, Bildstabilisator) silber</td>\n</tr>\n<tr>\n<td>FUJIFILM Electronic Imaging Europe GmbH - Firstorder</td>\n<td>Fujifilm FINEPIX Z90 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 7,6 cm (3 Zoll) Display) silber</td>\n</tr>\n<tr>\n<td>Fuji Photo Film Europe GmbH</td>\n<td>Fujifilm FINEPIX JX280 Digitalkamera (14 Megapixel, 5-fach opt. Zoom, 6,9 cm (2,7 Zoll) Display) schwarz</td>\n</tr>\n</tbody>\n</table>\n<p>While these are all Finepix listings the manufacture name is different for each one.  This prevents me from blocking on the manufacturer’s name as a first stage when matching products to listings.</p>\n<p>I tried using the <a href=\"https://en.wikipedia.org/wiki/MinHash\">MinHash</a> technique to find approximately similar documents but I don’t think there’s enough text per listing to get a good join.  Using only unique tokens to generate the min hashes helped but I’m getting too many false negatives on the Fuji listings for this to be useful.</p>\n<p>Next, I’m going to generate n-grams using model numbers from the products file and doing a plain old <a href=\"https://en.wikipedia.org/wiki/Jaccard_index\">Jaccard similarity coefficient</a> instead.  Hopefully, that can let me group listings for the same model together.</p>\n<p>I’ll  probably come back to this code and try using it for another problem with long texts.  The examples of MinHash I’ve seen are on longer documents where they use shingles(n-grams where n &gt; 1) instead of just unigrams.</p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/FindingEntityAliasesUsingMinHashApproximateDocumentSimilarity.cs\">Messy Source Code</a></p>\n"},{"title":"Feature Extraction","date":"2015-12-10T18:00:00.000Z","_content":"Talk about how to turn raw data into features to use in learning and modelling and a short presentation on linear modelling.\n- Adding new features that describe how the data changes over time (ex: position/velocity/acceleration/jerk).\n- Figure out what variables are important to deduce dimensions.  Fewer dimensions reduce error.\n- PCA - capture variance in a new vector that maximizes variance.\n- Choose components based on proportion of variance (How much variance does this data account for?)\n- PCA may make things worse!  There may be too many relationships between variables and we don't want to lose any.\n- Over-fitting - Using too much local data that doesn't account for variance.  The model becomes fitted to the data you are seeing instead of the relationships between variables.\n- The log function can be used to separate data.\n- Linear modelling - Fit a line to minimize the amount of error.  Best if the error is normally distributed (most errors are zero).\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/227172091/)","source":"_posts/Feature-Extraction.md","raw":"---\ntitle: Feature Extraction\ndate: 2015-12-10 18:00:00\ntags:\n- Data Science\n- Meetup\n---\nTalk about how to turn raw data into features to use in learning and modelling and a short presentation on linear modelling.\n- Adding new features that describe how the data changes over time (ex: position/velocity/acceleration/jerk).\n- Figure out what variables are important to deduce dimensions.  Fewer dimensions reduce error.\n- PCA - capture variance in a new vector that maximizes variance.\n- Choose components based on proportion of variance (How much variance does this data account for?)\n- PCA may make things worse!  There may be too many relationships between variables and we don't want to lose any.\n- Over-fitting - Using too much local data that doesn't account for variance.  The model becomes fitted to the data you are seeing instead of the relationships between variables.\n- The log function can be used to separate data.\n- Linear modelling - Fit a line to minimize the amount of error.  Best if the error is normally distributed (most errors are zero).\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/227172091/)","slug":"Feature-Extraction","published":1,"updated":"2016-04-14T14:58:42.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidju5001zy0kw017wxo5u","content":"<p>Talk about how to turn raw data into features to use in learning and modelling and a short presentation on linear modelling.</p>\n<ul>\n<li>Adding new features that describe how the data changes over time (ex: position/velocity/acceleration/jerk).</li>\n<li>Figure out what variables are important to deduce dimensions.  Fewer dimensions reduce error.</li>\n<li>PCA - capture variance in a new vector that maximizes variance.</li>\n<li>Choose components based on proportion of variance (How much variance does this data account for?)</li>\n<li>PCA may make things worse!  There may be too many relationships between variables and we don’t want to lose any.</li>\n<li>Over-fitting - Using too much local data that doesn’t account for variance.  The model becomes fitted to the data you are seeing instead of the relationships between variables.</li>\n<li>The log function can be used to separate data.</li>\n<li>Linear modelling - Fit a line to minimize the amount of error.  Best if the error is normally distributed (most errors are zero).</li>\n</ul>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/227172091/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>Talk about how to turn raw data into features to use in learning and modelling and a short presentation on linear modelling.</p>\n<ul>\n<li>Adding new features that describe how the data changes over time (ex: position/velocity/acceleration/jerk).</li>\n<li>Figure out what variables are important to deduce dimensions.  Fewer dimensions reduce error.</li>\n<li>PCA - capture variance in a new vector that maximizes variance.</li>\n<li>Choose components based on proportion of variance (How much variance does this data account for?)</li>\n<li>PCA may make things worse!  There may be too many relationships between variables and we don’t want to lose any.</li>\n<li>Over-fitting - Using too much local data that doesn’t account for variance.  The model becomes fitted to the data you are seeing instead of the relationships between variables.</li>\n<li>The log function can be used to separate data.</li>\n<li>Linear modelling - Fit a line to minimize the amount of error.  Best if the error is normally distributed (most errors are zero).</li>\n</ul>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/227172091/\">Meetup Event</a></p>\n"},{"title":"Exploring Probabilistic Data Structures","date":"2014-05-25T00:00:00.000Z","_content":"The Bloom filter and Count-Min Sketch data structures keep cropping while I'm reading so I figured I would try to implement them.  They are both part of a family of probabilistic data structures that give up accuracy to store a lot of information in a tiny amount of space.\n\n[Bloom Filter](https://en.wikipedia.org/wiki/Bloom_filter) - Could I have seen this before?\n[Count–Min Sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch) - What's the maximum number of times I could have seen this?\n\nIt's also worth looking at:\n[HyperLogLog](https://en.wikipedia.org/wiki/HyperLogLog) - Approximately how many unique elements have I seen?\n[Great post on probabilistic data structures](https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining/)\n\n[Bloom Filter code](https://github.com/DForshner/CSharpExperiments/blob/master/BloomFilter.cs)\n[Count-Min Sketch code](https://github.com/DForshner/CSharpExperiments/blob/master/CountMinSketch.cs)","source":"_posts/Exploring-Probabilistic-Data-Structures.md","raw":"---\ntitle: Exploring Probabilistic Data Structures\ndate: 2014-05-25 00:00:00\ntags:\n- Exploring\n- Data Structures\n---\nThe Bloom filter and Count-Min Sketch data structures keep cropping while I'm reading so I figured I would try to implement them.  They are both part of a family of probabilistic data structures that give up accuracy to store a lot of information in a tiny amount of space.\n\n[Bloom Filter](https://en.wikipedia.org/wiki/Bloom_filter) - Could I have seen this before?\n[Count–Min Sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch) - What's the maximum number of times I could have seen this?\n\nIt's also worth looking at:\n[HyperLogLog](https://en.wikipedia.org/wiki/HyperLogLog) - Approximately how many unique elements have I seen?\n[Great post on probabilistic data structures](https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining/)\n\n[Bloom Filter code](https://github.com/DForshner/CSharpExperiments/blob/master/BloomFilter.cs)\n[Count-Min Sketch code](https://github.com/DForshner/CSharpExperiments/blob/master/CountMinSketch.cs)","slug":"Exploring-Probabilistic-Data-Structures","published":1,"updated":"2016-04-14T14:59:04.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidju70022y0kwi9lomgiz","content":"<p>The Bloom filter and Count-Min Sketch data structures keep cropping while I’m reading so I figured I would try to implement them.  They are both part of a family of probabilistic data structures that give up accuracy to store a lot of information in a tiny amount of space.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" target=\"_blank\" rel=\"external\">Bloom Filter</a> - Could I have seen this before?<br><a href=\"https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch\" target=\"_blank\" rel=\"external\">Count–Min Sketch</a> - What’s the maximum number of times I could have seen this?</p>\n<p>It’s also worth looking at:<br><a href=\"https://en.wikipedia.org/wiki/HyperLogLog\" target=\"_blank\" rel=\"external\">HyperLogLog</a> - Approximately how many unique elements have I seen?<br><a href=\"https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining/\" target=\"_blank\" rel=\"external\">Great post on probabilistic data structures</a></p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/BloomFilter.cs\" target=\"_blank\" rel=\"external\">Bloom Filter code</a><br><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/CountMinSketch.cs\" target=\"_blank\" rel=\"external\">Count-Min Sketch code</a></p>\n","excerpt":"","more":"<p>The Bloom filter and Count-Min Sketch data structures keep cropping while I’m reading so I figured I would try to implement them.  They are both part of a family of probabilistic data structures that give up accuracy to store a lot of information in a tiny amount of space.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Bloom_filter\">Bloom Filter</a> - Could I have seen this before?<br><a href=\"https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch\">Count–Min Sketch</a> - What’s the maximum number of times I could have seen this?</p>\n<p>It’s also worth looking at:<br><a href=\"https://en.wikipedia.org/wiki/HyperLogLog\">HyperLogLog</a> - Approximately how many unique elements have I seen?<br><a href=\"https://highlyscalable.wordpress.com/2012/05/01/probabilistic-structures-web-analytics-data-mining/\">Great post on probabilistic data structures</a></p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/BloomFilter.cs\">Bloom Filter code</a><br><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/CountMinSketch.cs\">Count-Min Sketch code</a></p>\n"},{"title":"First Look at React.js & Flux Pattern","date":"2015-03-13T00:00:00.000Z","_content":"I took a crack at creating dashboards using Facebook's React & Flux libraries.\n\n- It was easy to get something up working and then iterate on it.\n- I found the functional concepts they are pushing a refreshing change from messing with jquery.  The code looks actually looks like code instead of a tangled rat's nest of callbacks and dom mutations.\n- It's explicit about how state is stored and mutated.  People don't think enough about this stuff and haveing it front and center is nice.\n- The flux pattern is interesting.  I like how it separates concerns but it seems like there is a lot of code duplication.\n- The idea of updating state and re-rendering reminds me of a game loop.\n- I'm not sure how the virtual DOM will perform for larger views but the \"native calls are slow\" argument makes sense.  I've had screens with bad jank when lots of Backbone sub-views are re-rendered at the same time.\n- The jsx concept of combining template(html) and code is a bit strange but I think they are on to something.  With Backbone, you usually end up editing the template/model/view files for most changes so I agree that they aren't independent concerns.\n- I also used Webstorm (support for jsx) for the first time and I'm not sure I can go back to using Visual Studio for JS.\n\n[Prototype Code](https://github.com/DForshner/ReactFluxDashboardProto)","source":"_posts/First-Look-at-React-js-Flux-Pattern.md","raw":"---\ntitle: First Look at React.js & Flux Pattern\ndate: 2015-03-13 00:00:00\ntags:\n- React\n- ECMAScript\n---\nI took a crack at creating dashboards using Facebook's React & Flux libraries.\n\n- It was easy to get something up working and then iterate on it.\n- I found the functional concepts they are pushing a refreshing change from messing with jquery.  The code looks actually looks like code instead of a tangled rat's nest of callbacks and dom mutations.\n- It's explicit about how state is stored and mutated.  People don't think enough about this stuff and haveing it front and center is nice.\n- The flux pattern is interesting.  I like how it separates concerns but it seems like there is a lot of code duplication.\n- The idea of updating state and re-rendering reminds me of a game loop.\n- I'm not sure how the virtual DOM will perform for larger views but the \"native calls are slow\" argument makes sense.  I've had screens with bad jank when lots of Backbone sub-views are re-rendered at the same time.\n- The jsx concept of combining template(html) and code is a bit strange but I think they are on to something.  With Backbone, you usually end up editing the template/model/view files for most changes so I agree that they aren't independent concerns.\n- I also used Webstorm (support for jsx) for the first time and I'm not sure I can go back to using Visual Studio for JS.\n\n[Prototype Code](https://github.com/DForshner/ReactFluxDashboardProto)","slug":"First-Look-at-React-js-Flux-Pattern","published":1,"updated":"2016-04-14T14:58:34.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidju80023y0kw97mvv6up","content":"<p>I took a crack at creating dashboards using Facebook’s React &amp; Flux libraries.</p>\n<ul>\n<li>It was easy to get something up working and then iterate on it.</li>\n<li>I found the functional concepts they are pushing a refreshing change from messing with jquery.  The code looks actually looks like code instead of a tangled rat’s nest of callbacks and dom mutations.</li>\n<li>It’s explicit about how state is stored and mutated.  People don’t think enough about this stuff and haveing it front and center is nice.</li>\n<li>The flux pattern is interesting.  I like how it separates concerns but it seems like there is a lot of code duplication.</li>\n<li>The idea of updating state and re-rendering reminds me of a game loop.</li>\n<li>I’m not sure how the virtual DOM will perform for larger views but the “native calls are slow” argument makes sense.  I’ve had screens with bad jank when lots of Backbone sub-views are re-rendered at the same time.</li>\n<li>The jsx concept of combining template(html) and code is a bit strange but I think they are on to something.  With Backbone, you usually end up editing the template/model/view files for most changes so I agree that they aren’t independent concerns.</li>\n<li>I also used Webstorm (support for jsx) for the first time and I’m not sure I can go back to using Visual Studio for JS.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/ReactFluxDashboardProto\" target=\"_blank\" rel=\"external\">Prototype Code</a></p>\n","excerpt":"","more":"<p>I took a crack at creating dashboards using Facebook’s React &amp; Flux libraries.</p>\n<ul>\n<li>It was easy to get something up working and then iterate on it.</li>\n<li>I found the functional concepts they are pushing a refreshing change from messing with jquery.  The code looks actually looks like code instead of a tangled rat’s nest of callbacks and dom mutations.</li>\n<li>It’s explicit about how state is stored and mutated.  People don’t think enough about this stuff and haveing it front and center is nice.</li>\n<li>The flux pattern is interesting.  I like how it separates concerns but it seems like there is a lot of code duplication.</li>\n<li>The idea of updating state and re-rendering reminds me of a game loop.</li>\n<li>I’m not sure how the virtual DOM will perform for larger views but the “native calls are slow” argument makes sense.  I’ve had screens with bad jank when lots of Backbone sub-views are re-rendered at the same time.</li>\n<li>The jsx concept of combining template(html) and code is a bit strange but I think they are on to something.  With Backbone, you usually end up editing the template/model/view files for most changes so I agree that they aren’t independent concerns.</li>\n<li>I also used Webstorm (support for jsx) for the first time and I’m not sure I can go back to using Visual Studio for JS.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/ReactFluxDashboardProto\">Prototype Code</a></p>\n"},{"title":"Google I/O Extended 2013","date":"2013-05-18T00:00:00.000Z","_content":"Notes from the Google I/O Extended conference at Google's Kitchener location.  I went to the workshops on interviewing at Google, Google Fiber and multi-touch interfaces.\n\n* In Canada - Ad words, Chromebook (Pixel), consumer commerce products, mobile Gmail (IOS app).\n* Pixel Concept - A better touch based web experience.\n* Building platforms to support the evolution from Desktop -> Laptops -> Smart Phones.\n  * Android - Bring open standards to the mobile industry.\n  * Chrome - Build web as a platform and provide simple safe browsing.\n* Activity recognition - Accelerometer + machine learning\n* Google Cloud Messaging - Push data to mobile apps, syncronize notification dismissal across devices, auto retry, etc.\n* **App Developer Tools**\n   * App translation service to match make with a translation company.\n   * Google play store uses per user bubbling recommendations based on +1's and installed/purchased apps.\n   * App store has beta testing and staged rollout (alpha->beta->prod) and you can roll out new versions to a portion of users.\n* **Music App** - Guild you through exploring your music.  Tries to understand what you want to hear.\n  * Pick a category and get expert powered recommendations.\n  * Play radio is a never ending queue of related tracks.\n  * My library - Personal music + online music collection blended together.\n  * Listen Now - Machine learning your musical preferences\n* **Chrome platform**\n  * Do for mobile web what was done for desktop\n  * Chromebooks are built for the web\n  * Consistent user experience across web independent of device or browser.\n* Browser is a means not an end\n* **Google Play for Eduction**\n  * Walled garden within a walled garden\n  * Teachers pick and push to all student tablets at once.\n* **Data Centers**\n  * Peer with ISP to lower transit costs\n  * Colossus to replace GFS - 100x bigger\n  * Flume - Pipelines of map reduce\n  * Spanner - Big data with transactional capability\n  * Compute Engine (ISS)\n    * 1-minute billing granularity\n    * Small instances with predictable performance instead of best effort.\n  * App Engine (PSS)\n    * Android studio new comes with a mobile starter kit that integrates with App Engine.  Write the front-end and it creates the back-end for you.\n  * App Engine And Compute Engine can access same data store (GCloud).  Do CPU and I/O intensive tasks in Compute Engine to save money.\n    * Ex: Doing semantic analysis on Compute instance using Hadoop and serving results on App Engine.\n* **Interviewing at Google**\n  * Can you write code?  Can you think at scale?\n  * Verbalize your thought process.  Talk about what you are thinking.\n  * Start with the simple case and then work towards a general answer.\n  * If you don't know something don't fake it.  Just move on to the next part.\n  * Be confident about your skills.\n  * Don't interrupt the interviewer.  How will you work with a team?\n  * Don't say bad things about anything!!!  They are looking for positive, open and capable.\n  * Interviewers create a packet containing the questions asked, how you answered, a copy of the code you wrote, and their opinion on you being a good fit.\n  * Resume - Show progression and what you accomplished.\n  * They are looking for generalists.\n  * Build expertise - Answer questions on SO, start blog, work on open source, etc.\n  * Practice coding in front of a whiteboard.\n  * Read the Algorithm Design Manual.\n* **Google Fiber**\n  * Organize world's information and make it accessible to all.\n  * Already a technology company but want to gain experience as a services company.\n  * <u>Fiberhoods</u> - Find interested communities and build there.\n    * Schools, libraries, emergency centers, community centers, etc. are connected for free.\n    * Lots of municipal politics.\n  * Search built into your TV\n  * In Kitchener they do UX, product testing, and development.\n  * Analytics says people watch 5hrs of TV per day???\n  * Financial model is TV + internet\n* **Multi-touch Interfaces**\n  * Most H/W will support up to 10 touches at the same time.\n  * Recommend touch surface is 9x9mm (~44pts).\n  * CSS pixels vary in physical size!\n  * Don't rely on hover!  Use tap event to fake hover effect.\n  * Browsers will fake mouse events on touch so you may get two events if not careful.\n  * Touch events will target the node where the touch started even if the node is moved/removed from the DOM.\n  * It's hard to hit small targets\n  * Initial tap is delayed.  There is a 300ms delay to figure out if you are double tapping or not.\n  * Touch events can happen faster than you can render (> 60 Hz).  Use requestAnimationFrame() to register work for next vFrame.","source":"_posts/Google-I-O-Extended-2013.md","raw":"---\ntitle: Google I/O Extended 2013\ndate: 2013-05-18 00:00:00\ntags:\n- Conferences\n- Interviewing\n---\nNotes from the Google I/O Extended conference at Google's Kitchener location.  I went to the workshops on interviewing at Google, Google Fiber and multi-touch interfaces.\n\n* In Canada - Ad words, Chromebook (Pixel), consumer commerce products, mobile Gmail (IOS app).\n* Pixel Concept - A better touch based web experience.\n* Building platforms to support the evolution from Desktop -> Laptops -> Smart Phones.\n  * Android - Bring open standards to the mobile industry.\n  * Chrome - Build web as a platform and provide simple safe browsing.\n* Activity recognition - Accelerometer + machine learning\n* Google Cloud Messaging - Push data to mobile apps, syncronize notification dismissal across devices, auto retry, etc.\n* **App Developer Tools**\n   * App translation service to match make with a translation company.\n   * Google play store uses per user bubbling recommendations based on +1's and installed/purchased apps.\n   * App store has beta testing and staged rollout (alpha->beta->prod) and you can roll out new versions to a portion of users.\n* **Music App** - Guild you through exploring your music.  Tries to understand what you want to hear.\n  * Pick a category and get expert powered recommendations.\n  * Play radio is a never ending queue of related tracks.\n  * My library - Personal music + online music collection blended together.\n  * Listen Now - Machine learning your musical preferences\n* **Chrome platform**\n  * Do for mobile web what was done for desktop\n  * Chromebooks are built for the web\n  * Consistent user experience across web independent of device or browser.\n* Browser is a means not an end\n* **Google Play for Eduction**\n  * Walled garden within a walled garden\n  * Teachers pick and push to all student tablets at once.\n* **Data Centers**\n  * Peer with ISP to lower transit costs\n  * Colossus to replace GFS - 100x bigger\n  * Flume - Pipelines of map reduce\n  * Spanner - Big data with transactional capability\n  * Compute Engine (ISS)\n    * 1-minute billing granularity\n    * Small instances with predictable performance instead of best effort.\n  * App Engine (PSS)\n    * Android studio new comes with a mobile starter kit that integrates with App Engine.  Write the front-end and it creates the back-end for you.\n  * App Engine And Compute Engine can access same data store (GCloud).  Do CPU and I/O intensive tasks in Compute Engine to save money.\n    * Ex: Doing semantic analysis on Compute instance using Hadoop and serving results on App Engine.\n* **Interviewing at Google**\n  * Can you write code?  Can you think at scale?\n  * Verbalize your thought process.  Talk about what you are thinking.\n  * Start with the simple case and then work towards a general answer.\n  * If you don't know something don't fake it.  Just move on to the next part.\n  * Be confident about your skills.\n  * Don't interrupt the interviewer.  How will you work with a team?\n  * Don't say bad things about anything!!!  They are looking for positive, open and capable.\n  * Interviewers create a packet containing the questions asked, how you answered, a copy of the code you wrote, and their opinion on you being a good fit.\n  * Resume - Show progression and what you accomplished.\n  * They are looking for generalists.\n  * Build expertise - Answer questions on SO, start blog, work on open source, etc.\n  * Practice coding in front of a whiteboard.\n  * Read the Algorithm Design Manual.\n* **Google Fiber**\n  * Organize world's information and make it accessible to all.\n  * Already a technology company but want to gain experience as a services company.\n  * <u>Fiberhoods</u> - Find interested communities and build there.\n    * Schools, libraries, emergency centers, community centers, etc. are connected for free.\n    * Lots of municipal politics.\n  * Search built into your TV\n  * In Kitchener they do UX, product testing, and development.\n  * Analytics says people watch 5hrs of TV per day???\n  * Financial model is TV + internet\n* **Multi-touch Interfaces**\n  * Most H/W will support up to 10 touches at the same time.\n  * Recommend touch surface is 9x9mm (~44pts).\n  * CSS pixels vary in physical size!\n  * Don't rely on hover!  Use tap event to fake hover effect.\n  * Browsers will fake mouse events on touch so you may get two events if not careful.\n  * Touch events will target the node where the touch started even if the node is moved/removed from the DOM.\n  * It's hard to hit small targets\n  * Initial tap is delayed.  There is a 300ms delay to figure out if you are double tapping or not.\n  * Touch events can happen faster than you can render (> 60 Hz).  Use requestAnimationFrame() to register work for next vFrame.","slug":"Google-I-O-Extended-2013","published":1,"updated":"2016-04-14T14:58:21.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidju90025y0kwylgwys98","content":"<p>Notes from the Google I/O Extended conference at Google’s Kitchener location.  I went to the workshops on interviewing at Google, Google Fiber and multi-touch interfaces.</p>\n<ul>\n<li>In Canada - Ad words, Chromebook (Pixel), consumer commerce products, mobile Gmail (IOS app).</li>\n<li>Pixel Concept - A better touch based web experience.</li>\n<li>Building platforms to support the evolution from Desktop -&gt; Laptops -&gt; Smart Phones.<ul>\n<li>Android - Bring open standards to the mobile industry.</li>\n<li>Chrome - Build web as a platform and provide simple safe browsing.</li>\n</ul>\n</li>\n<li>Activity recognition - Accelerometer + machine learning</li>\n<li>Google Cloud Messaging - Push data to mobile apps, syncronize notification dismissal across devices, auto retry, etc.</li>\n<li><strong>App Developer Tools</strong><ul>\n<li>App translation service to match make with a translation company.</li>\n<li>Google play store uses per user bubbling recommendations based on +1’s and installed/purchased apps.</li>\n<li>App store has beta testing and staged rollout (alpha-&gt;beta-&gt;prod) and you can roll out new versions to a portion of users.</li>\n</ul>\n</li>\n<li><strong>Music App</strong> - Guild you through exploring your music.  Tries to understand what you want to hear.<ul>\n<li>Pick a category and get expert powered recommendations.</li>\n<li>Play radio is a never ending queue of related tracks.</li>\n<li>My library - Personal music + online music collection blended together.</li>\n<li>Listen Now - Machine learning your musical preferences</li>\n</ul>\n</li>\n<li><strong>Chrome platform</strong><ul>\n<li>Do for mobile web what was done for desktop</li>\n<li>Chromebooks are built for the web</li>\n<li>Consistent user experience across web independent of device or browser.</li>\n</ul>\n</li>\n<li>Browser is a means not an end</li>\n<li><strong>Google Play for Eduction</strong><ul>\n<li>Walled garden within a walled garden</li>\n<li>Teachers pick and push to all student tablets at once.</li>\n</ul>\n</li>\n<li><strong>Data Centers</strong><ul>\n<li>Peer with ISP to lower transit costs</li>\n<li>Colossus to replace GFS - 100x bigger</li>\n<li>Flume - Pipelines of map reduce</li>\n<li>Spanner - Big data with transactional capability</li>\n<li>Compute Engine (ISS)<ul>\n<li>1-minute billing granularity</li>\n<li>Small instances with predictable performance instead of best effort.</li>\n</ul>\n</li>\n<li>App Engine (PSS)<ul>\n<li>Android studio new comes with a mobile starter kit that integrates with App Engine.  Write the front-end and it creates the back-end for you.</li>\n</ul>\n</li>\n<li>App Engine And Compute Engine can access same data store (GCloud).  Do CPU and I/O intensive tasks in Compute Engine to save money.<ul>\n<li>Ex: Doing semantic analysis on Compute instance using Hadoop and serving results on App Engine.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Interviewing at Google</strong><ul>\n<li>Can you write code?  Can you think at scale?</li>\n<li>Verbalize your thought process.  Talk about what you are thinking.</li>\n<li>Start with the simple case and then work towards a general answer.</li>\n<li>If you don’t know something don’t fake it.  Just move on to the next part.</li>\n<li>Be confident about your skills.</li>\n<li>Don’t interrupt the interviewer.  How will you work with a team?</li>\n<li>Don’t say bad things about anything!!!  They are looking for positive, open and capable.</li>\n<li>Interviewers create a packet containing the questions asked, how you answered, a copy of the code you wrote, and their opinion on you being a good fit.</li>\n<li>Resume - Show progression and what you accomplished.</li>\n<li>They are looking for generalists.</li>\n<li>Build expertise - Answer questions on SO, start blog, work on open source, etc.</li>\n<li>Practice coding in front of a whiteboard.</li>\n<li>Read the Algorithm Design Manual.</li>\n</ul>\n</li>\n<li><strong>Google Fiber</strong><ul>\n<li>Organize world’s information and make it accessible to all.</li>\n<li>Already a technology company but want to gain experience as a services company.</li>\n<li><u>Fiberhoods</u> - Find interested communities and build there.<ul>\n<li>Schools, libraries, emergency centers, community centers, etc. are connected for free.</li>\n<li>Lots of municipal politics.</li>\n</ul>\n</li>\n<li>Search built into your TV</li>\n<li>In Kitchener they do UX, product testing, and development.</li>\n<li>Analytics says people watch 5hrs of TV per day???</li>\n<li>Financial model is TV + internet</li>\n</ul>\n</li>\n<li><strong>Multi-touch Interfaces</strong><ul>\n<li>Most H/W will support up to 10 touches at the same time.</li>\n<li>Recommend touch surface is 9x9mm (~44pts).</li>\n<li>CSS pixels vary in physical size!</li>\n<li>Don’t rely on hover!  Use tap event to fake hover effect.</li>\n<li>Browsers will fake mouse events on touch so you may get two events if not careful.</li>\n<li>Touch events will target the node where the touch started even if the node is moved/removed from the DOM.</li>\n<li>It’s hard to hit small targets</li>\n<li>Initial tap is delayed.  There is a 300ms delay to figure out if you are double tapping or not.</li>\n<li>Touch events can happen faster than you can render (&gt; 60 Hz).  Use requestAnimationFrame() to register work for next vFrame.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Notes from the Google I/O Extended conference at Google’s Kitchener location.  I went to the workshops on interviewing at Google, Google Fiber and multi-touch interfaces.</p>\n<ul>\n<li>In Canada - Ad words, Chromebook (Pixel), consumer commerce products, mobile Gmail (IOS app).</li>\n<li>Pixel Concept - A better touch based web experience.</li>\n<li>Building platforms to support the evolution from Desktop -&gt; Laptops -&gt; Smart Phones.<ul>\n<li>Android - Bring open standards to the mobile industry.</li>\n<li>Chrome - Build web as a platform and provide simple safe browsing.</li>\n</ul>\n</li>\n<li>Activity recognition - Accelerometer + machine learning</li>\n<li>Google Cloud Messaging - Push data to mobile apps, syncronize notification dismissal across devices, auto retry, etc.</li>\n<li><strong>App Developer Tools</strong><ul>\n<li>App translation service to match make with a translation company.</li>\n<li>Google play store uses per user bubbling recommendations based on +1’s and installed/purchased apps.</li>\n<li>App store has beta testing and staged rollout (alpha-&gt;beta-&gt;prod) and you can roll out new versions to a portion of users.</li>\n</ul>\n</li>\n<li><strong>Music App</strong> - Guild you through exploring your music.  Tries to understand what you want to hear.<ul>\n<li>Pick a category and get expert powered recommendations.</li>\n<li>Play radio is a never ending queue of related tracks.</li>\n<li>My library - Personal music + online music collection blended together.</li>\n<li>Listen Now - Machine learning your musical preferences</li>\n</ul>\n</li>\n<li><strong>Chrome platform</strong><ul>\n<li>Do for mobile web what was done for desktop</li>\n<li>Chromebooks are built for the web</li>\n<li>Consistent user experience across web independent of device or browser.</li>\n</ul>\n</li>\n<li>Browser is a means not an end</li>\n<li><strong>Google Play for Eduction</strong><ul>\n<li>Walled garden within a walled garden</li>\n<li>Teachers pick and push to all student tablets at once.</li>\n</ul>\n</li>\n<li><strong>Data Centers</strong><ul>\n<li>Peer with ISP to lower transit costs</li>\n<li>Colossus to replace GFS - 100x bigger</li>\n<li>Flume - Pipelines of map reduce</li>\n<li>Spanner - Big data with transactional capability</li>\n<li>Compute Engine (ISS)<ul>\n<li>1-minute billing granularity</li>\n<li>Small instances with predictable performance instead of best effort.</li>\n</ul>\n</li>\n<li>App Engine (PSS)<ul>\n<li>Android studio new comes with a mobile starter kit that integrates with App Engine.  Write the front-end and it creates the back-end for you.</li>\n</ul>\n</li>\n<li>App Engine And Compute Engine can access same data store (GCloud).  Do CPU and I/O intensive tasks in Compute Engine to save money.<ul>\n<li>Ex: Doing semantic analysis on Compute instance using Hadoop and serving results on App Engine.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Interviewing at Google</strong><ul>\n<li>Can you write code?  Can you think at scale?</li>\n<li>Verbalize your thought process.  Talk about what you are thinking.</li>\n<li>Start with the simple case and then work towards a general answer.</li>\n<li>If you don’t know something don’t fake it.  Just move on to the next part.</li>\n<li>Be confident about your skills.</li>\n<li>Don’t interrupt the interviewer.  How will you work with a team?</li>\n<li>Don’t say bad things about anything!!!  They are looking for positive, open and capable.</li>\n<li>Interviewers create a packet containing the questions asked, how you answered, a copy of the code you wrote, and their opinion on you being a good fit.</li>\n<li>Resume - Show progression and what you accomplished.</li>\n<li>They are looking for generalists.</li>\n<li>Build expertise - Answer questions on SO, start blog, work on open source, etc.</li>\n<li>Practice coding in front of a whiteboard.</li>\n<li>Read the Algorithm Design Manual.</li>\n</ul>\n</li>\n<li><strong>Google Fiber</strong><ul>\n<li>Organize world’s information and make it accessible to all.</li>\n<li>Already a technology company but want to gain experience as a services company.</li>\n<li><u>Fiberhoods</u> - Find interested communities and build there.<ul>\n<li>Schools, libraries, emergency centers, community centers, etc. are connected for free.</li>\n<li>Lots of municipal politics.</li>\n</ul>\n</li>\n<li>Search built into your TV</li>\n<li>In Kitchener they do UX, product testing, and development.</li>\n<li>Analytics says people watch 5hrs of TV per day???</li>\n<li>Financial model is TV + internet</li>\n</ul>\n</li>\n<li><strong>Multi-touch Interfaces</strong><ul>\n<li>Most H/W will support up to 10 touches at the same time.</li>\n<li>Recommend touch surface is 9x9mm (~44pts).</li>\n<li>CSS pixels vary in physical size!</li>\n<li>Don’t rely on hover!  Use tap event to fake hover effect.</li>\n<li>Browsers will fake mouse events on touch so you may get two events if not careful.</li>\n<li>Touch events will target the node where the touch started even if the node is moved/removed from the DOM.</li>\n<li>It’s hard to hit small targets</li>\n<li>Initial tap is delayed.  There is a 300ms delay to figure out if you are double tapping or not.</li>\n<li>Touch events can happen faster than you can render (&gt; 60 Hz).  Use requestAnimationFrame() to register work for next vFrame.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Functional vs. Imperative Environments","date":"2013-02-23T00:00:00.000Z","_content":"What is the primary building block of your programs?\n\n* *Functional*\n  * Mostly functional with imperative where needed.  Managing what state is intrinsic, necessary, and appropriate.\n  * The Basic building block is a referentially transparent function.  A function which returns the same output per given input every time.\n  * The environment does not affect the output of a  referentially transparent function so we can reason about it independently.\n\n* *Imperative*\n  * The Basic building block is a stateful action (object in OO).\n  * Without environmental knowledge it's impossible to reason about and test.\n  * You must be able to control the environment in which the action occurs to know if it's being done right.\n  * The environment is an *implicit* parameter on the action.  Making the environment explicit makes it referentially transparent.","source":"_posts/Functional-vs-Imperative-Environments.md","raw":"---\ntitle: Functional vs. Imperative Environments\ndate: 2013-02-23 00:00:00\ntags:\n- Functional Programming\n---\nWhat is the primary building block of your programs?\n\n* *Functional*\n  * Mostly functional with imperative where needed.  Managing what state is intrinsic, necessary, and appropriate.\n  * The Basic building block is a referentially transparent function.  A function which returns the same output per given input every time.\n  * The environment does not affect the output of a  referentially transparent function so we can reason about it independently.\n\n* *Imperative*\n  * The Basic building block is a stateful action (object in OO).\n  * Without environmental knowledge it's impossible to reason about and test.\n  * You must be able to control the environment in which the action occurs to know if it's being done right.\n  * The environment is an *implicit* parameter on the action.  Making the environment explicit makes it referentially transparent.","slug":"Functional-vs-Imperative-Environments","published":1,"updated":"2016-04-14T14:58:28.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjua0026y0kwfku2jyu2","content":"<p>What is the primary building block of your programs?</p>\n<ul>\n<li><p><em>Functional</em></p>\n<ul>\n<li>Mostly functional with imperative where needed.  Managing what state is intrinsic, necessary, and appropriate.</li>\n<li>The Basic building block is a referentially transparent function.  A function which returns the same output per given input every time.</li>\n<li>The environment does not affect the output of a  referentially transparent function so we can reason about it independently.</li>\n</ul>\n</li>\n<li><p><em>Imperative</em></p>\n<ul>\n<li>The Basic building block is a stateful action (object in OO).</li>\n<li>Without environmental knowledge it’s impossible to reason about and test.</li>\n<li>You must be able to control the environment in which the action occurs to know if it’s being done right.</li>\n<li>The environment is an <em>implicit</em> parameter on the action.  Making the environment explicit makes it referentially transparent.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>What is the primary building block of your programs?</p>\n<ul>\n<li><p><em>Functional</em></p>\n<ul>\n<li>Mostly functional with imperative where needed.  Managing what state is intrinsic, necessary, and appropriate.</li>\n<li>The Basic building block is a referentially transparent function.  A function which returns the same output per given input every time.</li>\n<li>The environment does not affect the output of a  referentially transparent function so we can reason about it independently.</li>\n</ul>\n</li>\n<li><p><em>Imperative</em></p>\n<ul>\n<li>The Basic building block is a stateful action (object in OO).</li>\n<li>Without environmental knowledge it’s impossible to reason about and test.</li>\n<li>You must be able to control the environment in which the action occurs to know if it’s being done right.</li>\n<li>The environment is an <em>implicit</em> parameter on the action.  Making the environment explicit makes it referentially transparent.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Float Toy","date":"2016-04-25T10:30:30.000Z","link":"https://evanw.github.io/float-toy/","_content":"Fun [Site](https://evanw.github.io/float-toy/) showing how floating point bit patterns work.  Here is a screen shot of an example from [Wikipedia](https://en.wikipedia.org/wiki/Single-precision_floating-point_format).\n\n![](/images/FloatToyScreenShot.png)","source":"_posts/Float-Toy.md","raw":"---\ntitle: Float Toy\ndate: 2016-04-25 10:30:30\nlink: https://evanw.github.io/float-toy/\ntags:\n- Visual Learning\n---\nFun [Site](https://evanw.github.io/float-toy/) showing how floating point bit patterns work.  Here is a screen shot of an example from [Wikipedia](https://en.wikipedia.org/wiki/Single-precision_floating-point_format).\n\n![](/images/FloatToyScreenShot.png)","slug":"Float-Toy","published":1,"updated":"2016-04-25T15:50:37.135Z","comments":1,"layout":"post","photos":[],"_id":"cioeidjub0028y0kwlaj0uq3s","content":"<p>Fun <a href=\"https://evanw.github.io/float-toy/\" target=\"_blank\" rel=\"external\">Site</a> showing how floating point bit patterns work.  Here is a screen shot of an example from <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\" target=\"_blank\" rel=\"external\">Wikipedia</a>.</p>\n<p><img src=\"/images/FloatToyScreenShot.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>Fun <a href=\"https://evanw.github.io/float-toy/\">Site</a> showing how floating point bit patterns work.  Here is a screen shot of an example from <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\">Wikipedia</a>.</p>\n<p><img src=\"/images/FloatToyScreenShot.png\" alt=\"\"></p>\n"},{"title":"Google I/O Extended 2014","date":"2014-06-25T00:00:00.000Z","_content":"I attended the Google I/O Extended conference at Google's KW location.  The main theme this year seemed to be about getting the rest of the world online.\n\n*Event Notes*\n* Currently there are 2.6 billion people on the internet, but there will be 5 billion in the future.\n* Free and open information access can lead to regime change.\n* +4% GDP due to internet access.\n* It's not just search.  We have to drive the information by making it relevant and fun.\n* Information access -> open communication -> drives change by allowing silent groups to have a voice.\n* ~300 people at the KW office.\n* Most effective ad length on YouTube is 12 seconds maximum.\n* google.com/design - Unified design guidelines that are driven by material design.\n* Minimize interactions with the device by showing relevant data first.  Use sensors to understand the user's current context.\n* Maps Features: Fast, Accurate, Easy\n* One Android SDK for all platforms: TV, phone, car, watch, etc.\n* Chromebook Features: Speed, Simplicity, Security\n* Google Drive encrypts your data in both during transit and storage.\n* **Google cloud**\n  * Allows small teams to run big operations.\n  * Cloud.Debug allows live debugging on servers\n  * Request tracing to see all service requests\n  * Can set custom alerts on metrics\n* **Cloud DataFlow**\n  * Same code for both batch and streaming\n  * Parallel data pipelines.\n  * One pipeline for both batch (ETL) and streaming (continuous analysis).\n* <u>Blink</u> - Chromes rendering engine\n* **Cross Platform Design**\n  * [Link](http://www.google.com/design/spec)\n  * Material Metaphor: Shared experience, Shared knowledge, back story for design, pre-defined information.\n  * Ex: Paper has a long history, exists in the world, is tangible.\n  * Magical Material - Not for the sake of artifice but for information.  Ex: on touch the surface rises to the finger.\n  * One typeface with various sizes and weights.\n  * Use a color hierarchy to focus the gaze.\n  * Material lives at the same scale as the device and expands to fill space.\n  * Obey physics so no teleporting.","source":"_posts/Google-I-O-Extended-2014.md","raw":"title: Google I/O Extended 2014\ndate: 2014-06-25 00:00:00\ntags:\n  - Conferences\n---\nI attended the Google I/O Extended conference at Google's KW location.  The main theme this year seemed to be about getting the rest of the world online.\n\n*Event Notes*\n* Currently there are 2.6 billion people on the internet, but there will be 5 billion in the future.\n* Free and open information access can lead to regime change.\n* +4% GDP due to internet access.\n* It's not just search.  We have to drive the information by making it relevant and fun.\n* Information access -> open communication -> drives change by allowing silent groups to have a voice.\n* ~300 people at the KW office.\n* Most effective ad length on YouTube is 12 seconds maximum.\n* google.com/design - Unified design guidelines that are driven by material design.\n* Minimize interactions with the device by showing relevant data first.  Use sensors to understand the user's current context.\n* Maps Features: Fast, Accurate, Easy\n* One Android SDK for all platforms: TV, phone, car, watch, etc.\n* Chromebook Features: Speed, Simplicity, Security\n* Google Drive encrypts your data in both during transit and storage.\n* **Google cloud**\n  * Allows small teams to run big operations.\n  * Cloud.Debug allows live debugging on servers\n  * Request tracing to see all service requests\n  * Can set custom alerts on metrics\n* **Cloud DataFlow**\n  * Same code for both batch and streaming\n  * Parallel data pipelines.\n  * One pipeline for both batch (ETL) and streaming (continuous analysis).\n* <u>Blink</u> - Chromes rendering engine\n* **Cross Platform Design**\n  * [Link](http://www.google.com/design/spec)\n  * Material Metaphor: Shared experience, Shared knowledge, back story for design, pre-defined information.\n  * Ex: Paper has a long history, exists in the world, is tangible.\n  * Magical Material - Not for the sake of artifice but for information.  Ex: on touch the surface rises to the finger.\n  * One typeface with various sizes and weights.\n  * Use a color hierarchy to focus the gaze.\n  * Material lives at the same scale as the device and expands to fill space.\n  * Obey physics so no teleporting.","slug":"Google-I-O-Extended-2014","published":1,"updated":"2016-05-19T16:27:54.266Z","_id":"cioeidjud0029y0kw82f1b9d4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I attended the Google I/O Extended conference at Google’s KW location.  The main theme this year seemed to be about getting the rest of the world online.</p>\n<p><em>Event Notes</em></p>\n<ul>\n<li>Currently there are 2.6 billion people on the internet, but there will be 5 billion in the future.</li>\n<li>Free and open information access can lead to regime change.</li>\n<li>+4% GDP due to internet access.</li>\n<li>It’s not just search.  We have to drive the information by making it relevant and fun.</li>\n<li>Information access -&gt; open communication -&gt; drives change by allowing silent groups to have a voice.</li>\n<li>~300 people at the KW office.</li>\n<li>Most effective ad length on YouTube is 12 seconds maximum.</li>\n<li>google.com/design - Unified design guidelines that are driven by material design.</li>\n<li>Minimize interactions with the device by showing relevant data first.  Use sensors to understand the user’s current context.</li>\n<li>Maps Features: Fast, Accurate, Easy</li>\n<li>One Android SDK for all platforms: TV, phone, car, watch, etc.</li>\n<li>Chromebook Features: Speed, Simplicity, Security</li>\n<li>Google Drive encrypts your data in both during transit and storage.</li>\n<li><strong>Google cloud</strong><ul>\n<li>Allows small teams to run big operations.</li>\n<li>Cloud.Debug allows live debugging on servers</li>\n<li>Request tracing to see all service requests</li>\n<li>Can set custom alerts on metrics</li>\n</ul>\n</li>\n<li><strong>Cloud DataFlow</strong><ul>\n<li>Same code for both batch and streaming</li>\n<li>Parallel data pipelines.</li>\n<li>One pipeline for both batch (ETL) and streaming (continuous analysis).</li>\n</ul>\n</li>\n<li><u>Blink</u> - Chromes rendering engine</li>\n<li><strong>Cross Platform Design</strong><ul>\n<li><a href=\"http://www.google.com/design/spec\" target=\"_blank\" rel=\"external\">Link</a></li>\n<li>Material Metaphor: Shared experience, Shared knowledge, back story for design, pre-defined information.</li>\n<li>Ex: Paper has a long history, exists in the world, is tangible.</li>\n<li>Magical Material - Not for the sake of artifice but for information.  Ex: on touch the surface rises to the finger.</li>\n<li>One typeface with various sizes and weights.</li>\n<li>Use a color hierarchy to focus the gaze.</li>\n<li>Material lives at the same scale as the device and expands to fill space.</li>\n<li>Obey physics so no teleporting.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>I attended the Google I/O Extended conference at Google’s KW location.  The main theme this year seemed to be about getting the rest of the world online.</p>\n<p><em>Event Notes</em></p>\n<ul>\n<li>Currently there are 2.6 billion people on the internet, but there will be 5 billion in the future.</li>\n<li>Free and open information access can lead to regime change.</li>\n<li>+4% GDP due to internet access.</li>\n<li>It’s not just search.  We have to drive the information by making it relevant and fun.</li>\n<li>Information access -&gt; open communication -&gt; drives change by allowing silent groups to have a voice.</li>\n<li>~300 people at the KW office.</li>\n<li>Most effective ad length on YouTube is 12 seconds maximum.</li>\n<li>google.com/design - Unified design guidelines that are driven by material design.</li>\n<li>Minimize interactions with the device by showing relevant data first.  Use sensors to understand the user’s current context.</li>\n<li>Maps Features: Fast, Accurate, Easy</li>\n<li>One Android SDK for all platforms: TV, phone, car, watch, etc.</li>\n<li>Chromebook Features: Speed, Simplicity, Security</li>\n<li>Google Drive encrypts your data in both during transit and storage.</li>\n<li><strong>Google cloud</strong><ul>\n<li>Allows small teams to run big operations.</li>\n<li>Cloud.Debug allows live debugging on servers</li>\n<li>Request tracing to see all service requests</li>\n<li>Can set custom alerts on metrics</li>\n</ul>\n</li>\n<li><strong>Cloud DataFlow</strong><ul>\n<li>Same code for both batch and streaming</li>\n<li>Parallel data pipelines.</li>\n<li>One pipeline for both batch (ETL) and streaming (continuous analysis).</li>\n</ul>\n</li>\n<li><u>Blink</u> - Chromes rendering engine</li>\n<li><strong>Cross Platform Design</strong><ul>\n<li><a href=\"http://www.google.com/design/spec\">Link</a></li>\n<li>Material Metaphor: Shared experience, Shared knowledge, back story for design, pre-defined information.</li>\n<li>Ex: Paper has a long history, exists in the world, is tangible.</li>\n<li>Magical Material - Not for the sake of artifice but for information.  Ex: on touch the surface rises to the finger.</li>\n<li>One typeface with various sizes and weights.</li>\n<li>Use a color hierarchy to focus the gaze.</li>\n<li>Material lives at the same scale as the device and expands to fill space.</li>\n<li>Obey physics so no teleporting.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Growing Object-Oriented Software, Guided by Tests","date":"2015-08-27T00:00:00.000Z","_content":"- Does a great job of showing how to use TDD and interfaces to build an application in pieces.\n- I think it presents a more realistic picture of software development than most books by showing you how code evolves as you work on it.\n- The case study section has long stretches of implementation details which I felt obscured the important points.\n\n[Goodreads](https://www.goodreads.com/book/show/4268826-growing-object-oriented-software-guided-by-tests?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Growing-Object-Oriented-Software-Guided-by-Tests.md","raw":"---\ntitle: 'Growing Object-Oriented Software, Guided by Tests'\ndate: 2015-08-27 00:00:00\ntags:\n- Books\n- μReview\n---\n- Does a great job of showing how to use TDD and interfaces to build an application in pieces.\n- I think it presents a more realistic picture of software development than most books by showing you how code evolves as you work on it.\n- The case study section has long stretches of implementation details which I felt obscured the important points.\n\n[Goodreads](https://www.goodreads.com/book/show/4268826-growing-object-oriented-software-guided-by-tests?utm_medium=api&amp;utm_source=blog_book)","slug":"Growing-Object-Oriented-Software-Guided-by-Tests","published":1,"updated":"2016-04-14T14:58:17.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjue002by0kws1p84o5n","content":"<ul>\n<li>Does a great job of showing how to use TDD and interfaces to build an application in pieces.</li>\n<li>I think it presents a more realistic picture of software development than most books by showing you how code evolves as you work on it.</li>\n<li>The case study section has long stretches of implementation details which I felt obscured the important points.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/4268826-growing-object-oriented-software-guided-by-tests?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<ul>\n<li>Does a great job of showing how to use TDD and interfaces to build an application in pieces.</li>\n<li>I think it presents a more realistic picture of software development than most books by showing you how code evolves as you work on it.</li>\n<li>The case study section has long stretches of implementation details which I felt obscured the important points.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/4268826-growing-object-oriented-software-guided-by-tests?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Google I/O Extended 2016","date":"2016-05-19T00:00:00.000Z","_content":"Yesterday I attended the Google I/O Extended conference at their KW office.  This year the focus seemed to be on using AI and machine learning to improve user experiences.\n\n*Event Notes*\n1. **Welcome Remarks**\n  * The KW office has teams working on Chrome, Ads, Fiber and OnHub.\n  * Gmail has 1 billion users worldwide.\n2. **Startup Panel**\n  * Hiring for startups is hard.  Need to be more aggressive to find the right people.\n  * Startup leadership can go on too long.  If things haven't been working there is a point when leadership needs to change.\n  * When you take every deal that gets offered, you end doing a lot of custom/one-off work that consumes time.  It's hard to turn down new opportunities even when they are more work then they are worth in the long run.\n  * When you work for a small company it's easier to have a unified view of what your product is and what the company represents.  There are a lot of passionate people at Google, and their passion is equally as capable as yours.\n  * When you have a large existing customer base you can't just roll changes that affect user experience.  You have to run experiments.\n  * Don't cast a wide net when asking for help.  Target specific people who may be able to help you.\n  * Don't buy into the message that says Canadian's don't make good entrepreneurs and don't aim high enough.  Be serious about being bold.\n3. **Genomics & Cloud Platform**\n  * Medical breakthroughs will come from the intersection of life science and data science.\n  * Genomics API gives you higher level computational primitives and build applications that are infrastructure agnostic.\n  * Instead of turtles, it's pipelines all the way down.\n  * It's hard to link genome differences to phenotype differences.  Instead, people are linking genome differences to differences in how proteins are expressed and then linking the protein differences to phenotype.\n4. **Keynote (Streamed)**\n  * Search needs to be assistive it's not enough to show people links when they search anymore.  \n  * <u>Google Assistant</u> - Give each user their own personal Google.\n  * Use natural language processing to give a conversational understanding.  The goal is to understand the context and turn isolated questions into a conversation.\n  * Every conversation is different = every context is different.\n  * Computing is an *ambient experience* that spans car, phone, watch, home, tv, etc.\n  * Google home is possible because of Google's leadership in far-field voice recognition.\n  * Approach and existing area from a machine learning perspective.  Use AI and machine learning to make smarter more assistive applications.\n  * Photo + machine learning = automatically applying labels to photos.\n  * Mobile + machine learning = the \"Allo\" smart messaging app which suggests replies as you go based on your previous behavior.\n  * <u>Quick Protocol</u> - Establish E2E encrypted connection in one round trip.\n  * Proactively monitor bandwidth on wifi/mobile, so video chats are the right quality before you even make a call.\n  * <u>Safty Net</u> - Use machine learning to monitor application behavior to spot malicious or misbehaving applications.\n  * VR requires low latency between your head moving and the display updating to provide an immersive experience.\n  * Android studio test recording allows you to turn your navigation through an application into an automated expresso test.  You can then run this on the cloud test platform to test on multiple devices at once.\n  * <u>Cross network attribution</u> - Figuring out where users are coming from.\n  * Cloud messaging service allows 1 million apps to send 170 million messages every day.\n  * <u>Instant Apps</u> - Breaking applications into modules that can be download and run without installing the application.  Showed an example of using an NFC-enabled phone to tap a car parking meter to pay.\n  * Can humans achieve more with machine learning and AI assisting them?\n5. **Mobile Fireside**\n  * Firebase is a set of complimentary SDKs to help your mobile application develop, grow, and earn.\n  * Analytics only shows aggregates.  To protect privacy a minimum number of users is required to see certain metrics.  Example: 1000 to see gender distribution of users.\n6. **Google Stack Driver**\n  * DevOps information: logging, monitoring, latency reporting, etc.\n  * Allows centralized DevOps for hybrid Google Cloud & AWS deployments.\n  * Gather stats from applications, systems, servers to allow visualization, analysis, and notifications.\n  * <u>Probing infrastructure</u> - Assess application health using ping or synthetic transactions.\n7. **Chrome Input Performance**\n  * Local team works on input, graphics, performance, physical web, media, UI, Android port, virtual reality.\n  * Goal is to reduce the friction between a web app and native app.\n  * How long is an event queued before browser handles it?\n  * <u>Passive event listener</u> - Doesn't block while handling events.\n8. **How the Web Platform Evolves**\n  * Process to add new APIs: Identify problem -> build coalition -> design in public -> grow the circle -> implements and iterate -> ship -> standardize.\n  * It's critical to get web developers (the users) involved in the early stages.  It should be a collaborative process between browser developers and users.\n  * Advancing the web while not breaking stuff is hard.  You have to weigh each features improvement to the web against the risk of breaking existing behavior.\n  * Use a feature's rank (how often it's used) to figure out when it's safe to deprecate it.\n9. **Fiber Phone**\n  * Call a place, not a person\n  * <u>TR-69</u> - Device and retrieve it's own config from the system when plugged in.\n  * We aren't going to blame the user for having a bad experience.  We are going to focus on fixing it.\n10. **OnHub**\n  * Everyone loves wifi but are frustrated and mystified when it doesn't work.\n  * Power cycle is the only hammer they can use to fix the internet.\n  * Make pretty to encourage better placement and performance.  Wifi works best with line-of-sight, so we don't want user's hiding it in the closet.\n  * <u>UX centric design</u> - Put most useful things out in front.  The goal is to delight and inform the users and let them feel like they know what is going on.\n  * Can run a speed test to validate you are getting the speed your ISP promises.\n  * Hub + machine learning = make everything get better over time by training models (in the cloud) to help predict and optimize radio settings.  The product has a passive antenna that looks at what channels are in use at what time of day.\n  * Provide the user with troubleshooting workflows and insights into problems.","source":"_posts/Google-I-O-Extended-2016.md","raw":"---\ntitle: Google I/O Extended 2016\ndate: 2016-05-19 00:00:00\ntags:\n  - Conferences\n---\nYesterday I attended the Google I/O Extended conference at their KW office.  This year the focus seemed to be on using AI and machine learning to improve user experiences.\n\n*Event Notes*\n1. **Welcome Remarks**\n  * The KW office has teams working on Chrome, Ads, Fiber and OnHub.\n  * Gmail has 1 billion users worldwide.\n2. **Startup Panel**\n  * Hiring for startups is hard.  Need to be more aggressive to find the right people.\n  * Startup leadership can go on too long.  If things haven't been working there is a point when leadership needs to change.\n  * When you take every deal that gets offered, you end doing a lot of custom/one-off work that consumes time.  It's hard to turn down new opportunities even when they are more work then they are worth in the long run.\n  * When you work for a small company it's easier to have a unified view of what your product is and what the company represents.  There are a lot of passionate people at Google, and their passion is equally as capable as yours.\n  * When you have a large existing customer base you can't just roll changes that affect user experience.  You have to run experiments.\n  * Don't cast a wide net when asking for help.  Target specific people who may be able to help you.\n  * Don't buy into the message that says Canadian's don't make good entrepreneurs and don't aim high enough.  Be serious about being bold.\n3. **Genomics & Cloud Platform**\n  * Medical breakthroughs will come from the intersection of life science and data science.\n  * Genomics API gives you higher level computational primitives and build applications that are infrastructure agnostic.\n  * Instead of turtles, it's pipelines all the way down.\n  * It's hard to link genome differences to phenotype differences.  Instead, people are linking genome differences to differences in how proteins are expressed and then linking the protein differences to phenotype.\n4. **Keynote (Streamed)**\n  * Search needs to be assistive it's not enough to show people links when they search anymore.  \n  * <u>Google Assistant</u> - Give each user their own personal Google.\n  * Use natural language processing to give a conversational understanding.  The goal is to understand the context and turn isolated questions into a conversation.\n  * Every conversation is different = every context is different.\n  * Computing is an *ambient experience* that spans car, phone, watch, home, tv, etc.\n  * Google home is possible because of Google's leadership in far-field voice recognition.\n  * Approach and existing area from a machine learning perspective.  Use AI and machine learning to make smarter more assistive applications.\n  * Photo + machine learning = automatically applying labels to photos.\n  * Mobile + machine learning = the \"Allo\" smart messaging app which suggests replies as you go based on your previous behavior.\n  * <u>Quick Protocol</u> - Establish E2E encrypted connection in one round trip.\n  * Proactively monitor bandwidth on wifi/mobile, so video chats are the right quality before you even make a call.\n  * <u>Safty Net</u> - Use machine learning to monitor application behavior to spot malicious or misbehaving applications.\n  * VR requires low latency between your head moving and the display updating to provide an immersive experience.\n  * Android studio test recording allows you to turn your navigation through an application into an automated expresso test.  You can then run this on the cloud test platform to test on multiple devices at once.\n  * <u>Cross network attribution</u> - Figuring out where users are coming from.\n  * Cloud messaging service allows 1 million apps to send 170 million messages every day.\n  * <u>Instant Apps</u> - Breaking applications into modules that can be download and run without installing the application.  Showed an example of using an NFC-enabled phone to tap a car parking meter to pay.\n  * Can humans achieve more with machine learning and AI assisting them?\n5. **Mobile Fireside**\n  * Firebase is a set of complimentary SDKs to help your mobile application develop, grow, and earn.\n  * Analytics only shows aggregates.  To protect privacy a minimum number of users is required to see certain metrics.  Example: 1000 to see gender distribution of users.\n6. **Google Stack Driver**\n  * DevOps information: logging, monitoring, latency reporting, etc.\n  * Allows centralized DevOps for hybrid Google Cloud & AWS deployments.\n  * Gather stats from applications, systems, servers to allow visualization, analysis, and notifications.\n  * <u>Probing infrastructure</u> - Assess application health using ping or synthetic transactions.\n7. **Chrome Input Performance**\n  * Local team works on input, graphics, performance, physical web, media, UI, Android port, virtual reality.\n  * Goal is to reduce the friction between a web app and native app.\n  * How long is an event queued before browser handles it?\n  * <u>Passive event listener</u> - Doesn't block while handling events.\n8. **How the Web Platform Evolves**\n  * Process to add new APIs: Identify problem -> build coalition -> design in public -> grow the circle -> implements and iterate -> ship -> standardize.\n  * It's critical to get web developers (the users) involved in the early stages.  It should be a collaborative process between browser developers and users.\n  * Advancing the web while not breaking stuff is hard.  You have to weigh each features improvement to the web against the risk of breaking existing behavior.\n  * Use a feature's rank (how often it's used) to figure out when it's safe to deprecate it.\n9. **Fiber Phone**\n  * Call a place, not a person\n  * <u>TR-69</u> - Device and retrieve it's own config from the system when plugged in.\n  * We aren't going to blame the user for having a bad experience.  We are going to focus on fixing it.\n10. **OnHub**\n  * Everyone loves wifi but are frustrated and mystified when it doesn't work.\n  * Power cycle is the only hammer they can use to fix the internet.\n  * Make pretty to encourage better placement and performance.  Wifi works best with line-of-sight, so we don't want user's hiding it in the closet.\n  * <u>UX centric design</u> - Put most useful things out in front.  The goal is to delight and inform the users and let them feel like they know what is going on.\n  * Can run a speed test to validate you are getting the speed your ISP promises.\n  * Hub + machine learning = make everything get better over time by training models (in the cloud) to help predict and optimize radio settings.  The product has a passive antenna that looks at what channels are in use at what time of day.\n  * Provide the user with troubleshooting workflows and insights into problems.","slug":"Google-I-O-Extended-2016","published":1,"updated":"2016-05-19T16:27:08.170Z","_id":"cioeidjuf002dy0kw7hvkjav7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Yesterday I attended the Google I/O Extended conference at their KW office.  This year the focus seemed to be on using AI and machine learning to improve user experiences.</p>\n<p><em>Event Notes</em></p>\n<ol>\n<li><strong>Welcome Remarks</strong><ul>\n<li>The KW office has teams working on Chrome, Ads, Fiber and OnHub.</li>\n<li>Gmail has 1 billion users worldwide.</li>\n</ul>\n</li>\n<li><strong>Startup Panel</strong><ul>\n<li>Hiring for startups is hard.  Need to be more aggressive to find the right people.</li>\n<li>Startup leadership can go on too long.  If things haven’t been working there is a point when leadership needs to change.</li>\n<li>When you take every deal that gets offered, you end doing a lot of custom/one-off work that consumes time.  It’s hard to turn down new opportunities even when they are more work then they are worth in the long run.</li>\n<li>When you work for a small company it’s easier to have a unified view of what your product is and what the company represents.  There are a lot of passionate people at Google, and their passion is equally as capable as yours.</li>\n<li>When you have a large existing customer base you can’t just roll changes that affect user experience.  You have to run experiments.</li>\n<li>Don’t cast a wide net when asking for help.  Target specific people who may be able to help you.</li>\n<li>Don’t buy into the message that says Canadian’s don’t make good entrepreneurs and don’t aim high enough.  Be serious about being bold.</li>\n</ul>\n</li>\n<li><strong>Genomics &amp; Cloud Platform</strong><ul>\n<li>Medical breakthroughs will come from the intersection of life science and data science.</li>\n<li>Genomics API gives you higher level computational primitives and build applications that are infrastructure agnostic.</li>\n<li>Instead of turtles, it’s pipelines all the way down.</li>\n<li>It’s hard to link genome differences to phenotype differences.  Instead, people are linking genome differences to differences in how proteins are expressed and then linking the protein differences to phenotype.</li>\n</ul>\n</li>\n<li><strong>Keynote (Streamed)</strong><ul>\n<li>Search needs to be assistive it’s not enough to show people links when they search anymore.  </li>\n<li><u>Google Assistant</u> - Give each user their own personal Google.</li>\n<li>Use natural language processing to give a conversational understanding.  The goal is to understand the context and turn isolated questions into a conversation.</li>\n<li>Every conversation is different = every context is different.</li>\n<li>Computing is an <em>ambient experience</em> that spans car, phone, watch, home, tv, etc.</li>\n<li>Google home is possible because of Google’s leadership in far-field voice recognition.</li>\n<li>Approach and existing area from a machine learning perspective.  Use AI and machine learning to make smarter more assistive applications.</li>\n<li>Photo + machine learning = automatically applying labels to photos.</li>\n<li>Mobile + machine learning = the “Allo” smart messaging app which suggests replies as you go based on your previous behavior.</li>\n<li><u>Quick Protocol</u> - Establish E2E encrypted connection in one round trip.</li>\n<li>Proactively monitor bandwidth on wifi/mobile, so video chats are the right quality before you even make a call.</li>\n<li><u>Safty Net</u> - Use machine learning to monitor application behavior to spot malicious or misbehaving applications.</li>\n<li>VR requires low latency between your head moving and the display updating to provide an immersive experience.</li>\n<li>Android studio test recording allows you to turn your navigation through an application into an automated expresso test.  You can then run this on the cloud test platform to test on multiple devices at once.</li>\n<li><u>Cross network attribution</u> - Figuring out where users are coming from.</li>\n<li>Cloud messaging service allows 1 million apps to send 170 million messages every day.</li>\n<li><u>Instant Apps</u> - Breaking applications into modules that can be download and run without installing the application.  Showed an example of using an NFC-enabled phone to tap a car parking meter to pay.</li>\n<li>Can humans achieve more with machine learning and AI assisting them?</li>\n</ul>\n</li>\n<li><strong>Mobile Fireside</strong><ul>\n<li>Firebase is a set of complimentary SDKs to help your mobile application develop, grow, and earn.</li>\n<li>Analytics only shows aggregates.  To protect privacy a minimum number of users is required to see certain metrics.  Example: 1000 to see gender distribution of users.</li>\n</ul>\n</li>\n<li><strong>Google Stack Driver</strong><ul>\n<li>DevOps information: logging, monitoring, latency reporting, etc.</li>\n<li>Allows centralized DevOps for hybrid Google Cloud &amp; AWS deployments.</li>\n<li>Gather stats from applications, systems, servers to allow visualization, analysis, and notifications.</li>\n<li><u>Probing infrastructure</u> - Assess application health using ping or synthetic transactions.</li>\n</ul>\n</li>\n<li><strong>Chrome Input Performance</strong><ul>\n<li>Local team works on input, graphics, performance, physical web, media, UI, Android port, virtual reality.</li>\n<li>Goal is to reduce the friction between a web app and native app.</li>\n<li>How long is an event queued before browser handles it?</li>\n<li><u>Passive event listener</u> - Doesn’t block while handling events.</li>\n</ul>\n</li>\n<li><strong>How the Web Platform Evolves</strong><ul>\n<li>Process to add new APIs: Identify problem -&gt; build coalition -&gt; design in public -&gt; grow the circle -&gt; implements and iterate -&gt; ship -&gt; standardize.</li>\n<li>It’s critical to get web developers (the users) involved in the early stages.  It should be a collaborative process between browser developers and users.</li>\n<li>Advancing the web while not breaking stuff is hard.  You have to weigh each features improvement to the web against the risk of breaking existing behavior.</li>\n<li>Use a feature’s rank (how often it’s used) to figure out when it’s safe to deprecate it.</li>\n</ul>\n</li>\n<li><strong>Fiber Phone</strong><ul>\n<li>Call a place, not a person</li>\n<li><u>TR-69</u> - Device and retrieve it’s own config from the system when plugged in.</li>\n<li>We aren’t going to blame the user for having a bad experience.  We are going to focus on fixing it.</li>\n</ul>\n</li>\n<li><strong>OnHub</strong><ul>\n<li>Everyone loves wifi but are frustrated and mystified when it doesn’t work.</li>\n<li>Power cycle is the only hammer they can use to fix the internet.</li>\n<li>Make pretty to encourage better placement and performance.  Wifi works best with line-of-sight, so we don’t want user’s hiding it in the closet.</li>\n<li><u>UX centric design</u> - Put most useful things out in front.  The goal is to delight and inform the users and let them feel like they know what is going on.</li>\n<li>Can run a speed test to validate you are getting the speed your ISP promises.</li>\n<li>Hub + machine learning = make everything get better over time by training models (in the cloud) to help predict and optimize radio settings.  The product has a passive antenna that looks at what channels are in use at what time of day.</li>\n<li>Provide the user with troubleshooting workflows and insights into problems.</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>Yesterday I attended the Google I/O Extended conference at their KW office.  This year the focus seemed to be on using AI and machine learning to improve user experiences.</p>\n<p><em>Event Notes</em></p>\n<ol>\n<li><strong>Welcome Remarks</strong><ul>\n<li>The KW office has teams working on Chrome, Ads, Fiber and OnHub.</li>\n<li>Gmail has 1 billion users worldwide.</li>\n</ul>\n</li>\n<li><strong>Startup Panel</strong><ul>\n<li>Hiring for startups is hard.  Need to be more aggressive to find the right people.</li>\n<li>Startup leadership can go on too long.  If things haven’t been working there is a point when leadership needs to change.</li>\n<li>When you take every deal that gets offered, you end doing a lot of custom/one-off work that consumes time.  It’s hard to turn down new opportunities even when they are more work then they are worth in the long run.</li>\n<li>When you work for a small company it’s easier to have a unified view of what your product is and what the company represents.  There are a lot of passionate people at Google, and their passion is equally as capable as yours.</li>\n<li>When you have a large existing customer base you can’t just roll changes that affect user experience.  You have to run experiments.</li>\n<li>Don’t cast a wide net when asking for help.  Target specific people who may be able to help you.</li>\n<li>Don’t buy into the message that says Canadian’s don’t make good entrepreneurs and don’t aim high enough.  Be serious about being bold.</li>\n</ul>\n</li>\n<li><strong>Genomics &amp; Cloud Platform</strong><ul>\n<li>Medical breakthroughs will come from the intersection of life science and data science.</li>\n<li>Genomics API gives you higher level computational primitives and build applications that are infrastructure agnostic.</li>\n<li>Instead of turtles, it’s pipelines all the way down.</li>\n<li>It’s hard to link genome differences to phenotype differences.  Instead, people are linking genome differences to differences in how proteins are expressed and then linking the protein differences to phenotype.</li>\n</ul>\n</li>\n<li><strong>Keynote (Streamed)</strong><ul>\n<li>Search needs to be assistive it’s not enough to show people links when they search anymore.  </li>\n<li><u>Google Assistant</u> - Give each user their own personal Google.</li>\n<li>Use natural language processing to give a conversational understanding.  The goal is to understand the context and turn isolated questions into a conversation.</li>\n<li>Every conversation is different = every context is different.</li>\n<li>Computing is an <em>ambient experience</em> that spans car, phone, watch, home, tv, etc.</li>\n<li>Google home is possible because of Google’s leadership in far-field voice recognition.</li>\n<li>Approach and existing area from a machine learning perspective.  Use AI and machine learning to make smarter more assistive applications.</li>\n<li>Photo + machine learning = automatically applying labels to photos.</li>\n<li>Mobile + machine learning = the “Allo” smart messaging app which suggests replies as you go based on your previous behavior.</li>\n<li><u>Quick Protocol</u> - Establish E2E encrypted connection in one round trip.</li>\n<li>Proactively monitor bandwidth on wifi/mobile, so video chats are the right quality before you even make a call.</li>\n<li><u>Safty Net</u> - Use machine learning to monitor application behavior to spot malicious or misbehaving applications.</li>\n<li>VR requires low latency between your head moving and the display updating to provide an immersive experience.</li>\n<li>Android studio test recording allows you to turn your navigation through an application into an automated expresso test.  You can then run this on the cloud test platform to test on multiple devices at once.</li>\n<li><u>Cross network attribution</u> - Figuring out where users are coming from.</li>\n<li>Cloud messaging service allows 1 million apps to send 170 million messages every day.</li>\n<li><u>Instant Apps</u> - Breaking applications into modules that can be download and run without installing the application.  Showed an example of using an NFC-enabled phone to tap a car parking meter to pay.</li>\n<li>Can humans achieve more with machine learning and AI assisting them?</li>\n</ul>\n</li>\n<li><strong>Mobile Fireside</strong><ul>\n<li>Firebase is a set of complimentary SDKs to help your mobile application develop, grow, and earn.</li>\n<li>Analytics only shows aggregates.  To protect privacy a minimum number of users is required to see certain metrics.  Example: 1000 to see gender distribution of users.</li>\n</ul>\n</li>\n<li><strong>Google Stack Driver</strong><ul>\n<li>DevOps information: logging, monitoring, latency reporting, etc.</li>\n<li>Allows centralized DevOps for hybrid Google Cloud &amp; AWS deployments.</li>\n<li>Gather stats from applications, systems, servers to allow visualization, analysis, and notifications.</li>\n<li><u>Probing infrastructure</u> - Assess application health using ping or synthetic transactions.</li>\n</ul>\n</li>\n<li><strong>Chrome Input Performance</strong><ul>\n<li>Local team works on input, graphics, performance, physical web, media, UI, Android port, virtual reality.</li>\n<li>Goal is to reduce the friction between a web app and native app.</li>\n<li>How long is an event queued before browser handles it?</li>\n<li><u>Passive event listener</u> - Doesn’t block while handling events.</li>\n</ul>\n</li>\n<li><strong>How the Web Platform Evolves</strong><ul>\n<li>Process to add new APIs: Identify problem -&gt; build coalition -&gt; design in public -&gt; grow the circle -&gt; implements and iterate -&gt; ship -&gt; standardize.</li>\n<li>It’s critical to get web developers (the users) involved in the early stages.  It should be a collaborative process between browser developers and users.</li>\n<li>Advancing the web while not breaking stuff is hard.  You have to weigh each features improvement to the web against the risk of breaking existing behavior.</li>\n<li>Use a feature’s rank (how often it’s used) to figure out when it’s safe to deprecate it.</li>\n</ul>\n</li>\n<li><strong>Fiber Phone</strong><ul>\n<li>Call a place, not a person</li>\n<li><u>TR-69</u> - Device and retrieve it’s own config from the system when plugged in.</li>\n<li>We aren’t going to blame the user for having a bad experience.  We are going to focus on fixing it.</li>\n</ul>\n</li>\n<li><strong>OnHub</strong><ul>\n<li>Everyone loves wifi but are frustrated and mystified when it doesn’t work.</li>\n<li>Power cycle is the only hammer they can use to fix the internet.</li>\n<li>Make pretty to encourage better placement and performance.  Wifi works best with line-of-sight, so we don’t want user’s hiding it in the closet.</li>\n<li><u>UX centric design</u> - Put most useful things out in front.  The goal is to delight and inform the users and let them feel like they know what is going on.</li>\n<li>Can run a speed test to validate you are getting the speed your ISP promises.</li>\n<li>Hub + machine learning = make everything get better over time by training models (in the cloud) to help predict and optimize radio settings.  The product has a passive antenna that looks at what channels are in use at what time of day.</li>\n<li>Provide the user with troubleshooting workflows and insights into problems.</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Avoid in-circuit testing (ICT) vias","date":"2009-01-09T00:00:00.000Z","_content":"I've been stuck on a problem with a tester for a digital signal processor board we build for a customer.\n\nThe failing test isn't even one of the complicated ones.  It's just looking for the proper voltage on a control line.  For the test, the DUT is re-booted to manufacturing mode, sent a control signal on the RS232 port which raises this control line to ~12 volts.  On boards that were failing the DAQ card was reading low voltages and sometimes no voltage.\n\nThe puzzling part is that when I re-test the same boards they will start passing.  On multiple occasions, people set aside stacks of failing boards and when I come over to look at them they pass.\n\nBy accident, I noticed that test set (customer supplied) is probing a via on the board instead of a proper test pad.  Normally that wouldn't be the end of the world but we started solder tenting vias near the power supply to prevent flux from coming up through them during wave soldering process and being left on the top of the board.  The tenting is preventing the probes from making contact during the initial test but scraping off enough material that when I come over to re-test them they start passing :-/.\n\nI'm not sure exactly how much time was wasted between myself and the customer on this one but it was more than they saved by cutting corners by probing a via instead of designing a proper test pad.","source":"_posts/Avoid-in-circuit-testing-ICT-vias.md","raw":"---\ntitle: Avoid in-circuit testing (ICT) vias\ndate: 2009-01-09 00:00:00\ntags:\n- Electronics\n---\nI've been stuck on a problem with a tester for a digital signal processor board we build for a customer.\n\nThe failing test isn't even one of the complicated ones.  It's just looking for the proper voltage on a control line.  For the test, the DUT is re-booted to manufacturing mode, sent a control signal on the RS232 port which raises this control line to ~12 volts.  On boards that were failing the DAQ card was reading low voltages and sometimes no voltage.\n\nThe puzzling part is that when I re-test the same boards they will start passing.  On multiple occasions, people set aside stacks of failing boards and when I come over to look at them they pass.\n\nBy accident, I noticed that test set (customer supplied) is probing a via on the board instead of a proper test pad.  Normally that wouldn't be the end of the world but we started solder tenting vias near the power supply to prevent flux from coming up through them during wave soldering process and being left on the top of the board.  The tenting is preventing the probes from making contact during the initial test but scraping off enough material that when I come over to re-test them they start passing :-/.\n\nI'm not sure exactly how much time was wasted between myself and the customer on this one but it was more than they saved by cutting corners by probing a via instead of designing a proper test pad.","slug":"Avoid-in-circuit-testing-ICT-vias","published":1,"updated":"2016-04-14T14:54:49.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjui002gy0kw2ossnpyh","content":"<p>I’ve been stuck on a problem with a tester for a digital signal processor board we build for a customer.</p>\n<p>The failing test isn’t even one of the complicated ones.  It’s just looking for the proper voltage on a control line.  For the test, the DUT is re-booted to manufacturing mode, sent a control signal on the RS232 port which raises this control line to ~12 volts.  On boards that were failing the DAQ card was reading low voltages and sometimes no voltage.</p>\n<p>The puzzling part is that when I re-test the same boards they will start passing.  On multiple occasions, people set aside stacks of failing boards and when I come over to look at them they pass.</p>\n<p>By accident, I noticed that test set (customer supplied) is probing a via on the board instead of a proper test pad.  Normally that wouldn’t be the end of the world but we started solder tenting vias near the power supply to prevent flux from coming up through them during wave soldering process and being left on the top of the board.  The tenting is preventing the probes from making contact during the initial test but scraping off enough material that when I come over to re-test them they start passing :-/.</p>\n<p>I’m not sure exactly how much time was wasted between myself and the customer on this one but it was more than they saved by cutting corners by probing a via instead of designing a proper test pad.</p>\n","excerpt":"","more":"<p>I’ve been stuck on a problem with a tester for a digital signal processor board we build for a customer.</p>\n<p>The failing test isn’t even one of the complicated ones.  It’s just looking for the proper voltage on a control line.  For the test, the DUT is re-booted to manufacturing mode, sent a control signal on the RS232 port which raises this control line to ~12 volts.  On boards that were failing the DAQ card was reading low voltages and sometimes no voltage.</p>\n<p>The puzzling part is that when I re-test the same boards they will start passing.  On multiple occasions, people set aside stacks of failing boards and when I come over to look at them they pass.</p>\n<p>By accident, I noticed that test set (customer supplied) is probing a via on the board instead of a proper test pad.  Normally that wouldn’t be the end of the world but we started solder tenting vias near the power supply to prevent flux from coming up through them during wave soldering process and being left on the top of the board.  The tenting is preventing the probes from making contact during the initial test but scraping off enough material that when I come over to re-test them they start passing :-/.</p>\n<p>I’m not sure exactly how much time was wasted between myself and the customer on this one but it was more than they saved by cutting corners by probing a via instead of designing a proper test pad.</p>\n"},{"title":"Going back to school","date":"2009-08-09T00:00:00.000Z","_content":"I'm enrolled at the University of Calgary in an electrical engineering post graduate diploma program with the eventual goal of switching into the biomedical engineering masters program.\n\nSo far I'm taking:\n* BMEN601 Fundamentals of Biomedical Engineering - an overview of the biomedical engineering field with focus on presenting and writing research papers.\n* ENEL563 Biomedical Signal Analysis - looks at the characteristics of different biomedical signals and how to use FIR filters and statistical analysis in Matlab to isolate and identify features of interest.\n* NANS301 Introduction to Nanoscience and Nanotechnology - An introductory course on nanoscience, nanotechnology, and nanomaterials.","source":"_posts/Going-Back-To-School.md","raw":"---\ntitle: Going back to school\ndate: 2009-08-09 00:00:00\ntags:\n- Courses\n---\nI'm enrolled at the University of Calgary in an electrical engineering post graduate diploma program with the eventual goal of switching into the biomedical engineering masters program.\n\nSo far I'm taking:\n* BMEN601 Fundamentals of Biomedical Engineering - an overview of the biomedical engineering field with focus on presenting and writing research papers.\n* ENEL563 Biomedical Signal Analysis - looks at the characteristics of different biomedical signals and how to use FIR filters and statistical analysis in Matlab to isolate and identify features of interest.\n* NANS301 Introduction to Nanoscience and Nanotechnology - An introductory course on nanoscience, nanotechnology, and nanomaterials.","slug":"Going-Back-To-School","published":1,"updated":"2016-04-14T14:58:24.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuj002iy0kwr92hmbtf","content":"<p>I’m enrolled at the University of Calgary in an electrical engineering post graduate diploma program with the eventual goal of switching into the biomedical engineering masters program.</p>\n<p>So far I’m taking:</p>\n<ul>\n<li>BMEN601 Fundamentals of Biomedical Engineering - an overview of the biomedical engineering field with focus on presenting and writing research papers.</li>\n<li>ENEL563 Biomedical Signal Analysis - looks at the characteristics of different biomedical signals and how to use FIR filters and statistical analysis in Matlab to isolate and identify features of interest.</li>\n<li>NANS301 Introduction to Nanoscience and Nanotechnology - An introductory course on nanoscience, nanotechnology, and nanomaterials.</li>\n</ul>\n","excerpt":"","more":"<p>I’m enrolled at the University of Calgary in an electrical engineering post graduate diploma program with the eventual goal of switching into the biomedical engineering masters program.</p>\n<p>So far I’m taking:</p>\n<ul>\n<li>BMEN601 Fundamentals of Biomedical Engineering - an overview of the biomedical engineering field with focus on presenting and writing research papers.</li>\n<li>ENEL563 Biomedical Signal Analysis - looks at the characteristics of different biomedical signals and how to use FIR filters and statistical analysis in Matlab to isolate and identify features of interest.</li>\n<li>NANS301 Introduction to Nanoscience and Nanotechnology - An introductory course on nanoscience, nanotechnology, and nanomaterials.</li>\n</ul>\n"},{"title":"Heterogeneous Parallel Programming","date":"2014-04-17T00:00:00.000Z","_content":"- About two weeks in I realized I had bitten off more than I could chew.  I passed (with distinction even) but I burned way more hours on this than I had budgeted for.  The course says 6-8hr/week but I was easily doubling that.  I really should have brushed up on my C and explored CUDA on my own first.\n- Changed how I look at processors and memory and I'm not sure that I'm better off after seeing how the sausage is made.  It's amazing computers work half as well as they do.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Heterogeneous%20Parallel%20Programming%202014%20-%20Coursera.pdf)\n[Course Link](https://www.coursera.org/course/hetero)","source":"_posts/Heterogeneous-Parallel-Programming.md","raw":"---\ntitle: Heterogeneous Parallel Programming\ndate: 2014-04-17 00:00:00\ntags:\n- Courses\n- MOOC\n- μReview\n---\n- About two weeks in I realized I had bitten off more than I could chew.  I passed (with distinction even) but I burned way more hours on this than I had budgeted for.  The course says 6-8hr/week but I was easily doubling that.  I really should have brushed up on my C and explored CUDA on my own first.\n- Changed how I look at processors and memory and I'm not sure that I'm better off after seeing how the sausage is made.  It's amazing computers work half as well as they do.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Heterogeneous%20Parallel%20Programming%202014%20-%20Coursera.pdf)\n[Course Link](https://www.coursera.org/course/hetero)","slug":"Heterogeneous-Parallel-Programming","published":1,"updated":"2016-04-14T14:58:10.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjul002ky0kwjfmi9eck","content":"<ul>\n<li>About two weeks in I realized I had bitten off more than I could chew.  I passed (with distinction even) but I burned way more hours on this than I had budgeted for.  The course says 6-8hr/week but I was easily doubling that.  I really should have brushed up on my C and explored CUDA on my own first.</li>\n<li>Changed how I look at processors and memory and I’m not sure that I’m better off after seeing how the sausage is made.  It’s amazing computers work half as well as they do.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Heterogeneous%20Parallel%20Programming%202014%20-%20Coursera.pdf\" target=\"_blank\" rel=\"external\">Certificate</a><br><a href=\"https://www.coursera.org/course/hetero\" target=\"_blank\" rel=\"external\">Course Link</a></p>\n","excerpt":"","more":"<ul>\n<li>About two weeks in I realized I had bitten off more than I could chew.  I passed (with distinction even) but I burned way more hours on this than I had budgeted for.  The course says 6-8hr/week but I was easily doubling that.  I really should have brushed up on my C and explored CUDA on my own first.</li>\n<li>Changed how I look at processors and memory and I’m not sure that I’m better off after seeing how the sausage is made.  It’s amazing computers work half as well as they do.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Heterogeneous%20Parallel%20Programming%202014%20-%20Coursera.pdf\">Certificate</a><br><a href=\"https://www.coursera.org/course/hetero\">Course Link</a></p>\n"},{"title":"Hiring Hacks: How Stack Overflow Interviews Engineers","date":"2015-12-16T00:00:00.000Z","_content":"Notes from a webinar by Matt Sherman, Engineering Manager at Stack Overflow, on the company’s technical interview process.\n\nKey Traits to look for: **Smart and gets things done**\n\n**General principals**\n  * Not a quiz! No gotchas! No brain teasers!\n  * You want to start a conversation that reveals how they think.\n  * Choose problems that lead to good conversations!\n  * Do you want to work with this person?\n  * Each interviewer must decide hire/no hire (no maybes)\n    * \"I think they are a good but not right for my team\" is a red flag.\n  * Interviewees (even no hires) should leave feeling they are respected!  \n    * They may be future customers.  \n    * They may have friends you may want to interview.\n  * Schedule 60 min but say 45 min so you can end early if they are struggling.  Be graceful about ending early.\n  * Look for depth, passion, interest in the product.  It's hard to look for a \"cultural fit\".\n  * Document technical questions and try to standardize interviews.\n  * Ask yourself: At the end of 60 min what information do I want to have about this person?\n  * Evaluate your own performance during interviews.  What could you have done better?\n  * It's better to not hire than accidently hire a bad candidate.  Err on the side of no hire.\n  * Shadowing - Follow experienced interviewer for 6 months.  Do mock interviews with co-workers.\n  * Interview cycle should take 2-3 weeks max.\n   * Feedback \n    * \"You're not there yet but we think you could be.\"\n    * Provide list of books to read and things to work on\n    * NOTHING PERSONAL! (Legal Issues) \n\t\n**Interview process**\n1. Resume Review\n  * **T**argeted - Is this a targeted application or a generic mass mailing?  Why do they want to work here?\n  * **E**experienced - 4+ yrs. full stack\n  * **D**epth - Tech is a stack of layers.  They use the software but they also know how to go deeper into guts of the system.\n  * **P**assion - Do they enjoy programming?  Do they make games?  Code for fun?\n  * **G**ets Things Done - Do they get things out the door?  Do they finish projects/products?\n2. Remote Code Screen\n  * 30 min over hangouts using a shared document.\n  * Should be intentionally easy.  \n  * Any day to day programmer should be able to do it.\n3. Smart interview\n  * In-depth algorithm question\n  * How much complexity can they keep in their head at once time?\n  * Encourage them to think out loud.  It's a conversation.\n  * Make it clear you want to know their thought process, not the answer.  It's fine if they get it wrong and go back.\n4. Gets things done interview\n  * A larger system design question.\n  * At an architectural/high-level design an entire application.\n  * Look at a system and understand what each part is and how they work together.\n  * DB (SQL) + Web Server (C#/Ruby/etc.) + Browser (JS/HTML)\n  * Look for both breadth and macro understanding.\n  * Full-stack - They could do the whole thing on their own.\n5. Product management interview\n  * Talk to the people who decide what the products are.\n  * Do they understand users and the business?\n  * Do they care about customers?\n  * How would you design and test this product?\n  * How would you know if this product was successful?\n  * A lot of engineers do product management at some point.\n6. Executive interviews\n  * It's your turn to sell yourself and convince them they want to work here.\n  * They probably have other offers.\n  * Start talking about a team they might fit on.\n7. Make an offer  \n  * Important to have a fast turnaround.\n\n**Finding candidates**\n* Have a good brand\n  * Recruiters are your brand! \n  * Go to events/meetups.\n  * Connect with people.\n* It's much easier to develop a brand if it's true :-)\n* The ideal situation is when an engineer already working at company recommends another engineer.\n\n[Event Link](http://event.on24.com/wcc/r/1102097/CEA34F635FCFA2F13182A0C1B6D33654)","source":"_posts/Hiring-Hacks-How-Stack-Overflow-Interviews-Engineers.md","raw":"---\ntitle: 'Hiring Hacks: How Stack Overflow Interviews Engineers'\ndate: 2015-12-16 00:00:00\ntags:\n- Interviewing\n---\nNotes from a webinar by Matt Sherman, Engineering Manager at Stack Overflow, on the company’s technical interview process.\n\nKey Traits to look for: **Smart and gets things done**\n\n**General principals**\n  * Not a quiz! No gotchas! No brain teasers!\n  * You want to start a conversation that reveals how they think.\n  * Choose problems that lead to good conversations!\n  * Do you want to work with this person?\n  * Each interviewer must decide hire/no hire (no maybes)\n    * \"I think they are a good but not right for my team\" is a red flag.\n  * Interviewees (even no hires) should leave feeling they are respected!  \n    * They may be future customers.  \n    * They may have friends you may want to interview.\n  * Schedule 60 min but say 45 min so you can end early if they are struggling.  Be graceful about ending early.\n  * Look for depth, passion, interest in the product.  It's hard to look for a \"cultural fit\".\n  * Document technical questions and try to standardize interviews.\n  * Ask yourself: At the end of 60 min what information do I want to have about this person?\n  * Evaluate your own performance during interviews.  What could you have done better?\n  * It's better to not hire than accidently hire a bad candidate.  Err on the side of no hire.\n  * Shadowing - Follow experienced interviewer for 6 months.  Do mock interviews with co-workers.\n  * Interview cycle should take 2-3 weeks max.\n   * Feedback \n    * \"You're not there yet but we think you could be.\"\n    * Provide list of books to read and things to work on\n    * NOTHING PERSONAL! (Legal Issues) \n\t\n**Interview process**\n1. Resume Review\n  * **T**argeted - Is this a targeted application or a generic mass mailing?  Why do they want to work here?\n  * **E**experienced - 4+ yrs. full stack\n  * **D**epth - Tech is a stack of layers.  They use the software but they also know how to go deeper into guts of the system.\n  * **P**assion - Do they enjoy programming?  Do they make games?  Code for fun?\n  * **G**ets Things Done - Do they get things out the door?  Do they finish projects/products?\n2. Remote Code Screen\n  * 30 min over hangouts using a shared document.\n  * Should be intentionally easy.  \n  * Any day to day programmer should be able to do it.\n3. Smart interview\n  * In-depth algorithm question\n  * How much complexity can they keep in their head at once time?\n  * Encourage them to think out loud.  It's a conversation.\n  * Make it clear you want to know their thought process, not the answer.  It's fine if they get it wrong and go back.\n4. Gets things done interview\n  * A larger system design question.\n  * At an architectural/high-level design an entire application.\n  * Look at a system and understand what each part is and how they work together.\n  * DB (SQL) + Web Server (C#/Ruby/etc.) + Browser (JS/HTML)\n  * Look for both breadth and macro understanding.\n  * Full-stack - They could do the whole thing on their own.\n5. Product management interview\n  * Talk to the people who decide what the products are.\n  * Do they understand users and the business?\n  * Do they care about customers?\n  * How would you design and test this product?\n  * How would you know if this product was successful?\n  * A lot of engineers do product management at some point.\n6. Executive interviews\n  * It's your turn to sell yourself and convince them they want to work here.\n  * They probably have other offers.\n  * Start talking about a team they might fit on.\n7. Make an offer  \n  * Important to have a fast turnaround.\n\n**Finding candidates**\n* Have a good brand\n  * Recruiters are your brand! \n  * Go to events/meetups.\n  * Connect with people.\n* It's much easier to develop a brand if it's true :-)\n* The ideal situation is when an engineer already working at company recommends another engineer.\n\n[Event Link](http://event.on24.com/wcc/r/1102097/CEA34F635FCFA2F13182A0C1B6D33654)","slug":"Hiring-Hacks-How-Stack-Overflow-Interviews-Engineers","published":1,"updated":"2016-04-14T17:05:59.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjun002ny0kw1ulfipui","content":"<p>Notes from a webinar by Matt Sherman, Engineering Manager at Stack Overflow, on the company’s technical interview process.</p>\n<p>Key Traits to look for: <strong>Smart and gets things done</strong></p>\n<p><strong>General principals</strong></p>\n<ul>\n<li>Not a quiz! No gotchas! No brain teasers!</li>\n<li>You want to start a conversation that reveals how they think.</li>\n<li>Choose problems that lead to good conversations!</li>\n<li>Do you want to work with this person?</li>\n<li>Each interviewer must decide hire/no hire (no maybes)<ul>\n<li>“I think they are a good but not right for my team” is a red flag.</li>\n</ul>\n</li>\n<li>Interviewees (even no hires) should leave feeling they are respected!  <ul>\n<li>They may be future customers.  </li>\n<li>They may have friends you may want to interview.</li>\n</ul>\n</li>\n<li>Schedule 60 min but say 45 min so you can end early if they are struggling.  Be graceful about ending early.</li>\n<li>Look for depth, passion, interest in the product.  It’s hard to look for a “cultural fit”.</li>\n<li>Document technical questions and try to standardize interviews.</li>\n<li>Ask yourself: At the end of 60 min what information do I want to have about this person?</li>\n<li>Evaluate your own performance during interviews.  What could you have done better?</li>\n<li>It’s better to not hire than accidently hire a bad candidate.  Err on the side of no hire.</li>\n<li>Shadowing - Follow experienced interviewer for 6 months.  Do mock interviews with co-workers.</li>\n<li>Interview cycle should take 2-3 weeks max.<ul>\n<li>Feedback </li>\n<li>“You’re not there yet but we think you could be.”</li>\n<li>Provide list of books to read and things to work on</li>\n<li>NOTHING PERSONAL! (Legal Issues) </li>\n</ul>\n</li>\n</ul>\n<p><strong>Interview process</strong></p>\n<ol>\n<li>Resume Review<ul>\n<li><strong>T</strong>argeted - Is this a targeted application or a generic mass mailing?  Why do they want to work here?</li>\n<li><strong>E</strong>experienced - 4+ yrs. full stack</li>\n<li><strong>D</strong>epth - Tech is a stack of layers.  They use the software but they also know how to go deeper into guts of the system.</li>\n<li><strong>P</strong>assion - Do they enjoy programming?  Do they make games?  Code for fun?</li>\n<li><strong>G</strong>ets Things Done - Do they get things out the door?  Do they finish projects/products?</li>\n</ul>\n</li>\n<li>Remote Code Screen<ul>\n<li>30 min over hangouts using a shared document.</li>\n<li>Should be intentionally easy.  </li>\n<li>Any day to day programmer should be able to do it.</li>\n</ul>\n</li>\n<li>Smart interview<ul>\n<li>In-depth algorithm question</li>\n<li>How much complexity can they keep in their head at once time?</li>\n<li>Encourage them to think out loud.  It’s a conversation.</li>\n<li>Make it clear you want to know their thought process, not the answer.  It’s fine if they get it wrong and go back.</li>\n</ul>\n</li>\n<li>Gets things done interview<ul>\n<li>A larger system design question.</li>\n<li>At an architectural/high-level design an entire application.</li>\n<li>Look at a system and understand what each part is and how they work together.</li>\n<li>DB (SQL) + Web Server (C#/Ruby/etc.) + Browser (JS/HTML)</li>\n<li>Look for both breadth and macro understanding.</li>\n<li>Full-stack - They could do the whole thing on their own.</li>\n</ul>\n</li>\n<li>Product management interview<ul>\n<li>Talk to the people who decide what the products are.</li>\n<li>Do they understand users and the business?</li>\n<li>Do they care about customers?</li>\n<li>How would you design and test this product?</li>\n<li>How would you know if this product was successful?</li>\n<li>A lot of engineers do product management at some point.</li>\n</ul>\n</li>\n<li>Executive interviews<ul>\n<li>It’s your turn to sell yourself and convince them they want to work here.</li>\n<li>They probably have other offers.</li>\n<li>Start talking about a team they might fit on.</li>\n</ul>\n</li>\n<li>Make an offer  <ul>\n<li>Important to have a fast turnaround.</li>\n</ul>\n</li>\n</ol>\n<p><strong>Finding candidates</strong></p>\n<ul>\n<li>Have a good brand<ul>\n<li>Recruiters are your brand! </li>\n<li>Go to events/meetups.</li>\n<li>Connect with people.</li>\n</ul>\n</li>\n<li>It’s much easier to develop a brand if it’s true :-)</li>\n<li>The ideal situation is when an engineer already working at company recommends another engineer.</li>\n</ul>\n<p><a href=\"http://event.on24.com/wcc/r/1102097/CEA34F635FCFA2F13182A0C1B6D33654\" target=\"_blank\" rel=\"external\">Event Link</a></p>\n","excerpt":"","more":"<p>Notes from a webinar by Matt Sherman, Engineering Manager at Stack Overflow, on the company’s technical interview process.</p>\n<p>Key Traits to look for: <strong>Smart and gets things done</strong></p>\n<p><strong>General principals</strong></p>\n<ul>\n<li>Not a quiz! No gotchas! No brain teasers!</li>\n<li>You want to start a conversation that reveals how they think.</li>\n<li>Choose problems that lead to good conversations!</li>\n<li>Do you want to work with this person?</li>\n<li>Each interviewer must decide hire/no hire (no maybes)<ul>\n<li>“I think they are a good but not right for my team” is a red flag.</li>\n</ul>\n</li>\n<li>Interviewees (even no hires) should leave feeling they are respected!  <ul>\n<li>They may be future customers.  </li>\n<li>They may have friends you may want to interview.</li>\n</ul>\n</li>\n<li>Schedule 60 min but say 45 min so you can end early if they are struggling.  Be graceful about ending early.</li>\n<li>Look for depth, passion, interest in the product.  It’s hard to look for a “cultural fit”.</li>\n<li>Document technical questions and try to standardize interviews.</li>\n<li>Ask yourself: At the end of 60 min what information do I want to have about this person?</li>\n<li>Evaluate your own performance during interviews.  What could you have done better?</li>\n<li>It’s better to not hire than accidently hire a bad candidate.  Err on the side of no hire.</li>\n<li>Shadowing - Follow experienced interviewer for 6 months.  Do mock interviews with co-workers.</li>\n<li>Interview cycle should take 2-3 weeks max.<ul>\n<li>Feedback </li>\n<li>“You’re not there yet but we think you could be.”</li>\n<li>Provide list of books to read and things to work on</li>\n<li>NOTHING PERSONAL! (Legal Issues) </li>\n</ul>\n</li>\n</ul>\n<p><strong>Interview process</strong></p>\n<ol>\n<li>Resume Review<ul>\n<li><strong>T</strong>argeted - Is this a targeted application or a generic mass mailing?  Why do they want to work here?</li>\n<li><strong>E</strong>experienced - 4+ yrs. full stack</li>\n<li><strong>D</strong>epth - Tech is a stack of layers.  They use the software but they also know how to go deeper into guts of the system.</li>\n<li><strong>P</strong>assion - Do they enjoy programming?  Do they make games?  Code for fun?</li>\n<li><strong>G</strong>ets Things Done - Do they get things out the door?  Do they finish projects/products?</li>\n</ul>\n</li>\n<li>Remote Code Screen<ul>\n<li>30 min over hangouts using a shared document.</li>\n<li>Should be intentionally easy.  </li>\n<li>Any day to day programmer should be able to do it.</li>\n</ul>\n</li>\n<li>Smart interview<ul>\n<li>In-depth algorithm question</li>\n<li>How much complexity can they keep in their head at once time?</li>\n<li>Encourage them to think out loud.  It’s a conversation.</li>\n<li>Make it clear you want to know their thought process, not the answer.  It’s fine if they get it wrong and go back.</li>\n</ul>\n</li>\n<li>Gets things done interview<ul>\n<li>A larger system design question.</li>\n<li>At an architectural/high-level design an entire application.</li>\n<li>Look at a system and understand what each part is and how they work together.</li>\n<li>DB (SQL) + Web Server (C#/Ruby/etc.) + Browser (JS/HTML)</li>\n<li>Look for both breadth and macro understanding.</li>\n<li>Full-stack - They could do the whole thing on their own.</li>\n</ul>\n</li>\n<li>Product management interview<ul>\n<li>Talk to the people who decide what the products are.</li>\n<li>Do they understand users and the business?</li>\n<li>Do they care about customers?</li>\n<li>How would you design and test this product?</li>\n<li>How would you know if this product was successful?</li>\n<li>A lot of engineers do product management at some point.</li>\n</ul>\n</li>\n<li>Executive interviews<ul>\n<li>It’s your turn to sell yourself and convince them they want to work here.</li>\n<li>They probably have other offers.</li>\n<li>Start talking about a team they might fit on.</li>\n</ul>\n</li>\n<li>Make an offer  <ul>\n<li>Important to have a fast turnaround.</li>\n</ul>\n</li>\n</ol>\n<p><strong>Finding candidates</strong></p>\n<ul>\n<li>Have a good brand<ul>\n<li>Recruiters are your brand! </li>\n<li>Go to events/meetups.</li>\n<li>Connect with people.</li>\n</ul>\n</li>\n<li>It’s much easier to develop a brand if it’s true :-)</li>\n<li>The ideal situation is when an engineer already working at company recommends another engineer.</li>\n</ul>\n<p><a href=\"http://event.on24.com/wcc/r/1102097/CEA34F635FCFA2F13182A0C1B6D33654\">Event Link</a></p>\n"},{"title":"Introduction to the Theory of Computation Review","date":"2015-02-01T00:00:00.000Z","_content":"A friend was cleaning our their bookshelf and gave me their spare copy of this book.  If you are interested in turning machines, intractability, P = NP or P != NP this is probably the textbook for you.  Not having a formal compute science background I had a hard time following some sections.\n\n[GoodReads](https://www.goodreads.com/book/show/22077089-introduction-to-the-theory-of-computation-by-sipser?utm_medium=api&amp;utm_source=blog_book)\n\n** Chapter Notes & Quotes **\n1. *Regular Languages*\n  * Pretend to be an automaton, you receive and input string and must determine whether it is a member of the language the automaton is supposed to recognize.  You see the symbols in the string one by one and after each, you must decide whether the string so far is in the language.\n  * <u>Deterministic finite automaton (DFA)</u> - When the machine is in a given state and given the next symbol we know with 100% certainty what the next state will be.\n  * <u>Nondeterministic finite automaton (NFA)</u> - When the machine is in a given state and given the next symbol several choices may exist for the next state.\n  * After an NFA reads a symbol it splits into multiple copies of itself and follows all possible paths in parallel.  Each copy proceeds as before, and if there are subsequent choices, it splits again.  If the next symbol doesn't appear on any of the arrows exiting this path's state, the copy dies.  If any copy are in the accept state then the input string is considered accepted.\n  * NFAs are like a parallel computation where several processes are running concurrently.\n  * Every deterministic finite automaton is automatically a nondeterministic finite automaton.\n  * Every NFA can be converted into an equivalent DFA.\n2. *Context-Free Languages*\n  * <u>Pushdown automata</u> - Like a nondeterministic finite automata but have a stack.\n3. *The Church-Turing Thesis*\n4. *Decidability*\n  * Certain problems are algorithmically solvable and others are not.\n  * Knowing a problem is unsolvable is useful because you know it must be simplified or altered before you can find a solution.\n  * Even some ordinary problems that people want to solve turn out to be computationally unsolvable.\n5. *Reducibility*\n  * Primary method for proving that a problem is computationally unsolvable.\n  * <u>Reduction</u> - Converting one problem to another problem so the solution to the first problem can be used to solve the second.  Ex: Problem of measuring rectangle's area reduced to measuring its width and height.\n6. *Advanced Topics in Computability Theory*\n  * Any incompressible string has roughly an equal number of 0s and 1s.\n7. *Time Complexity*\n  * Exponential time algorithms typically arise when we search through a space of solutions (brute-force search).\n  * <u>Polynomially Equivalent</u> - The algorithm can simulate another with only a polynomial increase in running time.\n  * <u>Polynomially Verifiablity</u> - Verifying the answer can be done in polynomial time.\n  * If a polynomial time algorithm exists for an NP-complete problem then all problems in NP would be polynomial time solvable.\n  * <u>P</u> = membership can be decided quickly.\n  * <u>NP</u> = membership can be verified quickly.\n8. *Space Complexity*\n9. *Intractability*\n10. *Advanced topics in complexity theory*\n  * <u>Optimization problems</u> seek to find the best solution among a set of possible solutions.\n  * <u>Fermat test</u> provides a probabilistic test for primality.   We call a number <u>pseudoprime</u> if it passes all Fermat tests.\n  * Gain evidence of a code's security by showing that the complexity of breaking the code is linked to a the complexity of some other problem for which there is compelling evidence of intractability.\n  * <u>Private-Key Cryptosystem</u> - The same key is used for both encryption and decryption.\n  * <u>Public-Key Cryptosystem</u> - The private decryption key is different than the public encryption key.","source":"_posts/Introduction-to-the-Theory-of-Computation-Review.md","raw":"---\ntitle: Introduction to the Theory of Computation Review\ndate: 2015-02-01 00:00:00\ntags:\n  - Books\n  - Reviews\n---\nA friend was cleaning our their bookshelf and gave me their spare copy of this book.  If you are interested in turning machines, intractability, P = NP or P != NP this is probably the textbook for you.  Not having a formal compute science background I had a hard time following some sections.\n\n[GoodReads](https://www.goodreads.com/book/show/22077089-introduction-to-the-theory-of-computation-by-sipser?utm_medium=api&amp;utm_source=blog_book)\n\n** Chapter Notes & Quotes **\n1. *Regular Languages*\n  * Pretend to be an automaton, you receive and input string and must determine whether it is a member of the language the automaton is supposed to recognize.  You see the symbols in the string one by one and after each, you must decide whether the string so far is in the language.\n  * <u>Deterministic finite automaton (DFA)</u> - When the machine is in a given state and given the next symbol we know with 100% certainty what the next state will be.\n  * <u>Nondeterministic finite automaton (NFA)</u> - When the machine is in a given state and given the next symbol several choices may exist for the next state.\n  * After an NFA reads a symbol it splits into multiple copies of itself and follows all possible paths in parallel.  Each copy proceeds as before, and if there are subsequent choices, it splits again.  If the next symbol doesn't appear on any of the arrows exiting this path's state, the copy dies.  If any copy are in the accept state then the input string is considered accepted.\n  * NFAs are like a parallel computation where several processes are running concurrently.\n  * Every deterministic finite automaton is automatically a nondeterministic finite automaton.\n  * Every NFA can be converted into an equivalent DFA.\n2. *Context-Free Languages*\n  * <u>Pushdown automata</u> - Like a nondeterministic finite automata but have a stack.\n3. *The Church-Turing Thesis*\n4. *Decidability*\n  * Certain problems are algorithmically solvable and others are not.\n  * Knowing a problem is unsolvable is useful because you know it must be simplified or altered before you can find a solution.\n  * Even some ordinary problems that people want to solve turn out to be computationally unsolvable.\n5. *Reducibility*\n  * Primary method for proving that a problem is computationally unsolvable.\n  * <u>Reduction</u> - Converting one problem to another problem so the solution to the first problem can be used to solve the second.  Ex: Problem of measuring rectangle's area reduced to measuring its width and height.\n6. *Advanced Topics in Computability Theory*\n  * Any incompressible string has roughly an equal number of 0s and 1s.\n7. *Time Complexity*\n  * Exponential time algorithms typically arise when we search through a space of solutions (brute-force search).\n  * <u>Polynomially Equivalent</u> - The algorithm can simulate another with only a polynomial increase in running time.\n  * <u>Polynomially Verifiablity</u> - Verifying the answer can be done in polynomial time.\n  * If a polynomial time algorithm exists for an NP-complete problem then all problems in NP would be polynomial time solvable.\n  * <u>P</u> = membership can be decided quickly.\n  * <u>NP</u> = membership can be verified quickly.\n8. *Space Complexity*\n9. *Intractability*\n10. *Advanced topics in complexity theory*\n  * <u>Optimization problems</u> seek to find the best solution among a set of possible solutions.\n  * <u>Fermat test</u> provides a probabilistic test for primality.   We call a number <u>pseudoprime</u> if it passes all Fermat tests.\n  * Gain evidence of a code's security by showing that the complexity of breaking the code is linked to a the complexity of some other problem for which there is compelling evidence of intractability.\n  * <u>Private-Key Cryptosystem</u> - The same key is used for both encryption and decryption.\n  * <u>Public-Key Cryptosystem</u> - The private decryption key is different than the public encryption key.","slug":"Introduction-to-the-Theory-of-Computation-Review","published":1,"updated":"2016-04-23T19:38:29.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjun002py0kwaqmamwdl","content":"<p>A friend was cleaning our their bookshelf and gave me their spare copy of this book.  If you are interested in turning machines, intractability, P = NP or P != NP this is probably the textbook for you.  Not having a formal compute science background I had a hard time following some sections.</p>\n<p><a href=\"https://www.goodreads.com/book/show/22077089-introduction-to-the-theory-of-computation-by-sipser?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">GoodReads</a></p>\n<p><strong> Chapter Notes &amp; Quotes </strong></p>\n<ol>\n<li><em>Regular Languages</em><ul>\n<li>Pretend to be an automaton, you receive and input string and must determine whether it is a member of the language the automaton is supposed to recognize.  You see the symbols in the string one by one and after each, you must decide whether the string so far is in the language.</li>\n<li><u>Deterministic finite automaton (DFA)</u> - When the machine is in a given state and given the next symbol we know with 100% certainty what the next state will be.</li>\n<li><u>Nondeterministic finite automaton (NFA)</u> - When the machine is in a given state and given the next symbol several choices may exist for the next state.</li>\n<li>After an NFA reads a symbol it splits into multiple copies of itself and follows all possible paths in parallel.  Each copy proceeds as before, and if there are subsequent choices, it splits again.  If the next symbol doesn’t appear on any of the arrows exiting this path’s state, the copy dies.  If any copy are in the accept state then the input string is considered accepted.</li>\n<li>NFAs are like a parallel computation where several processes are running concurrently.</li>\n<li>Every deterministic finite automaton is automatically a nondeterministic finite automaton.</li>\n<li>Every NFA can be converted into an equivalent DFA.</li>\n</ul>\n</li>\n<li><em>Context-Free Languages</em><ul>\n<li><u>Pushdown automata</u> - Like a nondeterministic finite automata but have a stack.</li>\n</ul>\n</li>\n<li><em>The Church-Turing Thesis</em></li>\n<li><em>Decidability</em><ul>\n<li>Certain problems are algorithmically solvable and others are not.</li>\n<li>Knowing a problem is unsolvable is useful because you know it must be simplified or altered before you can find a solution.</li>\n<li>Even some ordinary problems that people want to solve turn out to be computationally unsolvable.</li>\n</ul>\n</li>\n<li><em>Reducibility</em><ul>\n<li>Primary method for proving that a problem is computationally unsolvable.</li>\n<li><u>Reduction</u> - Converting one problem to another problem so the solution to the first problem can be used to solve the second.  Ex: Problem of measuring rectangle’s area reduced to measuring its width and height.</li>\n</ul>\n</li>\n<li><em>Advanced Topics in Computability Theory</em><ul>\n<li>Any incompressible string has roughly an equal number of 0s and 1s.</li>\n</ul>\n</li>\n<li><em>Time Complexity</em><ul>\n<li>Exponential time algorithms typically arise when we search through a space of solutions (brute-force search).</li>\n<li><u>Polynomially Equivalent</u> - The algorithm can simulate another with only a polynomial increase in running time.</li>\n<li><u>Polynomially Verifiablity</u> - Verifying the answer can be done in polynomial time.</li>\n<li>If a polynomial time algorithm exists for an NP-complete problem then all problems in NP would be polynomial time solvable.</li>\n<li><u>P</u> = membership can be decided quickly.</li>\n<li><u>NP</u> = membership can be verified quickly.</li>\n</ul>\n</li>\n<li><em>Space Complexity</em></li>\n<li><em>Intractability</em></li>\n<li><em>Advanced topics in complexity theory</em><ul>\n<li><u>Optimization problems</u> seek to find the best solution among a set of possible solutions.</li>\n<li><u>Fermat test</u> provides a probabilistic test for primality.   We call a number <u>pseudoprime</u> if it passes all Fermat tests.</li>\n<li>Gain evidence of a code’s security by showing that the complexity of breaking the code is linked to a the complexity of some other problem for which there is compelling evidence of intractability.</li>\n<li><u>Private-Key Cryptosystem</u> - The same key is used for both encryption and decryption.</li>\n<li><u>Public-Key Cryptosystem</u> - The private decryption key is different than the public encryption key.</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>A friend was cleaning our their bookshelf and gave me their spare copy of this book.  If you are interested in turning machines, intractability, P = NP or P != NP this is probably the textbook for you.  Not having a formal compute science background I had a hard time following some sections.</p>\n<p><a href=\"https://www.goodreads.com/book/show/22077089-introduction-to-the-theory-of-computation-by-sipser?utm_medium=api&amp;utm_source=blog_book\">GoodReads</a></p>\n<p><strong> Chapter Notes &amp; Quotes </strong></p>\n<ol>\n<li><em>Regular Languages</em><ul>\n<li>Pretend to be an automaton, you receive and input string and must determine whether it is a member of the language the automaton is supposed to recognize.  You see the symbols in the string one by one and after each, you must decide whether the string so far is in the language.</li>\n<li><u>Deterministic finite automaton (DFA)</u> - When the machine is in a given state and given the next symbol we know with 100% certainty what the next state will be.</li>\n<li><u>Nondeterministic finite automaton (NFA)</u> - When the machine is in a given state and given the next symbol several choices may exist for the next state.</li>\n<li>After an NFA reads a symbol it splits into multiple copies of itself and follows all possible paths in parallel.  Each copy proceeds as before, and if there are subsequent choices, it splits again.  If the next symbol doesn’t appear on any of the arrows exiting this path’s state, the copy dies.  If any copy are in the accept state then the input string is considered accepted.</li>\n<li>NFAs are like a parallel computation where several processes are running concurrently.</li>\n<li>Every deterministic finite automaton is automatically a nondeterministic finite automaton.</li>\n<li>Every NFA can be converted into an equivalent DFA.</li>\n</ul>\n</li>\n<li><em>Context-Free Languages</em><ul>\n<li><u>Pushdown automata</u> - Like a nondeterministic finite automata but have a stack.</li>\n</ul>\n</li>\n<li><em>The Church-Turing Thesis</em></li>\n<li><em>Decidability</em><ul>\n<li>Certain problems are algorithmically solvable and others are not.</li>\n<li>Knowing a problem is unsolvable is useful because you know it must be simplified or altered before you can find a solution.</li>\n<li>Even some ordinary problems that people want to solve turn out to be computationally unsolvable.</li>\n</ul>\n</li>\n<li><em>Reducibility</em><ul>\n<li>Primary method for proving that a problem is computationally unsolvable.</li>\n<li><u>Reduction</u> - Converting one problem to another problem so the solution to the first problem can be used to solve the second.  Ex: Problem of measuring rectangle’s area reduced to measuring its width and height.</li>\n</ul>\n</li>\n<li><em>Advanced Topics in Computability Theory</em><ul>\n<li>Any incompressible string has roughly an equal number of 0s and 1s.</li>\n</ul>\n</li>\n<li><em>Time Complexity</em><ul>\n<li>Exponential time algorithms typically arise when we search through a space of solutions (brute-force search).</li>\n<li><u>Polynomially Equivalent</u> - The algorithm can simulate another with only a polynomial increase in running time.</li>\n<li><u>Polynomially Verifiablity</u> - Verifying the answer can be done in polynomial time.</li>\n<li>If a polynomial time algorithm exists for an NP-complete problem then all problems in NP would be polynomial time solvable.</li>\n<li><u>P</u> = membership can be decided quickly.</li>\n<li><u>NP</u> = membership can be verified quickly.</li>\n</ul>\n</li>\n<li><em>Space Complexity</em></li>\n<li><em>Intractability</em></li>\n<li><em>Advanced topics in complexity theory</em><ul>\n<li><u>Optimization problems</u> seek to find the best solution among a set of possible solutions.</li>\n<li><u>Fermat test</u> provides a probabilistic test for primality.   We call a number <u>pseudoprime</u> if it passes all Fermat tests.</li>\n<li>Gain evidence of a code’s security by showing that the complexity of breaking the code is linked to a the complexity of some other problem for which there is compelling evidence of intractability.</li>\n<li><u>Private-Key Cryptosystem</u> - The same key is used for both encryption and decryption.</li>\n<li><u>Public-Key Cryptosystem</u> - The private decryption key is different than the public encryption key.</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Head First Design Patterns","date":"2015-02-01T00:00:00.000Z","_content":"I have a huge amount of respect for people who can distill ideas down into simple digestible parts.  The authors do an amazing job of communicating the ideas behind different patterns and illustrating the problems they are trying to solve.  I can easily recommend this to anyone interested in learning about design patterns.\n\n[Goodreads](https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Head-First-Design-Patterns.md","raw":"---\ntitle: Head First Design Patterns\ndate: 2015-02-01 00:00:00\ntags:\n- Books\n- μReview\n---\nI have a huge amount of respect for people who can distill ideas down into simple digestible parts.  The authors do an amazing job of communicating the ideas behind different patterns and illustrating the problems they are trying to solve.  I can easily recommend this to anyone interested in learning about design patterns.\n\n[Goodreads](https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book)","slug":"Head-First-Design-Patterns","published":1,"updated":"2016-04-14T14:58:13.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuo002sy0kwymp9ddjw","content":"<p>I have a huge amount of respect for people who can distill ideas down into simple digestible parts.  The authors do an amazing job of communicating the ideas behind different patterns and illustrating the problems they are trying to solve.  I can easily recommend this to anyone interested in learning about design patterns.</p>\n<p><a href=\"https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<p>I have a huge amount of respect for people who can distill ideas down into simple digestible parts.  The authors do an amazing job of communicating the ideas behind different patterns and illustrating the problems they are trying to solve.  I can easily recommend this to anyone interested in learning about design patterns.</p>\n<p><a href=\"https://www.goodreads.com/book/show/58128.Head_First_Design_Patterns?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Introduction to Meteor.js","date":"2013-03-16T00:00:00.000Z","_content":"Notes from a presentation on Meteor.js.  I'm dubious about this one.  History hasn't been kind to technologies that promise to hide/erase the boundaries between client and server.\n\n* A platform (client/server code are the same) as opposed to a framework (Angular/Backbone).\n* Data is stored on both client and server.\n* Publish/Subscribe model is used to move data between client and server.\n* Reactive Variables - Data binding technique.\n  * Reactive computations re-run when they change.\n  * Will re-render templates tied to the changed variable.\n  * Multiple widgets can react to variable change.\n* Latency Compensation - Mock server response while waiting for real one.\n  * If you know it will be OK 99% why not simulate that while you wait?\n  * Doesn't re-render when the real response arrives (provided success).\n* Node Fibers - Simulates multiple event loops on node's single event loop.\n* Folder structure matters: (/client/) to client, (/server/) to server, (/other/) sent to both, (/test/) only tests, (/public/) static assets, and (/private/) server only static assets.\n* Variable scope is per JS file if declared with var and entire application (both client and server) without var.  `What could go wrong??? :-/`\n  * This can cause compatibility issues with other libraries.","source":"_posts/Introduction-to-Meteor-js.md","raw":"---\ntitle: Introduction to Meteor.js\ndate: 2013-03-16 00:00:00\ntags:\n- Meetup\n- ECMAScript\n---\nNotes from a presentation on Meteor.js.  I'm dubious about this one.  History hasn't been kind to technologies that promise to hide/erase the boundaries between client and server.\n\n* A platform (client/server code are the same) as opposed to a framework (Angular/Backbone).\n* Data is stored on both client and server.\n* Publish/Subscribe model is used to move data between client and server.\n* Reactive Variables - Data binding technique.\n  * Reactive computations re-run when they change.\n  * Will re-render templates tied to the changed variable.\n  * Multiple widgets can react to variable change.\n* Latency Compensation - Mock server response while waiting for real one.\n  * If you know it will be OK 99% why not simulate that while you wait?\n  * Doesn't re-render when the real response arrives (provided success).\n* Node Fibers - Simulates multiple event loops on node's single event loop.\n* Folder structure matters: (/client/) to client, (/server/) to server, (/other/) sent to both, (/test/) only tests, (/public/) static assets, and (/private/) server only static assets.\n* Variable scope is per JS file if declared with var and entire application (both client and server) without var.  `What could go wrong??? :-/`\n  * This can cause compatibility issues with other libraries.","slug":"Introduction-to-Meteor-js","published":1,"updated":"2016-04-14T14:58:02.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuq002uy0kw0cim0jik","content":"<p>Notes from a presentation on Meteor.js.  I’m dubious about this one.  History hasn’t been kind to technologies that promise to hide/erase the boundaries between client and server.</p>\n<ul>\n<li>A platform (client/server code are the same) as opposed to a framework (Angular/Backbone).</li>\n<li>Data is stored on both client and server.</li>\n<li>Publish/Subscribe model is used to move data between client and server.</li>\n<li>Reactive Variables - Data binding technique.<ul>\n<li>Reactive computations re-run when they change.</li>\n<li>Will re-render templates tied to the changed variable.</li>\n<li>Multiple widgets can react to variable change.</li>\n</ul>\n</li>\n<li>Latency Compensation - Mock server response while waiting for real one.<ul>\n<li>If you know it will be OK 99% why not simulate that while you wait?</li>\n<li>Doesn’t re-render when the real response arrives (provided success).</li>\n</ul>\n</li>\n<li>Node Fibers - Simulates multiple event loops on node’s single event loop.</li>\n<li>Folder structure matters: (/client/) to client, (/server/) to server, (/other/) sent to both, (/test/) only tests, (/public/) static assets, and (/private/) server only static assets.</li>\n<li>Variable scope is per JS file if declared with var and entire application (both client and server) without var.  <code>What could go wrong??? :-/</code><ul>\n<li>This can cause compatibility issues with other libraries.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Notes from a presentation on Meteor.js.  I’m dubious about this one.  History hasn’t been kind to technologies that promise to hide/erase the boundaries between client and server.</p>\n<ul>\n<li>A platform (client/server code are the same) as opposed to a framework (Angular/Backbone).</li>\n<li>Data is stored on both client and server.</li>\n<li>Publish/Subscribe model is used to move data between client and server.</li>\n<li>Reactive Variables - Data binding technique.<ul>\n<li>Reactive computations re-run when they change.</li>\n<li>Will re-render templates tied to the changed variable.</li>\n<li>Multiple widgets can react to variable change.</li>\n</ul>\n</li>\n<li>Latency Compensation - Mock server response while waiting for real one.<ul>\n<li>If you know it will be OK 99% why not simulate that while you wait?</li>\n<li>Doesn’t re-render when the real response arrives (provided success).</li>\n</ul>\n</li>\n<li>Node Fibers - Simulates multiple event loops on node’s single event loop.</li>\n<li>Folder structure matters: (/client/) to client, (/server/) to server, (/other/) sent to both, (/test/) only tests, (/public/) static assets, and (/private/) server only static assets.</li>\n<li>Variable scope is per JS file if declared with var and entire application (both client and server) without var.  <code>What could go wrong??? :-/</code><ul>\n<li>This can cause compatibility issues with other libraries.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Left Pad Liberation","date":"2016-03-23T00:00:00.000Z","_content":"It looks like npm removed a module to avoid possible brand infringement leading to the author removing all of his modules from npm.  Among the modules removed is a widely used module called 'left-pad' which triggered a cascade of build failures in some of the most popular projects on npm.\n\nThere was an interesting point made that this may be a consequence having a global namespace for package names instead of an origin.package style namespace.  The argument being it would make it more obvious that Azer.kik didn't come from Kik (the company) removing possible confusion and weakening any brand infringement claims.\n\n[Author's Post](https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.iosd48tfi)\n[Register UK](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)","source":"_posts/Left-Pad-Libration.md","raw":"---\ntitle: Left Pad Liberation\ndate: 2016-03-23 00:00:00\ntags:\n- Web\n---\nIt looks like npm removed a module to avoid possible brand infringement leading to the author removing all of his modules from npm.  Among the modules removed is a widely used module called 'left-pad' which triggered a cascade of build failures in some of the most popular projects on npm.\n\nThere was an interesting point made that this may be a consequence having a global namespace for package names instead of an origin.package style namespace.  The argument being it would make it more obvious that Azer.kik didn't come from Kik (the company) removing possible confusion and weakening any brand infringement claims.\n\n[Author's Post](https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.iosd48tfi)\n[Register UK](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)","slug":"Left-Pad-Libration","published":1,"updated":"2016-04-14T14:57:56.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjur002xy0kw5tx8kxvg","content":"<p>It looks like npm removed a module to avoid possible brand infringement leading to the author removing all of his modules from npm.  Among the modules removed is a widely used module called ‘left-pad’ which triggered a cascade of build failures in some of the most popular projects on npm.</p>\n<p>There was an interesting point made that this may be a consequence having a global namespace for package names instead of an origin.package style namespace.  The argument being it would make it more obvious that Azer.kik didn’t come from Kik (the company) removing possible confusion and weakening any brand infringement claims.</p>\n<p><a href=\"https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.iosd48tfi\" target=\"_blank\" rel=\"external\">Author’s Post</a><br><a href=\"http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/\" target=\"_blank\" rel=\"external\">Register UK</a></p>\n","excerpt":"","more":"<p>It looks like npm removed a module to avoid possible brand infringement leading to the author removing all of his modules from npm.  Among the modules removed is a widely used module called ‘left-pad’ which triggered a cascade of build failures in some of the most popular projects on npm.</p>\n<p>There was an interesting point made that this may be a consequence having a global namespace for package names instead of an origin.package style namespace.  The argument being it would make it more obvious that Azer.kik didn’t come from Kik (the company) removing possible confusion and weakening any brand infringement claims.</p>\n<p><a href=\"https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.iosd48tfi\">Author’s Post</a><br><a href=\"http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/\">Register UK</a></p>\n"},{"title":"Exploring Classifying Documents Using Distribution Of Term Probabilities","date":"2016-04-07T00:00:00.000Z","_content":"I'm looking a way to classify product listings as either a product or a product accessory.  My current idea is to classify listings based on how their term probabilities are distributed.\n\nThe idea is to find the probability of each term in a listing and use them to build a histogram to get an idea how the common and unique terms are distributed for a listing.\n\n**Examples of common words**: camera, digital, zoom, optical, with, lcd, megapixel, lens, canon, black, and, mp, digitalkamera, cm, 27\n\n**Examples of unique words**: rings, eb575152vu, i9000, galaxys, 1080mah, funtionality, bp511a, zs7, enel5, 1100mah, mll3, 228825, np20, negative, scanner\n\nI'm assuming that a *typical* product listing generally has one model number (unique) and a bunch of common terms while an accessory listing usually has multiple model numbers.  If this is true it should be possible to classify a listing as either a product or a product accessory from the distribution of term probabilities.\n\nFrom what I'm seeing so far, it seems to be possible to classify accessory listings that have a high ratio of unique terms.\n\n**Note:** *I wanted to use a histogram but I couldn't get the hexo google charts plugin to make a histogram with a custom scale* 😕\n\n**Examples of product listings:**\n\n*samsung sh100 142mp wifi digital camera with 5x optical zoom in silver 8gb accessory kit*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 5, '#358452'\n  '25.0', 0, '#358452'\n  '12.05', 3, '#358452'\n  '6.025', 2, '#358452'\n  '3.0125', 1, '#358452'\n  '1.05625', 1, '#358452'\n  '0.7812', 1, '#358452'\n  '0.3906', 2, '#358452'\n  '0.1953', 0, '#358452'\n  '0.0976', 0, '#358452'\n  '0.0488', 0, '#358452'\n  '0.0244', 0, '#358452'\n  '0.0122', 0, '#358452'\n  '0.0061', 0, '#358452'\n  '0.0003', 0, '#358452'\n{% endgooglecharts %}\n\n*canon eos rebel t3i 18 mp cmos digital slr camera and digic 4 imaging body only*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 2, '#358452'\n  '25.0', 1, '#358452'\n  '12.05', 3, '#358452'\n  '6.025', 1, '#358452'\n  '3.0125', 4, '#358452'\n  '1.05625', 2, '#358452'\n  '0.7812', 0, '#358452'\n  '0.3906', 1, '#358452'\n  '0.1953', 0, '#358452'\n  '0.0976', 1, '#358452'\n  '0.0488', 1, '#358452'\n  '0.0244', 0, '#358452'\n  '0.0122', 0, '#358452'\n  '0.0061', 0, '#358452'\n  '0.0003', 0, '#358452'\n{% endgooglecharts %}\n\n**Examples of accessory listings:**\n\n*310 digital camera video mask now rated to 65 feet*)\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 0, '#B65C49'\n  '25.0', 2, '#B65C49'\n  '12.05', 0, '#B65C49'\n  '6.025', 0, '#B65C49'\n  '3.0125', 0, '#B65C49'\n  '1.05625', 0, '#B65C49'\n  '0.7812', 1, '#B65C49'\n  '0.3906', 0, '#B65C49'\n  '0.1953', 1, '#B65C49'\n  '0.0976', 2, '#B65C49'\n  '0.0488', 0, '#B65C49'\n  '0.0244', 0, '#B65C49'\n  '0.0122', 1, '#B65C49'\n  '0.0061', 0, '#B65C49'\n  '0.0003', 3, '#B65C49'\n{% endgooglecharts %}\n\n*optekas extreme travelers essentials kit by opteka package inlcudes excursion series c900 fullsize waterproof canvas bag 6501300mm and 500mm telephoto lenses heavy duty tripod and monopod and much more for pentax k10d k20d k100d k110d k200d ist digital slr cameras*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 0, '#B65C49'\n  '25.0', 1, '#B65C49'\n  '12.05', 0, '#B65C49'\n  '6.025', 5, '#B65C49'\n  '3.0125', 1, '#B65C49'\n  '1.05625', 2, '#B65C49'\n  '0.7812', 5, '#B65C49'\n  '0.3906', 1, '#B65C49'\n  '0.1953', 4, '#B65C49'\n  '0.0976', 1, '#B65C49'\n  '0.0488', 9, '#B65C49'\n  '0.0244', 3, '#B65C49'\n  '0.0122', 5, '#B65C49'\n  '0.0061', 3, '#B65C49'\n  '0.0003', 0, '#B65C49'\n{% endgooglecharts %}\n\nI had to use a nonlinear scale (I used powers of 2) for the histogram buckets or all the unique (small probability) words ended up in the same bucket.\n\nThere is a high rate of false positives (products being identified as accessories) when the listings are in languages other than English.  With so few non-English listings every word in these listings is unique across all listings.  It may be possible to figure out what language the listings are by using identifying listings which have unusual character n-grams distributions but I don't now if there will be enough text per listing to do this reliably.\n\n*jendigital jd 5200 z3 digitalkamera 50 2560 x 1920 32mb*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 0, '#B65C49'\n  '25.0', 0, '#B65C49'\n  '12.05', 0, '#B65C49'\n  '6.025', 0, '#B65C49'\n  '3.0125', 2, '#B65C49'\n  '1.05625', 1, '#B65C49'\n  '0.7812', 1, '#B65C49'\n  '0.3906', 0, '#B65C49'\n  '0.1953', 0, '#B65C49'\n  '0.0976', 0, '#B65C49'\n  '0.0488', 1, '#B65C49'\n  '0.0244', 1, '#B65C49'\n  '0.0122', 2, '#B65C49'\n  '0.0061', 0, '#B65C49'\n  '0.0003', 0, '#B65C49'\n{% endgooglecharts %}\n\n[The messy code](https://github.com/DForshner/CSharpExperiments/blob/master/ClassifyingDocumentsUsingDistributionOfTermUniqueness.cs)","source":"_posts/Exploring-Classifying-Documents-Using-Distribution-Of-Term-Uniqueness.md","raw":"---\ntitle: Exploring Classifying Documents Using Distribution Of Term Probabilities\ndate: 2016-04-07 00:00:00\ntags:\n- Natural Language Processing\n- Machine Learning\n- Exploring\n---\nI'm looking a way to classify product listings as either a product or a product accessory.  My current idea is to classify listings based on how their term probabilities are distributed.\n\nThe idea is to find the probability of each term in a listing and use them to build a histogram to get an idea how the common and unique terms are distributed for a listing.\n\n**Examples of common words**: camera, digital, zoom, optical, with, lcd, megapixel, lens, canon, black, and, mp, digitalkamera, cm, 27\n\n**Examples of unique words**: rings, eb575152vu, i9000, galaxys, 1080mah, funtionality, bp511a, zs7, enel5, 1100mah, mll3, 228825, np20, negative, scanner\n\nI'm assuming that a *typical* product listing generally has one model number (unique) and a bunch of common terms while an accessory listing usually has multiple model numbers.  If this is true it should be possible to classify a listing as either a product or a product accessory from the distribution of term probabilities.\n\nFrom what I'm seeing so far, it seems to be possible to classify accessory listings that have a high ratio of unique terms.\n\n**Note:** *I wanted to use a histogram but I couldn't get the hexo google charts plugin to make a histogram with a custom scale* 😕\n\n**Examples of product listings:**\n\n*samsung sh100 142mp wifi digital camera with 5x optical zoom in silver 8gb accessory kit*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 5, '#358452'\n  '25.0', 0, '#358452'\n  '12.05', 3, '#358452'\n  '6.025', 2, '#358452'\n  '3.0125', 1, '#358452'\n  '1.05625', 1, '#358452'\n  '0.7812', 1, '#358452'\n  '0.3906', 2, '#358452'\n  '0.1953', 0, '#358452'\n  '0.0976', 0, '#358452'\n  '0.0488', 0, '#358452'\n  '0.0244', 0, '#358452'\n  '0.0122', 0, '#358452'\n  '0.0061', 0, '#358452'\n  '0.0003', 0, '#358452'\n{% endgooglecharts %}\n\n*canon eos rebel t3i 18 mp cmos digital slr camera and digic 4 imaging body only*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 2, '#358452'\n  '25.0', 1, '#358452'\n  '12.05', 3, '#358452'\n  '6.025', 1, '#358452'\n  '3.0125', 4, '#358452'\n  '1.05625', 2, '#358452'\n  '0.7812', 0, '#358452'\n  '0.3906', 1, '#358452'\n  '0.1953', 0, '#358452'\n  '0.0976', 1, '#358452'\n  '0.0488', 1, '#358452'\n  '0.0244', 0, '#358452'\n  '0.0122', 0, '#358452'\n  '0.0061', 0, '#358452'\n  '0.0003', 0, '#358452'\n{% endgooglecharts %}\n\n**Examples of accessory listings:**\n\n*310 digital camera video mask now rated to 65 feet*)\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 0, '#B65C49'\n  '25.0', 2, '#B65C49'\n  '12.05', 0, '#B65C49'\n  '6.025', 0, '#B65C49'\n  '3.0125', 0, '#B65C49'\n  '1.05625', 0, '#B65C49'\n  '0.7812', 1, '#B65C49'\n  '0.3906', 0, '#B65C49'\n  '0.1953', 1, '#B65C49'\n  '0.0976', 2, '#B65C49'\n  '0.0488', 0, '#B65C49'\n  '0.0244', 0, '#B65C49'\n  '0.0122', 1, '#B65C49'\n  '0.0061', 0, '#B65C49'\n  '0.0003', 3, '#B65C49'\n{% endgooglecharts %}\n\n*optekas extreme travelers essentials kit by opteka package inlcudes excursion series c900 fullsize waterproof canvas bag 6501300mm and 500mm telephoto lenses heavy duty tripod and monopod and much more for pentax k10d k20d k100d k110d k200d ist digital slr cameras*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 0, '#B65C49'\n  '25.0', 1, '#B65C49'\n  '12.05', 0, '#B65C49'\n  '6.025', 5, '#B65C49'\n  '3.0125', 1, '#B65C49'\n  '1.05625', 2, '#B65C49'\n  '0.7812', 5, '#B65C49'\n  '0.3906', 1, '#B65C49'\n  '0.1953', 4, '#B65C49'\n  '0.0976', 1, '#B65C49'\n  '0.0488', 9, '#B65C49'\n  '0.0244', 3, '#B65C49'\n  '0.0122', 5, '#B65C49'\n  '0.0061', 3, '#B65C49'\n  '0.0003', 0, '#B65C49'\n{% endgooglecharts %}\n\nI had to use a nonlinear scale (I used powers of 2) for the histogram buckets or all the unique (small probability) words ended up in the same bucket.\n\nThere is a high rate of false positives (products being identified as accessories) when the listings are in languages other than English.  With so few non-English listings every word in these listings is unique across all listings.  It may be possible to figure out what language the listings are by using identifying listings which have unusual character n-grams distributions but I don't now if there will be enough text per listing to do this reliably.\n\n*jendigital jd 5200 z3 digitalkamera 50 2560 x 1920 32mb*\n{% googlecharts ColumnChart 600 200 %}\n  Term Probability Distribution\n  {\"legend\": { \"position\": \"none\" }}\n  \"Probability\", \"Count\", { role: 'style' }\n  '50.0', 0, '#B65C49'\n  '25.0', 0, '#B65C49'\n  '12.05', 0, '#B65C49'\n  '6.025', 0, '#B65C49'\n  '3.0125', 2, '#B65C49'\n  '1.05625', 1, '#B65C49'\n  '0.7812', 1, '#B65C49'\n  '0.3906', 0, '#B65C49'\n  '0.1953', 0, '#B65C49'\n  '0.0976', 0, '#B65C49'\n  '0.0488', 1, '#B65C49'\n  '0.0244', 1, '#B65C49'\n  '0.0122', 2, '#B65C49'\n  '0.0061', 0, '#B65C49'\n  '0.0003', 0, '#B65C49'\n{% endgooglecharts %}\n\n[The messy code](https://github.com/DForshner/CSharpExperiments/blob/master/ClassifyingDocumentsUsingDistributionOfTermUniqueness.cs)","slug":"Exploring-Classifying-Documents-Using-Distribution-Of-Term-Uniqueness","published":1,"updated":"2016-05-06T20:41:22.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjut002zy0kw84ylmsde","content":"<p>I’m looking a way to classify product listings as either a product or a product accessory.  My current idea is to classify listings based on how their term probabilities are distributed.</p>\n<p>The idea is to find the probability of each term in a listing and use them to build a histogram to get an idea how the common and unique terms are distributed for a listing.</p>\n<p><strong>Examples of common words</strong>: camera, digital, zoom, optical, with, lcd, megapixel, lens, canon, black, and, mp, digitalkamera, cm, 27</p>\n<p><strong>Examples of unique words</strong>: rings, eb575152vu, i9000, galaxys, 1080mah, funtionality, bp511a, zs7, enel5, 1100mah, mll3, 228825, np20, negative, scanner</p>\n<p>I’m assuming that a <em>typical</em> product listing generally has one model number (unique) and a bunch of common terms while an accessory listing usually has multiple model numbers.  If this is true it should be possible to classify a listing as either a product or a product accessory from the distribution of term probabilities.</p>\n<p>From what I’m seeing so far, it seems to be possible to classify accessory listings that have a high ratio of unique terms.</p>\n<p><strong>Note:</strong> <em>I wanted to use a histogram but I couldn’t get the hexo google charts plugin to make a histogram with a custom scale</em> 😕</p>\n<p><strong>Examples of product listings:</strong></p>\n<p><em>samsung sh100 142mp wifi digital camera with 5x optical zoom in silver 8gb accessory kit</em><br><div id=\"googleChart1511\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart1511\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 5, '#358452'],['25.0', 0, '#358452'],['12.05', 3, '#358452'],['6.025', 2, '#358452'],['3.0125', 1, '#358452'],['1.05625', 1, '#358452'],['0.7812', 1, '#358452'],['0.3906', 2, '#358452'],['0.1953', 0, '#358452'],['0.0976', 0, '#358452'],['0.0488', 0, '#358452'],['0.0244', 0, '#358452'],['0.0122', 0, '#358452'],['0.0061', 0, '#358452'],['0.0003', 0, '#358452']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><em>canon eos rebel t3i 18 mp cmos digital slr camera and digic 4 imaging body only</em><br><div id=\"googleChart8484\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart8484\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 2, '#358452'],['25.0', 1, '#358452'],['12.05', 3, '#358452'],['6.025', 1, '#358452'],['3.0125', 4, '#358452'],['1.05625', 2, '#358452'],['0.7812', 0, '#358452'],['0.3906', 1, '#358452'],['0.1953', 0, '#358452'],['0.0976', 1, '#358452'],['0.0488', 1, '#358452'],['0.0244', 0, '#358452'],['0.0122', 0, '#358452'],['0.0061', 0, '#358452'],['0.0003', 0, '#358452']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><strong>Examples of accessory listings:</strong></p>\n<p><em>310 digital camera video mask now rated to 65 feet</em>)<br><div id=\"googleChart9049\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart9049\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 0, '#B65C49'],['25.0', 2, '#B65C49'],['12.05', 0, '#B65C49'],['6.025', 0, '#B65C49'],['3.0125', 0, '#B65C49'],['1.05625', 0, '#B65C49'],['0.7812', 1, '#B65C49'],['0.3906', 0, '#B65C49'],['0.1953', 1, '#B65C49'],['0.0976', 2, '#B65C49'],['0.0488', 0, '#B65C49'],['0.0244', 0, '#B65C49'],['0.0122', 1, '#B65C49'],['0.0061', 0, '#B65C49'],['0.0003', 3, '#B65C49']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><em>optekas extreme travelers essentials kit by opteka package inlcudes excursion series c900 fullsize waterproof canvas bag 6501300mm and 500mm telephoto lenses heavy duty tripod and monopod and much more for pentax k10d k20d k100d k110d k200d ist digital slr cameras</em><br><div id=\"googleChart1867\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart1867\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 0, '#B65C49'],['25.0', 1, '#B65C49'],['12.05', 0, '#B65C49'],['6.025', 5, '#B65C49'],['3.0125', 1, '#B65C49'],['1.05625', 2, '#B65C49'],['0.7812', 5, '#B65C49'],['0.3906', 1, '#B65C49'],['0.1953', 4, '#B65C49'],['0.0976', 1, '#B65C49'],['0.0488', 9, '#B65C49'],['0.0244', 3, '#B65C49'],['0.0122', 5, '#B65C49'],['0.0061', 3, '#B65C49'],['0.0003', 0, '#B65C49']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p>I had to use a nonlinear scale (I used powers of 2) for the histogram buckets or all the unique (small probability) words ended up in the same bucket.</p>\n<p>There is a high rate of false positives (products being identified as accessories) when the listings are in languages other than English.  With so few non-English listings every word in these listings is unique across all listings.  It may be possible to figure out what language the listings are by using identifying listings which have unusual character n-grams distributions but I don’t now if there will be enough text per listing to do this reliably.</p>\n<p><em>jendigital jd 5200 z3 digitalkamera 50 2560 x 1920 32mb</em><br><div id=\"googleChart9434\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart9434\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 0, '#B65C49'],['25.0', 0, '#B65C49'],['12.05', 0, '#B65C49'],['6.025', 0, '#B65C49'],['3.0125', 2, '#B65C49'],['1.05625', 1, '#B65C49'],['0.7812', 1, '#B65C49'],['0.3906', 0, '#B65C49'],['0.1953', 0, '#B65C49'],['0.0976', 0, '#B65C49'],['0.0488', 1, '#B65C49'],['0.0244', 1, '#B65C49'],['0.0122', 2, '#B65C49'],['0.0061', 0, '#B65C49'],['0.0003', 0, '#B65C49']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/ClassifyingDocumentsUsingDistributionOfTermUniqueness.cs\" target=\"_blank\" rel=\"external\">The messy code</a></p>\n","excerpt":"","more":"<p>I’m looking a way to classify product listings as either a product or a product accessory.  My current idea is to classify listings based on how their term probabilities are distributed.</p>\n<p>The idea is to find the probability of each term in a listing and use them to build a histogram to get an idea how the common and unique terms are distributed for a listing.</p>\n<p><strong>Examples of common words</strong>: camera, digital, zoom, optical, with, lcd, megapixel, lens, canon, black, and, mp, digitalkamera, cm, 27</p>\n<p><strong>Examples of unique words</strong>: rings, eb575152vu, i9000, galaxys, 1080mah, funtionality, bp511a, zs7, enel5, 1100mah, mll3, 228825, np20, negative, scanner</p>\n<p>I’m assuming that a <em>typical</em> product listing generally has one model number (unique) and a bunch of common terms while an accessory listing usually has multiple model numbers.  If this is true it should be possible to classify a listing as either a product or a product accessory from the distribution of term probabilities.</p>\n<p>From what I’m seeing so far, it seems to be possible to classify accessory listings that have a high ratio of unique terms.</p>\n<p><strong>Note:</strong> <em>I wanted to use a histogram but I couldn’t get the hexo google charts plugin to make a histogram with a custom scale</em> 😕</p>\n<p><strong>Examples of product listings:</strong></p>\n<p><em>samsung sh100 142mp wifi digital camera with 5x optical zoom in silver 8gb accessory kit</em><br><div id=\"googleChart1511\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart1511\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 5, '#358452'],['25.0', 0, '#358452'],['12.05', 3, '#358452'],['6.025', 2, '#358452'],['3.0125', 1, '#358452'],['1.05625', 1, '#358452'],['0.7812', 1, '#358452'],['0.3906', 2, '#358452'],['0.1953', 0, '#358452'],['0.0976', 0, '#358452'],['0.0488', 0, '#358452'],['0.0244', 0, '#358452'],['0.0122', 0, '#358452'],['0.0061', 0, '#358452'],['0.0003', 0, '#358452']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><em>canon eos rebel t3i 18 mp cmos digital slr camera and digic 4 imaging body only</em><br><div id=\"googleChart8484\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart8484\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 2, '#358452'],['25.0', 1, '#358452'],['12.05', 3, '#358452'],['6.025', 1, '#358452'],['3.0125', 4, '#358452'],['1.05625', 2, '#358452'],['0.7812', 0, '#358452'],['0.3906', 1, '#358452'],['0.1953', 0, '#358452'],['0.0976', 1, '#358452'],['0.0488', 1, '#358452'],['0.0244', 0, '#358452'],['0.0122', 0, '#358452'],['0.0061', 0, '#358452'],['0.0003', 0, '#358452']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><strong>Examples of accessory listings:</strong></p>\n<p><em>310 digital camera video mask now rated to 65 feet</em>)<br><div id=\"googleChart9049\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart9049\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 0, '#B65C49'],['25.0', 2, '#B65C49'],['12.05', 0, '#B65C49'],['6.025', 0, '#B65C49'],['3.0125', 0, '#B65C49'],['1.05625', 0, '#B65C49'],['0.7812', 1, '#B65C49'],['0.3906', 0, '#B65C49'],['0.1953', 1, '#B65C49'],['0.0976', 2, '#B65C49'],['0.0488', 0, '#B65C49'],['0.0244', 0, '#B65C49'],['0.0122', 1, '#B65C49'],['0.0061', 0, '#B65C49'],['0.0003', 3, '#B65C49']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><em>optekas extreme travelers essentials kit by opteka package inlcudes excursion series c900 fullsize waterproof canvas bag 6501300mm and 500mm telephoto lenses heavy duty tripod and monopod and much more for pentax k10d k20d k100d k110d k200d ist digital slr cameras</em><br><div id=\"googleChart1867\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart1867\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 0, '#B65C49'],['25.0', 1, '#B65C49'],['12.05', 0, '#B65C49'],['6.025', 5, '#B65C49'],['3.0125', 1, '#B65C49'],['1.05625', 2, '#B65C49'],['0.7812', 5, '#B65C49'],['0.3906', 1, '#B65C49'],['0.1953', 4, '#B65C49'],['0.0976', 1, '#B65C49'],['0.0488', 9, '#B65C49'],['0.0244', 3, '#B65C49'],['0.0122', 5, '#B65C49'],['0.0061', 3, '#B65C49'],['0.0003', 0, '#B65C49']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p>I had to use a nonlinear scale (I used powers of 2) for the histogram buckets or all the unique (small probability) words ended up in the same bucket.</p>\n<p>There is a high rate of false positives (products being identified as accessories) when the listings are in languages other than English.  With so few non-English listings every word in these listings is unique across all listings.  It may be possible to figure out what language the listings are by using identifying listings which have unusual character n-grams distributions but I don’t now if there will be enough text per listing to do this reliably.</p>\n<p><em>jendigital jd 5200 z3 digitalkamera 50 2560 x 1920 32mb</em><br><div id=\"googleChart9434\"></div>\n<script>\n  if (!window.google) {\n    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';\n    throw 'Google JS API is needed';\n  } else {\n    (function() {\n      google.load('visualization', '1.0', {'packages': [\"corechart\",\"geochart\",\"table\"]});\n      google.setOnLoadCallback(function() {\n        (new google.visualization.ColumnChart(document.getElementById(\"googleChart9434\"))).draw(google.visualization.arrayToDataTable([[\"Probability\", \"Count\", { role: 'style' }],['50.0', 0, '#B65C49'],['25.0', 0, '#B65C49'],['12.05', 0, '#B65C49'],['6.025', 0, '#B65C49'],['3.0125', 2, '#B65C49'],['1.05625', 1, '#B65C49'],['0.7812', 1, '#B65C49'],['0.3906', 0, '#B65C49'],['0.1953', 0, '#B65C49'],['0.0976', 0, '#B65C49'],['0.0488', 1, '#B65C49'],['0.0244', 1, '#B65C49'],['0.0122', 2, '#B65C49'],['0.0061', 0, '#B65C49'],['0.0003', 0, '#B65C49']]),{\"legend\":{\"position\":\"none\"},\"title\":\"Term Probability Distribution\",\"width\":\"600\",\"height\":\"200\"});\n      });\n    })();\n  }\n</script></p>\n<p><a href=\"https://github.com/DForshner/CSharpExperiments/blob/master/ClassifyingDocumentsUsingDistributionOfTermUniqueness.cs\">The messy code</a></p>\n"},{"title":"Efficient Analysis with SQL","date":"2016-03-31T00:00:00.000Z","_content":"The main part of the meetup was a presentation on tally tables, cross apply and normalization in SQL.  \n- Talley tables are used to replace while loops and fill in missing data.  Examples are shift tables, fiscal day tables, and holiday tables.\n- When creating tally tables set fill-rate to 100% as you won't be adding/removing from them.\n- Examples of using cross apply to pivot and unpivot (fold) data.\n- Activity-based costing (task/material column/labor column/burden column) is denormalized whereas a debit-credit view is normalized (separate material row/labor row/ burden row).\n- Interesting idea that normalization is about 'fidelity' and accurately modeling the real world.  I've always felt normalization was more a way of storing data in a general application-agnostic way so it didn't need to change as the application evolves.\n\nThis was followed by a short talk on scaling.\n- Scaling is changing all the weights by the same factor so the ratio between weights remains unchanged.\n- Scaling weights help pull them towards the unit circle.  If all the points are large values the get reduced and if they are all small they get increased.  Prevents numerical stability problems.\n- If one axis has a small scale and the there large it can cause clustering algorithms to accidently combine clusters along the small scale axis.\n- Other benefits of scaling are that gradient descent and learning rates will be faster.  It's easier to find the minimum error of a circular cone.\n- When scaling the mean and variance can be approximated by using a random sample of the data points.\n- Interesting idea on finding anomalous events by treating them like n-grams and finding improbable chains of events.  For example, if event C has a high probability given event A and B then it not occurring could be considered anomalous.\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/229944024/)","source":"_posts/Meetup-Efficient-Analysis-with-SQL.md","raw":"---\ntitle: Efficient Analysis with SQL\ndate: 2016-03-31 00:00:00\ntags:\n- Meetup\n- Data Science\n---\nThe main part of the meetup was a presentation on tally tables, cross apply and normalization in SQL.  \n- Talley tables are used to replace while loops and fill in missing data.  Examples are shift tables, fiscal day tables, and holiday tables.\n- When creating tally tables set fill-rate to 100% as you won't be adding/removing from them.\n- Examples of using cross apply to pivot and unpivot (fold) data.\n- Activity-based costing (task/material column/labor column/burden column) is denormalized whereas a debit-credit view is normalized (separate material row/labor row/ burden row).\n- Interesting idea that normalization is about 'fidelity' and accurately modeling the real world.  I've always felt normalization was more a way of storing data in a general application-agnostic way so it didn't need to change as the application evolves.\n\nThis was followed by a short talk on scaling.\n- Scaling is changing all the weights by the same factor so the ratio between weights remains unchanged.\n- Scaling weights help pull them towards the unit circle.  If all the points are large values the get reduced and if they are all small they get increased.  Prevents numerical stability problems.\n- If one axis has a small scale and the there large it can cause clustering algorithms to accidently combine clusters along the small scale axis.\n- Other benefits of scaling are that gradient descent and learning rates will be faster.  It's easier to find the minimum error of a circular cone.\n- When scaling the mean and variance can be approximated by using a random sample of the data points.\n- Interesting idea on finding anomalous events by treating them like n-grams and finding improbable chains of events.  For example, if event C has a high probability given event A and B then it not occurring could be considered anomalous.\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/229944024/)","slug":"Meetup-Efficient-Analysis-with-SQL","published":1,"updated":"2016-04-14T14:57:50.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuv0032y0kwxoyuxjlw","content":"<p>The main part of the meetup was a presentation on tally tables, cross apply and normalization in SQL.  </p>\n<ul>\n<li>Talley tables are used to replace while loops and fill in missing data.  Examples are shift tables, fiscal day tables, and holiday tables.</li>\n<li>When creating tally tables set fill-rate to 100% as you won’t be adding/removing from them.</li>\n<li>Examples of using cross apply to pivot and unpivot (fold) data.</li>\n<li>Activity-based costing (task/material column/labor column/burden column) is denormalized whereas a debit-credit view is normalized (separate material row/labor row/ burden row).</li>\n<li>Interesting idea that normalization is about ‘fidelity’ and accurately modeling the real world.  I’ve always felt normalization was more a way of storing data in a general application-agnostic way so it didn’t need to change as the application evolves.</li>\n</ul>\n<p>This was followed by a short talk on scaling.</p>\n<ul>\n<li>Scaling is changing all the weights by the same factor so the ratio between weights remains unchanged.</li>\n<li>Scaling weights help pull them towards the unit circle.  If all the points are large values the get reduced and if they are all small they get increased.  Prevents numerical stability problems.</li>\n<li>If one axis has a small scale and the there large it can cause clustering algorithms to accidently combine clusters along the small scale axis.</li>\n<li>Other benefits of scaling are that gradient descent and learning rates will be faster.  It’s easier to find the minimum error of a circular cone.</li>\n<li>When scaling the mean and variance can be approximated by using a random sample of the data points.</li>\n<li>Interesting idea on finding anomalous events by treating them like n-grams and finding improbable chains of events.  For example, if event C has a high probability given event A and B then it not occurring could be considered anomalous.</li>\n</ul>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/229944024/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>The main part of the meetup was a presentation on tally tables, cross apply and normalization in SQL.  </p>\n<ul>\n<li>Talley tables are used to replace while loops and fill in missing data.  Examples are shift tables, fiscal day tables, and holiday tables.</li>\n<li>When creating tally tables set fill-rate to 100% as you won’t be adding/removing from them.</li>\n<li>Examples of using cross apply to pivot and unpivot (fold) data.</li>\n<li>Activity-based costing (task/material column/labor column/burden column) is denormalized whereas a debit-credit view is normalized (separate material row/labor row/ burden row).</li>\n<li>Interesting idea that normalization is about ‘fidelity’ and accurately modeling the real world.  I’ve always felt normalization was more a way of storing data in a general application-agnostic way so it didn’t need to change as the application evolves.</li>\n</ul>\n<p>This was followed by a short talk on scaling.</p>\n<ul>\n<li>Scaling is changing all the weights by the same factor so the ratio between weights remains unchanged.</li>\n<li>Scaling weights help pull them towards the unit circle.  If all the points are large values the get reduced and if they are all small they get increased.  Prevents numerical stability problems.</li>\n<li>If one axis has a small scale and the there large it can cause clustering algorithms to accidently combine clusters along the small scale axis.</li>\n<li>Other benefits of scaling are that gradient descent and learning rates will be faster.  It’s easier to find the minimum error of a circular cone.</li>\n<li>When scaling the mean and variance can be approximated by using a random sample of the data points.</li>\n<li>Interesting idea on finding anomalous events by treating them like n-grams and finding improbable chains of events.  For example, if event C has a high probability given event A and B then it not occurring could be considered anomalous.</li>\n</ul>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/229944024/\">Meetup Event</a></p>\n"},{"title":"Odds & Ends - December 2013","date":"2013-12-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Objects on the stack are much more likely to be in the cache than arbitrary heap lines.\n* Closure - When a function closes over the area it is defined in so it can access variables that are not in its parameter list.\n* Anonymous functions (ECMAScript) - Functions that do not have a name associated with them.  Used to manage the scope of objects, modules, and namespaces.\n* Control Technique (testing) - A method by which you control your test by factoring out the portion of your program which has side effects outside the scope of control of the code you intend to test.  You need to control the side effects when testing.  Example: stubbing external dependencies.\n* Mutable - Can change contents without changing identity.\n* Immutable - Cannot change contents without changing identity.  Values are unchangeable once they are created.\n* Good C++: Avoid mutation, avoid side effects, don't use raw loops, avoid class hierarchy and inheritance (aka be more functional).\n  * The worse case is side effects with global scope.\n  * Same principal apply to fields, properties, parameters, and variables.  Don't mutate unless you have a good reason.\n  * Increase reliability by removing side effects so the code is easier to compose and integrate.  Side-effect free code works in all environments!","source":"_posts/Odds-Ends-December-2013.md","raw":"---\ntitle: Odds & Ends - December 2013\ndate: 2013-12-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Objects on the stack are much more likely to be in the cache than arbitrary heap lines.\n* Closure - When a function closes over the area it is defined in so it can access variables that are not in its parameter list.\n* Anonymous functions (ECMAScript) - Functions that do not have a name associated with them.  Used to manage the scope of objects, modules, and namespaces.\n* Control Technique (testing) - A method by which you control your test by factoring out the portion of your program which has side effects outside the scope of control of the code you intend to test.  You need to control the side effects when testing.  Example: stubbing external dependencies.\n* Mutable - Can change contents without changing identity.\n* Immutable - Cannot change contents without changing identity.  Values are unchangeable once they are created.\n* Good C++: Avoid mutation, avoid side effects, don't use raw loops, avoid class hierarchy and inheritance (aka be more functional).\n  * The worse case is side effects with global scope.\n  * Same principal apply to fields, properties, parameters, and variables.  Don't mutate unless you have a good reason.\n  * Increase reliability by removing side effects so the code is easier to compose and integrate.  Side-effect free code works in all environments!","slug":"Odds-Ends-December-2013","published":1,"updated":"2016-04-14T14:57:46.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuw0034y0kwoyt68wfw","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Objects on the stack are much more likely to be in the cache than arbitrary heap lines.</li>\n<li>Closure - When a function closes over the area it is defined in so it can access variables that are not in its parameter list.</li>\n<li>Anonymous functions (ECMAScript) - Functions that do not have a name associated with them.  Used to manage the scope of objects, modules, and namespaces.</li>\n<li>Control Technique (testing) - A method by which you control your test by factoring out the portion of your program which has side effects outside the scope of control of the code you intend to test.  You need to control the side effects when testing.  Example: stubbing external dependencies.</li>\n<li>Mutable - Can change contents without changing identity.</li>\n<li>Immutable - Cannot change contents without changing identity.  Values are unchangeable once they are created.</li>\n<li>Good C++: Avoid mutation, avoid side effects, don’t use raw loops, avoid class hierarchy and inheritance (aka be more functional).<ul>\n<li>The worse case is side effects with global scope.</li>\n<li>Same principal apply to fields, properties, parameters, and variables.  Don’t mutate unless you have a good reason.</li>\n<li>Increase reliability by removing side effects so the code is easier to compose and integrate.  Side-effect free code works in all environments!</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Objects on the stack are much more likely to be in the cache than arbitrary heap lines.</li>\n<li>Closure - When a function closes over the area it is defined in so it can access variables that are not in its parameter list.</li>\n<li>Anonymous functions (ECMAScript) - Functions that do not have a name associated with them.  Used to manage the scope of objects, modules, and namespaces.</li>\n<li>Control Technique (testing) - A method by which you control your test by factoring out the portion of your program which has side effects outside the scope of control of the code you intend to test.  You need to control the side effects when testing.  Example: stubbing external dependencies.</li>\n<li>Mutable - Can change contents without changing identity.</li>\n<li>Immutable - Cannot change contents without changing identity.  Values are unchangeable once they are created.</li>\n<li>Good C++: Avoid mutation, avoid side effects, don’t use raw loops, avoid class hierarchy and inheritance (aka be more functional).<ul>\n<li>The worse case is side effects with global scope.</li>\n<li>Same principal apply to fields, properties, parameters, and variables.  Don’t mutate unless you have a good reason.</li>\n<li>Increase reliability by removing side effects so the code is easier to compose and integrate.  Side-effect free code works in all environments!</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Odds & Ends - December 2015","date":"2015-12-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Tail call benefit - Callee is using the same stack space as caller which reduces memory pressure and makes it more likely that chunk of the stack will stay in the CPU cache.\n* Cores are black boxes that instructions enter and leave from in a sequential manner.  Inside the black box instructions can run in any order.\n* <u>Out of order execution</u>\n  * Fetch multiple instructions each cycle and decode into µ-ops.\n  * µ-ops are put into the re-order buffer (ROB) where they can be processed out of order if data is ready.\n  * To prevent pipeline stalls speculative execution runs all the conditional branches in parallel until the core figures out which branch to take.\n* <u>Hyperthreading</u> - Provides two virtual processors that share a reorder buffer.  Provides the core with more data during general workloads to keep execution units busy.\n* Pipelines improve performance but can cause nightmares if they stall!\n  * CPUs run best when instructions and data are in order.\n  * Keep data in order, adjacent, and consecutive to prevent data stalls.\n  * Don't jump around because it won't be able to predict where you want to go.\n  * Take comparisons out of loops to prevent mispredicted branches. For { If { ... } } => If { For { ... } }\n* Think about the period of time when we are waiting for followers to acknowledge a write as your uncertainty window.  As followers acknowledge the write we are increasingly certain that our write has been captured and eventually we can advance our uncertainty window.","source":"_posts/Odds-Ends-December-2015.md","raw":"---\ntitle: Odds & Ends - December 2015\ndate: 2015-12-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Tail call benefit - Callee is using the same stack space as caller which reduces memory pressure and makes it more likely that chunk of the stack will stay in the CPU cache.\n* Cores are black boxes that instructions enter and leave from in a sequential manner.  Inside the black box instructions can run in any order.\n* <u>Out of order execution</u>\n  * Fetch multiple instructions each cycle and decode into µ-ops.\n  * µ-ops are put into the re-order buffer (ROB) where they can be processed out of order if data is ready.\n  * To prevent pipeline stalls speculative execution runs all the conditional branches in parallel until the core figures out which branch to take.\n* <u>Hyperthreading</u> - Provides two virtual processors that share a reorder buffer.  Provides the core with more data during general workloads to keep execution units busy.\n* Pipelines improve performance but can cause nightmares if they stall!\n  * CPUs run best when instructions and data are in order.\n  * Keep data in order, adjacent, and consecutive to prevent data stalls.\n  * Don't jump around because it won't be able to predict where you want to go.\n  * Take comparisons out of loops to prevent mispredicted branches. For { If { ... } } => If { For { ... } }\n* Think about the period of time when we are waiting for followers to acknowledge a write as your uncertainty window.  As followers acknowledge the write we are increasingly certain that our write has been captured and eventually we can advance our uncertainty window.","slug":"Odds-Ends-December-2015","published":1,"updated":"2016-04-14T14:57:39.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjux0037y0kw7r00hkzo","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Tail call benefit - Callee is using the same stack space as caller which reduces memory pressure and makes it more likely that chunk of the stack will stay in the CPU cache.</li>\n<li>Cores are black boxes that instructions enter and leave from in a sequential manner.  Inside the black box instructions can run in any order.</li>\n<li><u>Out of order execution</u><ul>\n<li>Fetch multiple instructions each cycle and decode into µ-ops.</li>\n<li>µ-ops are put into the re-order buffer (ROB) where they can be processed out of order if data is ready.</li>\n<li>To prevent pipeline stalls speculative execution runs all the conditional branches in parallel until the core figures out which branch to take.</li>\n</ul>\n</li>\n<li><u>Hyperthreading</u> - Provides two virtual processors that share a reorder buffer.  Provides the core with more data during general workloads to keep execution units busy.</li>\n<li>Pipelines improve performance but can cause nightmares if they stall!<ul>\n<li>CPUs run best when instructions and data are in order.</li>\n<li>Keep data in order, adjacent, and consecutive to prevent data stalls.</li>\n<li>Don’t jump around because it won’t be able to predict where you want to go.</li>\n<li>Take comparisons out of loops to prevent mispredicted branches. For { If { … } } =&gt; If { For { … } }</li>\n</ul>\n</li>\n<li>Think about the period of time when we are waiting for followers to acknowledge a write as your uncertainty window.  As followers acknowledge the write we are increasingly certain that our write has been captured and eventually we can advance our uncertainty window.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Tail call benefit - Callee is using the same stack space as caller which reduces memory pressure and makes it more likely that chunk of the stack will stay in the CPU cache.</li>\n<li>Cores are black boxes that instructions enter and leave from in a sequential manner.  Inside the black box instructions can run in any order.</li>\n<li><u>Out of order execution</u><ul>\n<li>Fetch multiple instructions each cycle and decode into µ-ops.</li>\n<li>µ-ops are put into the re-order buffer (ROB) where they can be processed out of order if data is ready.</li>\n<li>To prevent pipeline stalls speculative execution runs all the conditional branches in parallel until the core figures out which branch to take.</li>\n</ul>\n</li>\n<li><u>Hyperthreading</u> - Provides two virtual processors that share a reorder buffer.  Provides the core with more data during general workloads to keep execution units busy.</li>\n<li>Pipelines improve performance but can cause nightmares if they stall!<ul>\n<li>CPUs run best when instructions and data are in order.</li>\n<li>Keep data in order, adjacent, and consecutive to prevent data stalls.</li>\n<li>Don’t jump around because it won’t be able to predict where you want to go.</li>\n<li>Take comparisons out of loops to prevent mispredicted branches. For { If { … } } =&gt; If { For { … } }</li>\n</ul>\n</li>\n<li>Think about the period of time when we are waiting for followers to acknowledge a write as your uncertainty window.  As followers acknowledge the write we are increasingly certain that our write has been captured and eventually we can advance our uncertainty window.</li>\n</ul>\n"},{"title":"Odds & Ends - December 2014","date":"2014-12-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Kruskal's minimum spanning tree algorithm\n  * O(Elog(V)) for sparse graphs (typical case).\n  * Better constants than Prims because built with simpler data structures (union-find).\n  * Add shortest (min weight) edge that does not create a cycle each pass.  Risks a cycle being created so much check for cycle each pass.\n  * If you stop early you may have disconnected tree/forests.\n* Prim's minimum spanning tree algorithm\n  * O(E + Vlog(V)) if use Fibonacci heap\n  * Best for dense graphs (E >>V).\n  * Adds one vertex at a time and the next vertex is always the nearest to the current one on the graph.\n  * If you stop early you will still have a connected graph.\n* GUIDs hurt RDMS inserts because the data isn't ordered which causes a lot of I/O work to re-arrange the B-Tree leafs.\n* Dynamic Content Management System\n  * Dynamically generate website each request.\n  * Each request eats CPU which allows DDos attacks.\n  * The server shouldn't be executing any code on behalf of the user until they are logged on!\n  * Use static stylesheets, graphics, movies, etc. that can be pre-generated and stored as files.\n  * Static Objects (graphics/Js/CSS) can be marked as cacheable and CDN can distribute them across their network.\n* Database generated ids may hurt insert performance.  To auto-generate a PK id it has to take a lock.  Shows up during multi-row or bulk inserts.\n* Await Keyword - Turns the rest of the method into a closure that will asynchronously execute upon completion of the task being awaited without blocking the executing thread.\n* Why Microservices?  Independent scaling, service isolation, and separate service life-cycles.\n* Flake Ids - Unique semi-time sorted ids.  The top bits are time and the bottom bits are the node.  Example: 41 bits ms since epoch + 10 bits node id + 12 bits sequential counter\n* Big O is not about time.  It's a tool that describes how a function grows with respect to some input.\n* You want a small pool saturated with threads waiting for connections.    \n  * More threads only perform better when blocking creates opportunities for executing.  Less blocking needs fewer threads.\n  * Example: Connections = (# Cores * 2) + # HDDs\n  * It's not about how many threads but how few threads we can get away with.  Limited by disk and network blocking.\n* Improving performance\n  * Motivation - Money, personal growth, make a difference.\n  * Plan Smarter - Focus on important tasks first.  Remove unnecessary to-do lists, reduce the number of tasks on to-do lists (1-week window).\n  * Do not interrupt - Try to minimize interruptions as much as possible.   You want to achieve flow.\n  * Minimise overhead - Fewer meetings, fewer chats, and avoid checking email.  Water cooler chats about code are fine.\n* The longer architects stay in their role decoupled from implementations, the less qualified they are to judge the maturation and risk profile of new tools, processes, and paradigms.\n* Comprehensions (map, fold, each) - Operates on entire data structures.  Higher order functions.\n* Properties - Values that change over time (time-varying values) bound to an expression or relationship.\n* Constructors can't reveal intent\n  * Limit to building objects and not to connecting to external resources.\n  * Limit to specific behavior so you can guess intent.\n  * Only initialize new instances of a class to a rational state.\n  * Don't let it invoke an instance method on the instance being creating.  The existence of this method call shows the constructor is doing two things.\n* Factories - Create object while hiding exact class instantiated.\n* Static creation method - Static method on a class that returns an instance.\n* Architecture is concerned with aspects that are hard to change (i.e. the important stuff).  Irreversibility is a core driver of complexity.  Past decisions cannot be reversed and we are constantly working around limitations.  Try to make your decisions reversible when possible.","source":"_posts/Odds-Ends-December-2014.md","raw":"---\ntitle: Odds & Ends - December 2014\ndate: 2014-12-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Kruskal's minimum spanning tree algorithm\n  * O(Elog(V)) for sparse graphs (typical case).\n  * Better constants than Prims because built with simpler data structures (union-find).\n  * Add shortest (min weight) edge that does not create a cycle each pass.  Risks a cycle being created so much check for cycle each pass.\n  * If you stop early you may have disconnected tree/forests.\n* Prim's minimum spanning tree algorithm\n  * O(E + Vlog(V)) if use Fibonacci heap\n  * Best for dense graphs (E >>V).\n  * Adds one vertex at a time and the next vertex is always the nearest to the current one on the graph.\n  * If you stop early you will still have a connected graph.\n* GUIDs hurt RDMS inserts because the data isn't ordered which causes a lot of I/O work to re-arrange the B-Tree leafs.\n* Dynamic Content Management System\n  * Dynamically generate website each request.\n  * Each request eats CPU which allows DDos attacks.\n  * The server shouldn't be executing any code on behalf of the user until they are logged on!\n  * Use static stylesheets, graphics, movies, etc. that can be pre-generated and stored as files.\n  * Static Objects (graphics/Js/CSS) can be marked as cacheable and CDN can distribute them across their network.\n* Database generated ids may hurt insert performance.  To auto-generate a PK id it has to take a lock.  Shows up during multi-row or bulk inserts.\n* Await Keyword - Turns the rest of the method into a closure that will asynchronously execute upon completion of the task being awaited without blocking the executing thread.\n* Why Microservices?  Independent scaling, service isolation, and separate service life-cycles.\n* Flake Ids - Unique semi-time sorted ids.  The top bits are time and the bottom bits are the node.  Example: 41 bits ms since epoch + 10 bits node id + 12 bits sequential counter\n* Big O is not about time.  It's a tool that describes how a function grows with respect to some input.\n* You want a small pool saturated with threads waiting for connections.    \n  * More threads only perform better when blocking creates opportunities for executing.  Less blocking needs fewer threads.\n  * Example: Connections = (# Cores * 2) + # HDDs\n  * It's not about how many threads but how few threads we can get away with.  Limited by disk and network blocking.\n* Improving performance\n  * Motivation - Money, personal growth, make a difference.\n  * Plan Smarter - Focus on important tasks first.  Remove unnecessary to-do lists, reduce the number of tasks on to-do lists (1-week window).\n  * Do not interrupt - Try to minimize interruptions as much as possible.   You want to achieve flow.\n  * Minimise overhead - Fewer meetings, fewer chats, and avoid checking email.  Water cooler chats about code are fine.\n* The longer architects stay in their role decoupled from implementations, the less qualified they are to judge the maturation and risk profile of new tools, processes, and paradigms.\n* Comprehensions (map, fold, each) - Operates on entire data structures.  Higher order functions.\n* Properties - Values that change over time (time-varying values) bound to an expression or relationship.\n* Constructors can't reveal intent\n  * Limit to building objects and not to connecting to external resources.\n  * Limit to specific behavior so you can guess intent.\n  * Only initialize new instances of a class to a rational state.\n  * Don't let it invoke an instance method on the instance being creating.  The existence of this method call shows the constructor is doing two things.\n* Factories - Create object while hiding exact class instantiated.\n* Static creation method - Static method on a class that returns an instance.\n* Architecture is concerned with aspects that are hard to change (i.e. the important stuff).  Irreversibility is a core driver of complexity.  Past decisions cannot be reversed and we are constantly working around limitations.  Try to make your decisions reversible when possible.","slug":"Odds-Ends-December-2014","published":1,"updated":"2016-04-14T14:57:43.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuy0039y0kwuxwmhqvf","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Kruskal’s minimum spanning tree algorithm<ul>\n<li>O(Elog(V)) for sparse graphs (typical case).</li>\n<li>Better constants than Prims because built with simpler data structures (union-find).</li>\n<li>Add shortest (min weight) edge that does not create a cycle each pass.  Risks a cycle being created so much check for cycle each pass.</li>\n<li>If you stop early you may have disconnected tree/forests.</li>\n</ul>\n</li>\n<li>Prim’s minimum spanning tree algorithm<ul>\n<li>O(E + Vlog(V)) if use Fibonacci heap</li>\n<li>Best for dense graphs (E &gt;&gt;V).</li>\n<li>Adds one vertex at a time and the next vertex is always the nearest to the current one on the graph.</li>\n<li>If you stop early you will still have a connected graph.</li>\n</ul>\n</li>\n<li>GUIDs hurt RDMS inserts because the data isn’t ordered which causes a lot of I/O work to re-arrange the B-Tree leafs.</li>\n<li>Dynamic Content Management System<ul>\n<li>Dynamically generate website each request.</li>\n<li>Each request eats CPU which allows DDos attacks.</li>\n<li>The server shouldn’t be executing any code on behalf of the user until they are logged on!</li>\n<li>Use static stylesheets, graphics, movies, etc. that can be pre-generated and stored as files.</li>\n<li>Static Objects (graphics/Js/CSS) can be marked as cacheable and CDN can distribute them across their network.</li>\n</ul>\n</li>\n<li>Database generated ids may hurt insert performance.  To auto-generate a PK id it has to take a lock.  Shows up during multi-row or bulk inserts.</li>\n<li>Await Keyword - Turns the rest of the method into a closure that will asynchronously execute upon completion of the task being awaited without blocking the executing thread.</li>\n<li>Why Microservices?  Independent scaling, service isolation, and separate service life-cycles.</li>\n<li>Flake Ids - Unique semi-time sorted ids.  The top bits are time and the bottom bits are the node.  Example: 41 bits ms since epoch + 10 bits node id + 12 bits sequential counter</li>\n<li>Big O is not about time.  It’s a tool that describes how a function grows with respect to some input.</li>\n<li>You want a small pool saturated with threads waiting for connections.    <ul>\n<li>More threads only perform better when blocking creates opportunities for executing.  Less blocking needs fewer threads.</li>\n<li>Example: Connections = (# Cores * 2) + # HDDs</li>\n<li>It’s not about how many threads but how few threads we can get away with.  Limited by disk and network blocking.</li>\n</ul>\n</li>\n<li>Improving performance<ul>\n<li>Motivation - Money, personal growth, make a difference.</li>\n<li>Plan Smarter - Focus on important tasks first.  Remove unnecessary to-do lists, reduce the number of tasks on to-do lists (1-week window).</li>\n<li>Do not interrupt - Try to minimize interruptions as much as possible.   You want to achieve flow.</li>\n<li>Minimise overhead - Fewer meetings, fewer chats, and avoid checking email.  Water cooler chats about code are fine.</li>\n</ul>\n</li>\n<li>The longer architects stay in their role decoupled from implementations, the less qualified they are to judge the maturation and risk profile of new tools, processes, and paradigms.</li>\n<li>Comprehensions (map, fold, each) - Operates on entire data structures.  Higher order functions.</li>\n<li>Properties - Values that change over time (time-varying values) bound to an expression or relationship.</li>\n<li>Constructors can’t reveal intent<ul>\n<li>Limit to building objects and not to connecting to external resources.</li>\n<li>Limit to specific behavior so you can guess intent.</li>\n<li>Only initialize new instances of a class to a rational state.</li>\n<li>Don’t let it invoke an instance method on the instance being creating.  The existence of this method call shows the constructor is doing two things.</li>\n</ul>\n</li>\n<li>Factories - Create object while hiding exact class instantiated.</li>\n<li>Static creation method - Static method on a class that returns an instance.</li>\n<li>Architecture is concerned with aspects that are hard to change (i.e. the important stuff).  Irreversibility is a core driver of complexity.  Past decisions cannot be reversed and we are constantly working around limitations.  Try to make your decisions reversible when possible.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Kruskal’s minimum spanning tree algorithm<ul>\n<li>O(Elog(V)) for sparse graphs (typical case).</li>\n<li>Better constants than Prims because built with simpler data structures (union-find).</li>\n<li>Add shortest (min weight) edge that does not create a cycle each pass.  Risks a cycle being created so much check for cycle each pass.</li>\n<li>If you stop early you may have disconnected tree/forests.</li>\n</ul>\n</li>\n<li>Prim’s minimum spanning tree algorithm<ul>\n<li>O(E + Vlog(V)) if use Fibonacci heap</li>\n<li>Best for dense graphs (E &gt;&gt;V).</li>\n<li>Adds one vertex at a time and the next vertex is always the nearest to the current one on the graph.</li>\n<li>If you stop early you will still have a connected graph.</li>\n</ul>\n</li>\n<li>GUIDs hurt RDMS inserts because the data isn’t ordered which causes a lot of I/O work to re-arrange the B-Tree leafs.</li>\n<li>Dynamic Content Management System<ul>\n<li>Dynamically generate website each request.</li>\n<li>Each request eats CPU which allows DDos attacks.</li>\n<li>The server shouldn’t be executing any code on behalf of the user until they are logged on!</li>\n<li>Use static stylesheets, graphics, movies, etc. that can be pre-generated and stored as files.</li>\n<li>Static Objects (graphics/Js/CSS) can be marked as cacheable and CDN can distribute them across their network.</li>\n</ul>\n</li>\n<li>Database generated ids may hurt insert performance.  To auto-generate a PK id it has to take a lock.  Shows up during multi-row or bulk inserts.</li>\n<li>Await Keyword - Turns the rest of the method into a closure that will asynchronously execute upon completion of the task being awaited without blocking the executing thread.</li>\n<li>Why Microservices?  Independent scaling, service isolation, and separate service life-cycles.</li>\n<li>Flake Ids - Unique semi-time sorted ids.  The top bits are time and the bottom bits are the node.  Example: 41 bits ms since epoch + 10 bits node id + 12 bits sequential counter</li>\n<li>Big O is not about time.  It’s a tool that describes how a function grows with respect to some input.</li>\n<li>You want a small pool saturated with threads waiting for connections.    <ul>\n<li>More threads only perform better when blocking creates opportunities for executing.  Less blocking needs fewer threads.</li>\n<li>Example: Connections = (# Cores * 2) + # HDDs</li>\n<li>It’s not about how many threads but how few threads we can get away with.  Limited by disk and network blocking.</li>\n</ul>\n</li>\n<li>Improving performance<ul>\n<li>Motivation - Money, personal growth, make a difference.</li>\n<li>Plan Smarter - Focus on important tasks first.  Remove unnecessary to-do lists, reduce the number of tasks on to-do lists (1-week window).</li>\n<li>Do not interrupt - Try to minimize interruptions as much as possible.   You want to achieve flow.</li>\n<li>Minimise overhead - Fewer meetings, fewer chats, and avoid checking email.  Water cooler chats about code are fine.</li>\n</ul>\n</li>\n<li>The longer architects stay in their role decoupled from implementations, the less qualified they are to judge the maturation and risk profile of new tools, processes, and paradigms.</li>\n<li>Comprehensions (map, fold, each) - Operates on entire data structures.  Higher order functions.</li>\n<li>Properties - Values that change over time (time-varying values) bound to an expression or relationship.</li>\n<li>Constructors can’t reveal intent<ul>\n<li>Limit to building objects and not to connecting to external resources.</li>\n<li>Limit to specific behavior so you can guess intent.</li>\n<li>Only initialize new instances of a class to a rational state.</li>\n<li>Don’t let it invoke an instance method on the instance being creating.  The existence of this method call shows the constructor is doing two things.</li>\n</ul>\n</li>\n<li>Factories - Create object while hiding exact class instantiated.</li>\n<li>Static creation method - Static method on a class that returns an instance.</li>\n<li>Architecture is concerned with aspects that are hard to change (i.e. the important stuff).  Irreversibility is a core driver of complexity.  Past decisions cannot be reversed and we are constantly working around limitations.  Try to make your decisions reversible when possible.</li>\n</ul>\n"},{"title":"Odds & Ends - March 2013","date":"2013-03-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Lines of code represent an expenditure, not an accomplishment.\n* In large systems interfaces matter.  There is a danger that people will start playing fast and loose with interfaces by passing around nested maps and lists and then expecting the other side to understand the encoding.  Be explicit!\n* In ECMAScript one should use an object not an array for a set of key/value pairs.  If you use an array all you are getting is the extra baggage of an array's methods what won't work.\n* Functions without side-effects are pure data transformations.  Something comes in and something comes out.  The results are predictable.  Functions that rely on side effects or additional inputs (databases) are complicated.\n* Doing proper single responsibility principal often results in a class with one method ... aka a function.\n* *Collections vs. Streams*\n  * Collection - (eager, a full warehouse) data structure which holds all values in memory.  Each element must be computed before it can be added.\n    * Values are spread out in space (computer memory) (which all exist at one point in time).\n  * Streams - (lazy, just in time) data structure where elements are computed on demand.  Liked producer/consumer or lazy version of a collection.\n    * Values are spread out in time (which repeatedly appear at the same point.\n* User interaction -> data change -> view render\n  * Render on the data change, not the user interaction!  The model is a single source of truth!\n* Layers Pattern\n  1. UI - Views and models\n  2. Controller - Application composition\n  3. Service Layer - Business composition and coordination.\n  3. Repositories (data access), Calculators (algorithms), and Query Objects (helpers).\n* *C# Anonymous functions*\n  * Can declare a variable with the same name as static/instance variable of the outer class.\n  * Can access static/instance variables of enclosing class\n  * Cannot access any ref/out variables inside an anonymous method.\n  * Cannot declare a variable with the same name as a variable in the outer method.\n* *Closure* - Is not a concrete element or synonym for an anonymous function or lambda expression!  It's a behavior that allows us to declare an anonymous function that refers to local variables outside said function and not worry about that variables lifespan.\n* *Abstract Base Class vs. Interface*\n  * Abstract Base Class - \"Is a\"\n    * Ex: Dog is a mammal\n    * This is core functionality of this class\n    * Adds constraint that there can be only one base class\n  * Interface - \"acts like\", \"is verb\"\n    * Ex: Book is IWritable, Dog acts like an IEater\n    * This is trait of an object, not necessarily its core functionality\n* The key principal of HTTP is that resources are sent in the message body, using content negotiation to specify the representation of the resource.\n* In C++ ptr[3] means *(ptr + 3) which can be written as *(3 + ptr) or 3[ptr] :-)\n* To reduce stalls due to the GC we circumvented it by replacing all heap allocations with the use of pre-allocated arrays of values types, effectively implementing manual memory management inside a managed language.","source":"_posts/Odds-Ends-March-2013.md","raw":"---\ntitle: Odds & Ends - March 2013\ndate: 2013-03-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Lines of code represent an expenditure, not an accomplishment.\n* In large systems interfaces matter.  There is a danger that people will start playing fast and loose with interfaces by passing around nested maps and lists and then expecting the other side to understand the encoding.  Be explicit!\n* In ECMAScript one should use an object not an array for a set of key/value pairs.  If you use an array all you are getting is the extra baggage of an array's methods what won't work.\n* Functions without side-effects are pure data transformations.  Something comes in and something comes out.  The results are predictable.  Functions that rely on side effects or additional inputs (databases) are complicated.\n* Doing proper single responsibility principal often results in a class with one method ... aka a function.\n* *Collections vs. Streams*\n  * Collection - (eager, a full warehouse) data structure which holds all values in memory.  Each element must be computed before it can be added.\n    * Values are spread out in space (computer memory) (which all exist at one point in time).\n  * Streams - (lazy, just in time) data structure where elements are computed on demand.  Liked producer/consumer or lazy version of a collection.\n    * Values are spread out in time (which repeatedly appear at the same point.\n* User interaction -> data change -> view render\n  * Render on the data change, not the user interaction!  The model is a single source of truth!\n* Layers Pattern\n  1. UI - Views and models\n  2. Controller - Application composition\n  3. Service Layer - Business composition and coordination.\n  3. Repositories (data access), Calculators (algorithms), and Query Objects (helpers).\n* *C# Anonymous functions*\n  * Can declare a variable with the same name as static/instance variable of the outer class.\n  * Can access static/instance variables of enclosing class\n  * Cannot access any ref/out variables inside an anonymous method.\n  * Cannot declare a variable with the same name as a variable in the outer method.\n* *Closure* - Is not a concrete element or synonym for an anonymous function or lambda expression!  It's a behavior that allows us to declare an anonymous function that refers to local variables outside said function and not worry about that variables lifespan.\n* *Abstract Base Class vs. Interface*\n  * Abstract Base Class - \"Is a\"\n    * Ex: Dog is a mammal\n    * This is core functionality of this class\n    * Adds constraint that there can be only one base class\n  * Interface - \"acts like\", \"is verb\"\n    * Ex: Book is IWritable, Dog acts like an IEater\n    * This is trait of an object, not necessarily its core functionality\n* The key principal of HTTP is that resources are sent in the message body, using content negotiation to specify the representation of the resource.\n* In C++ ptr[3] means *(ptr + 3) which can be written as *(3 + ptr) or 3[ptr] :-)\n* To reduce stalls due to the GC we circumvented it by replacing all heap allocations with the use of pre-allocated arrays of values types, effectively implementing manual memory management inside a managed language.","slug":"Odds-Ends-March-2013","published":1,"updated":"2016-04-14T14:57:24.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjuy003by0kwntzzot0a","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Lines of code represent an expenditure, not an accomplishment.</li>\n<li>In large systems interfaces matter.  There is a danger that people will start playing fast and loose with interfaces by passing around nested maps and lists and then expecting the other side to understand the encoding.  Be explicit!</li>\n<li>In ECMAScript one should use an object not an array for a set of key/value pairs.  If you use an array all you are getting is the extra baggage of an array’s methods what won’t work.</li>\n<li>Functions without side-effects are pure data transformations.  Something comes in and something comes out.  The results are predictable.  Functions that rely on side effects or additional inputs (databases) are complicated.</li>\n<li>Doing proper single responsibility principal often results in a class with one method … aka a function.</li>\n<li><em>Collections vs. Streams</em><ul>\n<li>Collection - (eager, a full warehouse) data structure which holds all values in memory.  Each element must be computed before it can be added.<ul>\n<li>Values are spread out in space (computer memory) (which all exist at one point in time).</li>\n</ul>\n</li>\n<li>Streams - (lazy, just in time) data structure where elements are computed on demand.  Liked producer/consumer or lazy version of a collection.<ul>\n<li>Values are spread out in time (which repeatedly appear at the same point.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>User interaction -&gt; data change -&gt; view render<ul>\n<li>Render on the data change, not the user interaction!  The model is a single source of truth!</li>\n</ul>\n</li>\n<li>Layers Pattern<ol>\n<li>UI - Views and models</li>\n<li>Controller - Application composition</li>\n<li>Service Layer - Business composition and coordination.</li>\n<li>Repositories (data access), Calculators (algorithms), and Query Objects (helpers).</li>\n</ol>\n</li>\n<li><em>C# Anonymous functions</em><ul>\n<li>Can declare a variable with the same name as static/instance variable of the outer class.</li>\n<li>Can access static/instance variables of enclosing class</li>\n<li>Cannot access any ref/out variables inside an anonymous method.</li>\n<li>Cannot declare a variable with the same name as a variable in the outer method.</li>\n</ul>\n</li>\n<li><em>Closure</em> - Is not a concrete element or synonym for an anonymous function or lambda expression!  It’s a behavior that allows us to declare an anonymous function that refers to local variables outside said function and not worry about that variables lifespan.</li>\n<li><em>Abstract Base Class vs. Interface</em><ul>\n<li>Abstract Base Class - “Is a”<ul>\n<li>Ex: Dog is a mammal</li>\n<li>This is core functionality of this class</li>\n<li>Adds constraint that there can be only one base class</li>\n</ul>\n</li>\n<li>Interface - “acts like”, “is verb”<ul>\n<li>Ex: Book is IWritable, Dog acts like an IEater</li>\n<li>This is trait of an object, not necessarily its core functionality</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The key principal of HTTP is that resources are sent in the message body, using content negotiation to specify the representation of the resource.</li>\n<li>In C++ ptr[3] means <em>(ptr + 3) which can be written as </em>(3 + ptr) or 3[ptr] :-)</li>\n<li>To reduce stalls due to the GC we circumvented it by replacing all heap allocations with the use of pre-allocated arrays of values types, effectively implementing manual memory management inside a managed language.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Lines of code represent an expenditure, not an accomplishment.</li>\n<li>In large systems interfaces matter.  There is a danger that people will start playing fast and loose with interfaces by passing around nested maps and lists and then expecting the other side to understand the encoding.  Be explicit!</li>\n<li>In ECMAScript one should use an object not an array for a set of key/value pairs.  If you use an array all you are getting is the extra baggage of an array’s methods what won’t work.</li>\n<li>Functions without side-effects are pure data transformations.  Something comes in and something comes out.  The results are predictable.  Functions that rely on side effects or additional inputs (databases) are complicated.</li>\n<li>Doing proper single responsibility principal often results in a class with one method … aka a function.</li>\n<li><em>Collections vs. Streams</em><ul>\n<li>Collection - (eager, a full warehouse) data structure which holds all values in memory.  Each element must be computed before it can be added.<ul>\n<li>Values are spread out in space (computer memory) (which all exist at one point in time).</li>\n</ul>\n</li>\n<li>Streams - (lazy, just in time) data structure where elements are computed on demand.  Liked producer/consumer or lazy version of a collection.<ul>\n<li>Values are spread out in time (which repeatedly appear at the same point.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>User interaction -&gt; data change -&gt; view render<ul>\n<li>Render on the data change, not the user interaction!  The model is a single source of truth!</li>\n</ul>\n</li>\n<li>Layers Pattern<ol>\n<li>UI - Views and models</li>\n<li>Controller - Application composition</li>\n<li>Service Layer - Business composition and coordination.</li>\n<li>Repositories (data access), Calculators (algorithms), and Query Objects (helpers).</li>\n</ol>\n</li>\n<li><em>C# Anonymous functions</em><ul>\n<li>Can declare a variable with the same name as static/instance variable of the outer class.</li>\n<li>Can access static/instance variables of enclosing class</li>\n<li>Cannot access any ref/out variables inside an anonymous method.</li>\n<li>Cannot declare a variable with the same name as a variable in the outer method.</li>\n</ul>\n</li>\n<li><em>Closure</em> - Is not a concrete element or synonym for an anonymous function or lambda expression!  It’s a behavior that allows us to declare an anonymous function that refers to local variables outside said function and not worry about that variables lifespan.</li>\n<li><em>Abstract Base Class vs. Interface</em><ul>\n<li>Abstract Base Class - “Is a”<ul>\n<li>Ex: Dog is a mammal</li>\n<li>This is core functionality of this class</li>\n<li>Adds constraint that there can be only one base class</li>\n</ul>\n</li>\n<li>Interface - “acts like”, “is verb”<ul>\n<li>Ex: Book is IWritable, Dog acts like an IEater</li>\n<li>This is trait of an object, not necessarily its core functionality</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The key principal of HTTP is that resources are sent in the message body, using content negotiation to specify the representation of the resource.</li>\n<li>In C++ ptr[3] means <em>(ptr + 3) which can be written as </em>(3 + ptr) or 3[ptr] :-)</li>\n<li>To reduce stalls due to the GC we circumvented it by replacing all heap allocations with the use of pre-allocated arrays of values types, effectively implementing manual memory management inside a managed language.</li>\n</ul>\n"},{"title":"Odds & Ends - June 2015","date":"2015-06-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Attention is the currency of our age\n* Innovation is found at the boundaries between disciplines, not by narrowly focusing in one sphere.\n* Many developers derive pleasure from removing bugs that they should not have created in the first place.  Instead, structure code so it correct the first time and make it as easy to debug as possible.\n* Losing 20% of your data is worse than losing 100% because you don't know what you have lost.\n* Aside from making reasonable algorithm choices, cache misses are the main thing you need to worry about for performance.  Compared to cache misses, minor efficiency improvements just don't matter.\n* If you are waiting for the network it probably doesn't matter how slow your network is.\n* Idiomatic code: what the language wants you to do.\n* If a language puts all your allocations on the heap it's likely causing cache misses since you can't decide how objects are organized in the heap.\n* Each reference is 8 bytes on a 64-bit machine.\n* Tell don't ask - Rather than asking an object for data and acting on it, just tell the object what to do.  Let the object make its own decisions based on its own data.\n* Interfaces break dependencies.\n  * Runtime dependency - Flow of control leaves one module and enters another.\n  * Source code dependency - A name declared in one module appears in another module.\n  * If ModuleA.MethodA() calls ModuleB.MethodB() then ModuleA needs ModuleB to compile (source + runtime).\n  * If ModuleA.MethodA() calls InterfaceB.MethodB() then ModuleB need not exist to compile A (source only).\n* Acceptable Response Times\n  * Loading - 1000mn - A splash screen helps\n  * Respond to finger down - 100ms\n    * Users notice less than 100-150ms\n    * Remember that we may schedule a response but the engine may not get to it right away!\n    * Try for 100ms as it will be increased by scheduler delays.\n  * Animation chunks - 6ms\n    * 60Hz so all work must take ~16ms (4ms for OS so 6ms left for work).\n    * Work must be schedulable in the 6ms available!\n  * Idle/Cleanup - 50ms\n* Trees\n  * Every path is a tree.  \n  * Trees are allowed to branch.  \n  * A tree is connected and n vertices have n-1 edges.\n  * Trees have unique chains of edges joining two vertices\n  * [A-B-C-D] Tree\n  * [A-B] [C-D] A forest containing two trees\n  * [A]→[B] Not a tree because there are 2 paths from A to D.\n     ↓   ↓\n    [C]→[D]\n* A chair is a resource.  A teammate is a human being.\n* Projections - A piece of code that takes a series of events and produces a transient state from them.\n* React - state flows down via properties and events flow up via callbacks.\n* You only get one shot at encoding facts into a type system, and once you do you are stuck with them, so don't try to encode too much, and make sure what you encode is fundamental (won't change) about your business domain.\n* ECMAScript Debugging tips: console.Table([1,2,3], [2,3,4]); object.observe(foo); console.trace(foo);\n* Algorithm Correctness - Does it do what it is supposed to do?\n* Algorithm Efficiency - Does it have a run-time that is polynomially bounded?\n* Types of Equality - Reference equality, Identity Equality (same pk in DB), Logical Equality (value objects with identity fields)\n* A hash is a fingerprint for data.  It takes data of any length and gives you a small fixed sized identifier that you can use to compare or identify the data.","source":"_posts/Odds-Ends-June-2015.md","raw":"---\ntitle: Odds & Ends - June 2015\ndate: 2015-06-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Attention is the currency of our age\n* Innovation is found at the boundaries between disciplines, not by narrowly focusing in one sphere.\n* Many developers derive pleasure from removing bugs that they should not have created in the first place.  Instead, structure code so it correct the first time and make it as easy to debug as possible.\n* Losing 20% of your data is worse than losing 100% because you don't know what you have lost.\n* Aside from making reasonable algorithm choices, cache misses are the main thing you need to worry about for performance.  Compared to cache misses, minor efficiency improvements just don't matter.\n* If you are waiting for the network it probably doesn't matter how slow your network is.\n* Idiomatic code: what the language wants you to do.\n* If a language puts all your allocations on the heap it's likely causing cache misses since you can't decide how objects are organized in the heap.\n* Each reference is 8 bytes on a 64-bit machine.\n* Tell don't ask - Rather than asking an object for data and acting on it, just tell the object what to do.  Let the object make its own decisions based on its own data.\n* Interfaces break dependencies.\n  * Runtime dependency - Flow of control leaves one module and enters another.\n  * Source code dependency - A name declared in one module appears in another module.\n  * If ModuleA.MethodA() calls ModuleB.MethodB() then ModuleA needs ModuleB to compile (source + runtime).\n  * If ModuleA.MethodA() calls InterfaceB.MethodB() then ModuleB need not exist to compile A (source only).\n* Acceptable Response Times\n  * Loading - 1000mn - A splash screen helps\n  * Respond to finger down - 100ms\n    * Users notice less than 100-150ms\n    * Remember that we may schedule a response but the engine may not get to it right away!\n    * Try for 100ms as it will be increased by scheduler delays.\n  * Animation chunks - 6ms\n    * 60Hz so all work must take ~16ms (4ms for OS so 6ms left for work).\n    * Work must be schedulable in the 6ms available!\n  * Idle/Cleanup - 50ms\n* Trees\n  * Every path is a tree.  \n  * Trees are allowed to branch.  \n  * A tree is connected and n vertices have n-1 edges.\n  * Trees have unique chains of edges joining two vertices\n  * [A-B-C-D] Tree\n  * [A-B] [C-D] A forest containing two trees\n  * [A]→[B] Not a tree because there are 2 paths from A to D.\n     ↓   ↓\n    [C]→[D]\n* A chair is a resource.  A teammate is a human being.\n* Projections - A piece of code that takes a series of events and produces a transient state from them.\n* React - state flows down via properties and events flow up via callbacks.\n* You only get one shot at encoding facts into a type system, and once you do you are stuck with them, so don't try to encode too much, and make sure what you encode is fundamental (won't change) about your business domain.\n* ECMAScript Debugging tips: console.Table([1,2,3], [2,3,4]); object.observe(foo); console.trace(foo);\n* Algorithm Correctness - Does it do what it is supposed to do?\n* Algorithm Efficiency - Does it have a run-time that is polynomially bounded?\n* Types of Equality - Reference equality, Identity Equality (same pk in DB), Logical Equality (value objects with identity fields)\n* A hash is a fingerprint for data.  It takes data of any length and gives you a small fixed sized identifier that you can use to compare or identify the data.","slug":"Odds-Ends-June-2015","published":1,"updated":"2016-04-14T14:57:29.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjv0003ey0kwk8khwatt","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Attention is the currency of our age</li>\n<li>Innovation is found at the boundaries between disciplines, not by narrowly focusing in one sphere.</li>\n<li>Many developers derive pleasure from removing bugs that they should not have created in the first place.  Instead, structure code so it correct the first time and make it as easy to debug as possible.</li>\n<li>Losing 20% of your data is worse than losing 100% because you don’t know what you have lost.</li>\n<li>Aside from making reasonable algorithm choices, cache misses are the main thing you need to worry about for performance.  Compared to cache misses, minor efficiency improvements just don’t matter.</li>\n<li>If you are waiting for the network it probably doesn’t matter how slow your network is.</li>\n<li>Idiomatic code: what the language wants you to do.</li>\n<li>If a language puts all your allocations on the heap it’s likely causing cache misses since you can’t decide how objects are organized in the heap.</li>\n<li>Each reference is 8 bytes on a 64-bit machine.</li>\n<li>Tell don’t ask - Rather than asking an object for data and acting on it, just tell the object what to do.  Let the object make its own decisions based on its own data.</li>\n<li>Interfaces break dependencies.<ul>\n<li>Runtime dependency - Flow of control leaves one module and enters another.</li>\n<li>Source code dependency - A name declared in one module appears in another module.</li>\n<li>If ModuleA.MethodA() calls ModuleB.MethodB() then ModuleA needs ModuleB to compile (source + runtime).</li>\n<li>If ModuleA.MethodA() calls InterfaceB.MethodB() then ModuleB need not exist to compile A (source only).</li>\n</ul>\n</li>\n<li>Acceptable Response Times<ul>\n<li>Loading - 1000mn - A splash screen helps</li>\n<li>Respond to finger down - 100ms<ul>\n<li>Users notice less than 100-150ms</li>\n<li>Remember that we may schedule a response but the engine may not get to it right away!</li>\n<li>Try for 100ms as it will be increased by scheduler delays.</li>\n</ul>\n</li>\n<li>Animation chunks - 6ms<ul>\n<li>60Hz so all work must take ~16ms (4ms for OS so 6ms left for work).</li>\n<li>Work must be schedulable in the 6ms available!</li>\n</ul>\n</li>\n<li>Idle/Cleanup - 50ms</li>\n</ul>\n</li>\n<li>Trees<ul>\n<li>Every path is a tree.  </li>\n<li>Trees are allowed to branch.  </li>\n<li>A tree is connected and n vertices have n-1 edges.</li>\n<li>Trees have unique chains of edges joining two vertices</li>\n<li>[A-B-C-D] Tree</li>\n<li>[A-B] [C-D] A forest containing two trees</li>\n<li>[A]→[B] Not a tree because there are 2 paths from A to D.<br> ↓   ↓<br>[C]→[D]</li>\n</ul>\n</li>\n<li>A chair is a resource.  A teammate is a human being.</li>\n<li>Projections - A piece of code that takes a series of events and produces a transient state from them.</li>\n<li>React - state flows down via properties and events flow up via callbacks.</li>\n<li>You only get one shot at encoding facts into a type system, and once you do you are stuck with them, so don’t try to encode too much, and make sure what you encode is fundamental (won’t change) about your business domain.</li>\n<li>ECMAScript Debugging tips: console.Table([1,2,3], [2,3,4]); object.observe(foo); console.trace(foo);</li>\n<li>Algorithm Correctness - Does it do what it is supposed to do?</li>\n<li>Algorithm Efficiency - Does it have a run-time that is polynomially bounded?</li>\n<li>Types of Equality - Reference equality, Identity Equality (same pk in DB), Logical Equality (value objects with identity fields)</li>\n<li>A hash is a fingerprint for data.  It takes data of any length and gives you a small fixed sized identifier that you can use to compare or identify the data.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Attention is the currency of our age</li>\n<li>Innovation is found at the boundaries between disciplines, not by narrowly focusing in one sphere.</li>\n<li>Many developers derive pleasure from removing bugs that they should not have created in the first place.  Instead, structure code so it correct the first time and make it as easy to debug as possible.</li>\n<li>Losing 20% of your data is worse than losing 100% because you don’t know what you have lost.</li>\n<li>Aside from making reasonable algorithm choices, cache misses are the main thing you need to worry about for performance.  Compared to cache misses, minor efficiency improvements just don’t matter.</li>\n<li>If you are waiting for the network it probably doesn’t matter how slow your network is.</li>\n<li>Idiomatic code: what the language wants you to do.</li>\n<li>If a language puts all your allocations on the heap it’s likely causing cache misses since you can’t decide how objects are organized in the heap.</li>\n<li>Each reference is 8 bytes on a 64-bit machine.</li>\n<li>Tell don’t ask - Rather than asking an object for data and acting on it, just tell the object what to do.  Let the object make its own decisions based on its own data.</li>\n<li>Interfaces break dependencies.<ul>\n<li>Runtime dependency - Flow of control leaves one module and enters another.</li>\n<li>Source code dependency - A name declared in one module appears in another module.</li>\n<li>If ModuleA.MethodA() calls ModuleB.MethodB() then ModuleA needs ModuleB to compile (source + runtime).</li>\n<li>If ModuleA.MethodA() calls InterfaceB.MethodB() then ModuleB need not exist to compile A (source only).</li>\n</ul>\n</li>\n<li>Acceptable Response Times<ul>\n<li>Loading - 1000mn - A splash screen helps</li>\n<li>Respond to finger down - 100ms<ul>\n<li>Users notice less than 100-150ms</li>\n<li>Remember that we may schedule a response but the engine may not get to it right away!</li>\n<li>Try for 100ms as it will be increased by scheduler delays.</li>\n</ul>\n</li>\n<li>Animation chunks - 6ms<ul>\n<li>60Hz so all work must take ~16ms (4ms for OS so 6ms left for work).</li>\n<li>Work must be schedulable in the 6ms available!</li>\n</ul>\n</li>\n<li>Idle/Cleanup - 50ms</li>\n</ul>\n</li>\n<li>Trees<ul>\n<li>Every path is a tree.  </li>\n<li>Trees are allowed to branch.  </li>\n<li>A tree is connected and n vertices have n-1 edges.</li>\n<li>Trees have unique chains of edges joining two vertices</li>\n<li>[A-B-C-D] Tree</li>\n<li>[A-B] [C-D] A forest containing two trees</li>\n<li>[A]→[B] Not a tree because there are 2 paths from A to D.<br> ↓   ↓<br>[C]→[D]</li>\n</ul>\n</li>\n<li>A chair is a resource.  A teammate is a human being.</li>\n<li>Projections - A piece of code that takes a series of events and produces a transient state from them.</li>\n<li>React - state flows down via properties and events flow up via callbacks.</li>\n<li>You only get one shot at encoding facts into a type system, and once you do you are stuck with them, so don’t try to encode too much, and make sure what you encode is fundamental (won’t change) about your business domain.</li>\n<li>ECMAScript Debugging tips: console.Table([1,2,3], [2,3,4]); object.observe(foo); console.trace(foo);</li>\n<li>Algorithm Correctness - Does it do what it is supposed to do?</li>\n<li>Algorithm Efficiency - Does it have a run-time that is polynomially bounded?</li>\n<li>Types of Equality - Reference equality, Identity Equality (same pk in DB), Logical Equality (value objects with identity fields)</li>\n<li>A hash is a fingerprint for data.  It takes data of any length and gives you a small fixed sized identifier that you can use to compare or identify the data.</li>\n</ul>\n"},{"title":"Odds & Ends - June 2014","date":"2014-06-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* There is no such thing as \"plain text\".  Text is binary data plus an encoding scheme.\n  * When someone says \"plain text\" always ask \"what encoding?\"\n  * Try to use UTF-8 if possible.\n  * Try to always make encoding explicit in code.  Don't rely on the platform/system default encoding.  String text = convert(byte[] byteArray, Encoding.UTF);\n  * Glyph - Visual representation (a).\n  * Code Point - Numeric representation in character set being used (65).\n  * Code Unit - Binary representation determined by the encoding scheme (0100001).\n* Slow Database Table Scans - Query requests a row or range of rows and there are no available indexes to support it.  This causes a sequential scan from to bottom of the table.\n  * Any routine query that takes more than second will be a problem eventually.\n  * A table scan might not be noticeable if the table is small enough to fit in memory or disk cache but as it grows it will increasingly be pulled from disk (slow).  This also adds to the disk contention with any other running queries.\n* Database Concurrency Contention -  Too many users competing for the same resources.   Sometimes caused by table scans.\n  * Database locks up resources waiting to serve requests.\n  * Transactions lock row/tables for writes and other users cannot read from those rows.\n  * Transactions that span too many rows cause problems if a query has a table scan or update.  Resources are locked for the duration of the transaction so try to limit it to under 1 second.\n  * There is a limited number of connections to the RDMS available and it's possible to have them all blocked waiting on resources.\n* Slow Database Writes - As the table grows in size they often show a \"hockey stick\" curve for write speeds.\n  * The typical culprit are table indexes.  This is especially true when there are multiple indexes on a single large table.\n  * B-Tree requires more computational and disk resources as they index tree grows in size.\n  * Limit indexes to what is required and use caution when data gets big.","source":"_posts/Odds-Ends-June-2014.md","raw":"---\ntitle: Odds & Ends - June 2014\ndate: 2014-06-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* There is no such thing as \"plain text\".  Text is binary data plus an encoding scheme.\n  * When someone says \"plain text\" always ask \"what encoding?\"\n  * Try to use UTF-8 if possible.\n  * Try to always make encoding explicit in code.  Don't rely on the platform/system default encoding.  String text = convert(byte[] byteArray, Encoding.UTF);\n  * Glyph - Visual representation (a).\n  * Code Point - Numeric representation in character set being used (65).\n  * Code Unit - Binary representation determined by the encoding scheme (0100001).\n* Slow Database Table Scans - Query requests a row or range of rows and there are no available indexes to support it.  This causes a sequential scan from to bottom of the table.\n  * Any routine query that takes more than second will be a problem eventually.\n  * A table scan might not be noticeable if the table is small enough to fit in memory or disk cache but as it grows it will increasingly be pulled from disk (slow).  This also adds to the disk contention with any other running queries.\n* Database Concurrency Contention -  Too many users competing for the same resources.   Sometimes caused by table scans.\n  * Database locks up resources waiting to serve requests.\n  * Transactions lock row/tables for writes and other users cannot read from those rows.\n  * Transactions that span too many rows cause problems if a query has a table scan or update.  Resources are locked for the duration of the transaction so try to limit it to under 1 second.\n  * There is a limited number of connections to the RDMS available and it's possible to have them all blocked waiting on resources.\n* Slow Database Writes - As the table grows in size they often show a \"hockey stick\" curve for write speeds.\n  * The typical culprit are table indexes.  This is especially true when there are multiple indexes on a single large table.\n  * B-Tree requires more computational and disk resources as they index tree grows in size.\n  * Limit indexes to what is required and use caution when data gets big.","slug":"Odds-Ends-June-2014","published":1,"updated":"2016-04-14T14:57:32.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjv1003gy0kwlkk2g6ik","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>There is no such thing as “plain text”.  Text is binary data plus an encoding scheme.<ul>\n<li>When someone says “plain text” always ask “what encoding?”</li>\n<li>Try to use UTF-8 if possible.</li>\n<li>Try to always make encoding explicit in code.  Don’t rely on the platform/system default encoding.  String text = convert(byte[] byteArray, Encoding.UTF);</li>\n<li>Glyph - Visual representation (a).</li>\n<li>Code Point - Numeric representation in character set being used (65).</li>\n<li>Code Unit - Binary representation determined by the encoding scheme (0100001).</li>\n</ul>\n</li>\n<li>Slow Database Table Scans - Query requests a row or range of rows and there are no available indexes to support it.  This causes a sequential scan from to bottom of the table.<ul>\n<li>Any routine query that takes more than second will be a problem eventually.</li>\n<li>A table scan might not be noticeable if the table is small enough to fit in memory or disk cache but as it grows it will increasingly be pulled from disk (slow).  This also adds to the disk contention with any other running queries.</li>\n</ul>\n</li>\n<li>Database Concurrency Contention -  Too many users competing for the same resources.   Sometimes caused by table scans.<ul>\n<li>Database locks up resources waiting to serve requests.</li>\n<li>Transactions lock row/tables for writes and other users cannot read from those rows.</li>\n<li>Transactions that span too many rows cause problems if a query has a table scan or update.  Resources are locked for the duration of the transaction so try to limit it to under 1 second.</li>\n<li>There is a limited number of connections to the RDMS available and it’s possible to have them all blocked waiting on resources.</li>\n</ul>\n</li>\n<li>Slow Database Writes - As the table grows in size they often show a “hockey stick” curve for write speeds.<ul>\n<li>The typical culprit are table indexes.  This is especially true when there are multiple indexes on a single large table.</li>\n<li>B-Tree requires more computational and disk resources as they index tree grows in size.</li>\n<li>Limit indexes to what is required and use caution when data gets big.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>There is no such thing as “plain text”.  Text is binary data plus an encoding scheme.<ul>\n<li>When someone says “plain text” always ask “what encoding?”</li>\n<li>Try to use UTF-8 if possible.</li>\n<li>Try to always make encoding explicit in code.  Don’t rely on the platform/system default encoding.  String text = convert(byte[] byteArray, Encoding.UTF);</li>\n<li>Glyph - Visual representation (a).</li>\n<li>Code Point - Numeric representation in character set being used (65).</li>\n<li>Code Unit - Binary representation determined by the encoding scheme (0100001).</li>\n</ul>\n</li>\n<li>Slow Database Table Scans - Query requests a row or range of rows and there are no available indexes to support it.  This causes a sequential scan from to bottom of the table.<ul>\n<li>Any routine query that takes more than second will be a problem eventually.</li>\n<li>A table scan might not be noticeable if the table is small enough to fit in memory or disk cache but as it grows it will increasingly be pulled from disk (slow).  This also adds to the disk contention with any other running queries.</li>\n</ul>\n</li>\n<li>Database Concurrency Contention -  Too many users competing for the same resources.   Sometimes caused by table scans.<ul>\n<li>Database locks up resources waiting to serve requests.</li>\n<li>Transactions lock row/tables for writes and other users cannot read from those rows.</li>\n<li>Transactions that span too many rows cause problems if a query has a table scan or update.  Resources are locked for the duration of the transaction so try to limit it to under 1 second.</li>\n<li>There is a limited number of connections to the RDMS available and it’s possible to have them all blocked waiting on resources.</li>\n</ul>\n</li>\n<li>Slow Database Writes - As the table grows in size they often show a “hockey stick” curve for write speeds.<ul>\n<li>The typical culprit are table indexes.  This is especially true when there are multiple indexes on a single large table.</li>\n<li>B-Tree requires more computational and disk resources as they index tree grows in size.</li>\n<li>Limit indexes to what is required and use caution when data gets big.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Odds & Ends - March 2015","date":"2015-03-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Avoid misunderstandings by making the implicit explicit\n* API Design - Don't operate on one object if you can operate on many instead.  If you do something once, there is a good chance you will do it 100x times. [src](https://medium.com/google-developers/if-i-ve-told-you-once-a0ccdb083e08#.r10n0j9ap)\n* A good tech leads shield engineers from distractions and give support when needed.  Enable people to do their jobs.\n* A good software architect makes the complex simple.  Your job is to reduce complexity.\n* Pretend you had to create a schedule before you knew the requirements or you needed to estimate how long it will take to solve an unsolved problem.\n  * When you don't know what you are going to build then you cannot know how long it will take to build it.\n  * You only really know for sure what you are going to build when you finish it.\n  * A good way to document requirements is to create a user manual.\n* Code can be divided into algorithms that do work on data or coordinators that coordinate external dependencies with algorithms.  Algorithms are easy to test.\n* Agile - build a little, test a little.\n* When you have a mess of short functions plagued by lots of behavior modifying arguments the boundary between component and layers is slowly dissolved, and nobody is sure what particular effect a change may have anymore.\n* Once you get rid of accidental complexity you are left with essential complexity, which cannot be reduced without removing functionality.\n* Reference equality, value equality and identity (PK) equality ... are not equal.\n* One of the benefits of returning ASAP is the happy path isn't identically nested anymore.\n* <u>Identity map pattern</u> - Ensures each object is only loaded once.  One copy of an entity will be loaded at a time per transaction.  One copy that everyone updates so, there are no update anomalies.\n* <u>Immutable Infrastructure</u> - Infrastructure built from golden images.  Changes are made to the images, and the entire infrastructure should be redeployed by destroying the old deployment.","source":"_posts/Odds-Ends-March-2015.md","raw":"---\ntitle: Odds & Ends - March 2015\ndate: 2015-03-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Avoid misunderstandings by making the implicit explicit\n* API Design - Don't operate on one object if you can operate on many instead.  If you do something once, there is a good chance you will do it 100x times. [src](https://medium.com/google-developers/if-i-ve-told-you-once-a0ccdb083e08#.r10n0j9ap)\n* A good tech leads shield engineers from distractions and give support when needed.  Enable people to do their jobs.\n* A good software architect makes the complex simple.  Your job is to reduce complexity.\n* Pretend you had to create a schedule before you knew the requirements or you needed to estimate how long it will take to solve an unsolved problem.\n  * When you don't know what you are going to build then you cannot know how long it will take to build it.\n  * You only really know for sure what you are going to build when you finish it.\n  * A good way to document requirements is to create a user manual.\n* Code can be divided into algorithms that do work on data or coordinators that coordinate external dependencies with algorithms.  Algorithms are easy to test.\n* Agile - build a little, test a little.\n* When you have a mess of short functions plagued by lots of behavior modifying arguments the boundary between component and layers is slowly dissolved, and nobody is sure what particular effect a change may have anymore.\n* Once you get rid of accidental complexity you are left with essential complexity, which cannot be reduced without removing functionality.\n* Reference equality, value equality and identity (PK) equality ... are not equal.\n* One of the benefits of returning ASAP is the happy path isn't identically nested anymore.\n* <u>Identity map pattern</u> - Ensures each object is only loaded once.  One copy of an entity will be loaded at a time per transaction.  One copy that everyone updates so, there are no update anomalies.\n* <u>Immutable Infrastructure</u> - Infrastructure built from golden images.  Changes are made to the images, and the entire infrastructure should be redeployed by destroying the old deployment.","slug":"Odds-Ends-March-2015","published":1,"updated":"2016-04-22T16:45:15.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjv2003jy0kw042tvey5","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Avoid misunderstandings by making the implicit explicit</li>\n<li>API Design - Don’t operate on one object if you can operate on many instead.  If you do something once, there is a good chance you will do it 100x times. <a href=\"https://medium.com/google-developers/if-i-ve-told-you-once-a0ccdb083e08#.r10n0j9ap\" target=\"_blank\" rel=\"external\">src</a></li>\n<li>A good tech leads shield engineers from distractions and give support when needed.  Enable people to do their jobs.</li>\n<li>A good software architect makes the complex simple.  Your job is to reduce complexity.</li>\n<li>Pretend you had to create a schedule before you knew the requirements or you needed to estimate how long it will take to solve an unsolved problem.<ul>\n<li>When you don’t know what you are going to build then you cannot know how long it will take to build it.</li>\n<li>You only really know for sure what you are going to build when you finish it.</li>\n<li>A good way to document requirements is to create a user manual.</li>\n</ul>\n</li>\n<li>Code can be divided into algorithms that do work on data or coordinators that coordinate external dependencies with algorithms.  Algorithms are easy to test.</li>\n<li>Agile - build a little, test a little.</li>\n<li>When you have a mess of short functions plagued by lots of behavior modifying arguments the boundary between component and layers is slowly dissolved, and nobody is sure what particular effect a change may have anymore.</li>\n<li>Once you get rid of accidental complexity you are left with essential complexity, which cannot be reduced without removing functionality.</li>\n<li>Reference equality, value equality and identity (PK) equality … are not equal.</li>\n<li>One of the benefits of returning ASAP is the happy path isn’t identically nested anymore.</li>\n<li><u>Identity map pattern</u> - Ensures each object is only loaded once.  One copy of an entity will be loaded at a time per transaction.  One copy that everyone updates so, there are no update anomalies.</li>\n<li><u>Immutable Infrastructure</u> - Infrastructure built from golden images.  Changes are made to the images, and the entire infrastructure should be redeployed by destroying the old deployment.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Avoid misunderstandings by making the implicit explicit</li>\n<li>API Design - Don’t operate on one object if you can operate on many instead.  If you do something once, there is a good chance you will do it 100x times. <a href=\"https://medium.com/google-developers/if-i-ve-told-you-once-a0ccdb083e08#.r10n0j9ap\">src</a></li>\n<li>A good tech leads shield engineers from distractions and give support when needed.  Enable people to do their jobs.</li>\n<li>A good software architect makes the complex simple.  Your job is to reduce complexity.</li>\n<li>Pretend you had to create a schedule before you knew the requirements or you needed to estimate how long it will take to solve an unsolved problem.<ul>\n<li>When you don’t know what you are going to build then you cannot know how long it will take to build it.</li>\n<li>You only really know for sure what you are going to build when you finish it.</li>\n<li>A good way to document requirements is to create a user manual.</li>\n</ul>\n</li>\n<li>Code can be divided into algorithms that do work on data or coordinators that coordinate external dependencies with algorithms.  Algorithms are easy to test.</li>\n<li>Agile - build a little, test a little.</li>\n<li>When you have a mess of short functions plagued by lots of behavior modifying arguments the boundary between component and layers is slowly dissolved, and nobody is sure what particular effect a change may have anymore.</li>\n<li>Once you get rid of accidental complexity you are left with essential complexity, which cannot be reduced without removing functionality.</li>\n<li>Reference equality, value equality and identity (PK) equality … are not equal.</li>\n<li>One of the benefits of returning ASAP is the happy path isn’t identically nested anymore.</li>\n<li><u>Identity map pattern</u> - Ensures each object is only loaded once.  One copy of an entity will be loaded at a time per transaction.  One copy that everyone updates so, there are no update anomalies.</li>\n<li><u>Immutable Infrastructure</u> - Infrastructure built from golden images.  Changes are made to the images, and the entire infrastructure should be redeployed by destroying the old deployment.</li>\n</ul>\n"},{"title":"Odds & Ends - March 2016","date":"2016-03-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Data center power = 50% for Store/Retrieve/Transmit and 50% for cooling.\n* <u>Social Signal</u> - A Like, +1, etc.\n* Mixin = Small, specific, orthogonal\n* This worked *for me*! The *for me* is silent.\n* The standard you tolerate is the standard you accept.\n* Localize related concerns.  Components that frequency interact should be kept close!  Avoid cross-network calls.  Chatty (fine grained) vs. Chunky (course-grained).\n* Service vs. Libary - Service is updated at the same time as the client while a library can be updated independently.\n* Don't start with generic - Concentrate on your features and specific use cases first.  Later you can think about a generic solution if it satisfies the rule of three.\n* <u>Ad-hoc Analytics</u> - Issues dynamic queries on the data store and system responds.  Used to explore the dataset.\n* <u>Streaming Analytics</u> - Issue static queries and system processes them as time ordered data comes in without storing.  Examples are windows, joins, counting, temporal event sequence detection.\n* Store an immutable sequence of events.  Model data transformations as a series of materialized stages from the original input.  Can debug and test each state independently.  When code changes, you can re-run to get new output (Reprocessing/Regenerating output).\n* <u>Time to first byte</u> - How to measure startup times\n* <u>Environmental Viscosity</u> - When the dev environment is slow devs are tempted to make minimal changes, so they don't have to wait. Do what's easy instead of doing what's right.\n* Are the portions of the code with highest fan-in (used in the most places) exercised by automated tests?\n* Are there volatile parts of the codebase that get changed with every commit?\n* <u>Testing Pyramid</u> - 70% unit tests / 20% integration tests / 10% end to end tests.\n* 1/2 the world is 20000km and a ping is there and back (40000km) at the speed of light so 133ms minimum.\n* Constructor injected dependencies and method arguments are both input arguments applied at different times in the application lifecycle.\n* Represent side effects as *intents to perform actions* transparent objects that expose the details of side effects without actually performing them.\n* It is impossible to completely decouple a code base without damaging coherence.  It is impossible to have fully cohesive code without introducing coupling.\n* <u>Domain Events</u> - Bones of a domain model.  Stable because they only change if the business changes.  Many choices for how to implement behavior and represent in data.","source":"_posts/Odds-Ends-March-2016.md","raw":"---\ntitle: Odds & Ends - March 2016\ndate: 2016-03-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Data center power = 50% for Store/Retrieve/Transmit and 50% for cooling.\n* <u>Social Signal</u> - A Like, +1, etc.\n* Mixin = Small, specific, orthogonal\n* This worked *for me*! The *for me* is silent.\n* The standard you tolerate is the standard you accept.\n* Localize related concerns.  Components that frequency interact should be kept close!  Avoid cross-network calls.  Chatty (fine grained) vs. Chunky (course-grained).\n* Service vs. Libary - Service is updated at the same time as the client while a library can be updated independently.\n* Don't start with generic - Concentrate on your features and specific use cases first.  Later you can think about a generic solution if it satisfies the rule of three.\n* <u>Ad-hoc Analytics</u> - Issues dynamic queries on the data store and system responds.  Used to explore the dataset.\n* <u>Streaming Analytics</u> - Issue static queries and system processes them as time ordered data comes in without storing.  Examples are windows, joins, counting, temporal event sequence detection.\n* Store an immutable sequence of events.  Model data transformations as a series of materialized stages from the original input.  Can debug and test each state independently.  When code changes, you can re-run to get new output (Reprocessing/Regenerating output).\n* <u>Time to first byte</u> - How to measure startup times\n* <u>Environmental Viscosity</u> - When the dev environment is slow devs are tempted to make minimal changes, so they don't have to wait. Do what's easy instead of doing what's right.\n* Are the portions of the code with highest fan-in (used in the most places) exercised by automated tests?\n* Are there volatile parts of the codebase that get changed with every commit?\n* <u>Testing Pyramid</u> - 70% unit tests / 20% integration tests / 10% end to end tests.\n* 1/2 the world is 20000km and a ping is there and back (40000km) at the speed of light so 133ms minimum.\n* Constructor injected dependencies and method arguments are both input arguments applied at different times in the application lifecycle.\n* Represent side effects as *intents to perform actions* transparent objects that expose the details of side effects without actually performing them.\n* It is impossible to completely decouple a code base without damaging coherence.  It is impossible to have fully cohesive code without introducing coupling.\n* <u>Domain Events</u> - Bones of a domain model.  Stable because they only change if the business changes.  Many choices for how to implement behavior and represent in data.","slug":"Odds-Ends-March-2016","published":1,"updated":"2016-04-22T16:46:51.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjv4003ly0kwliudog31","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Data center power = 50% for Store/Retrieve/Transmit and 50% for cooling.</li>\n<li><u>Social Signal</u> - A Like, +1, etc.</li>\n<li>Mixin = Small, specific, orthogonal</li>\n<li>This worked <em>for me</em>! The <em>for me</em> is silent.</li>\n<li>The standard you tolerate is the standard you accept.</li>\n<li>Localize related concerns.  Components that frequency interact should be kept close!  Avoid cross-network calls.  Chatty (fine grained) vs. Chunky (course-grained).</li>\n<li>Service vs. Libary - Service is updated at the same time as the client while a library can be updated independently.</li>\n<li>Don’t start with generic - Concentrate on your features and specific use cases first.  Later you can think about a generic solution if it satisfies the rule of three.</li>\n<li><u>Ad-hoc Analytics</u> - Issues dynamic queries on the data store and system responds.  Used to explore the dataset.</li>\n<li><u>Streaming Analytics</u> - Issue static queries and system processes them as time ordered data comes in without storing.  Examples are windows, joins, counting, temporal event sequence detection.</li>\n<li>Store an immutable sequence of events.  Model data transformations as a series of materialized stages from the original input.  Can debug and test each state independently.  When code changes, you can re-run to get new output (Reprocessing/Regenerating output).</li>\n<li><u>Time to first byte</u> - How to measure startup times</li>\n<li><u>Environmental Viscosity</u> - When the dev environment is slow devs are tempted to make minimal changes, so they don’t have to wait. Do what’s easy instead of doing what’s right.</li>\n<li>Are the portions of the code with highest fan-in (used in the most places) exercised by automated tests?</li>\n<li>Are there volatile parts of the codebase that get changed with every commit?</li>\n<li><u>Testing Pyramid</u> - 70% unit tests / 20% integration tests / 10% end to end tests.</li>\n<li>1/2 the world is 20000km and a ping is there and back (40000km) at the speed of light so 133ms minimum.</li>\n<li>Constructor injected dependencies and method arguments are both input arguments applied at different times in the application lifecycle.</li>\n<li>Represent side effects as <em>intents to perform actions</em> transparent objects that expose the details of side effects without actually performing them.</li>\n<li>It is impossible to completely decouple a code base without damaging coherence.  It is impossible to have fully cohesive code without introducing coupling.</li>\n<li><u>Domain Events</u> - Bones of a domain model.  Stable because they only change if the business changes.  Many choices for how to implement behavior and represent in data.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Data center power = 50% for Store/Retrieve/Transmit and 50% for cooling.</li>\n<li><u>Social Signal</u> - A Like, +1, etc.</li>\n<li>Mixin = Small, specific, orthogonal</li>\n<li>This worked <em>for me</em>! The <em>for me</em> is silent.</li>\n<li>The standard you tolerate is the standard you accept.</li>\n<li>Localize related concerns.  Components that frequency interact should be kept close!  Avoid cross-network calls.  Chatty (fine grained) vs. Chunky (course-grained).</li>\n<li>Service vs. Libary - Service is updated at the same time as the client while a library can be updated independently.</li>\n<li>Don’t start with generic - Concentrate on your features and specific use cases first.  Later you can think about a generic solution if it satisfies the rule of three.</li>\n<li><u>Ad-hoc Analytics</u> - Issues dynamic queries on the data store and system responds.  Used to explore the dataset.</li>\n<li><u>Streaming Analytics</u> - Issue static queries and system processes them as time ordered data comes in without storing.  Examples are windows, joins, counting, temporal event sequence detection.</li>\n<li>Store an immutable sequence of events.  Model data transformations as a series of materialized stages from the original input.  Can debug and test each state independently.  When code changes, you can re-run to get new output (Reprocessing/Regenerating output).</li>\n<li><u>Time to first byte</u> - How to measure startup times</li>\n<li><u>Environmental Viscosity</u> - When the dev environment is slow devs are tempted to make minimal changes, so they don’t have to wait. Do what’s easy instead of doing what’s right.</li>\n<li>Are the portions of the code with highest fan-in (used in the most places) exercised by automated tests?</li>\n<li>Are there volatile parts of the codebase that get changed with every commit?</li>\n<li><u>Testing Pyramid</u> - 70% unit tests / 20% integration tests / 10% end to end tests.</li>\n<li>1/2 the world is 20000km and a ping is there and back (40000km) at the speed of light so 133ms minimum.</li>\n<li>Constructor injected dependencies and method arguments are both input arguments applied at different times in the application lifecycle.</li>\n<li>Represent side effects as <em>intents to perform actions</em> transparent objects that expose the details of side effects without actually performing them.</li>\n<li>It is impossible to completely decouple a code base without damaging coherence.  It is impossible to have fully cohesive code without introducing coupling.</li>\n<li><u>Domain Events</u> - Bones of a domain model.  Stable because they only change if the business changes.  Many choices for how to implement behavior and represent in data.</li>\n</ul>\n"},{"title":"Odds & Ends - March 2014","date":"2014-03-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* 5 questions to ask when creating tests:\n  * What if null?\n  * What if zero?\n  * What if one item?\n  * What if three items?  (Bugs often show up on middle rows not the first/last)\n  * What if many items?\n* Don't add cross-cutting concerns via inheritance.  If you extend a class to add support for logging/caching you are adding a new responsibility (violating SRP).\n* Update performance suffers from denormalization.  When you update a duplicated value on a 1NF table you will have to update every row that has that value instead of just one row in 3NF.  Solutions:\n  * Don't update - It's not a problem if you are only inserting into an OLAP database.\n  * Normalize your schema (3NF) - Why are you updating a denormalized data warehouse style database?\n  * Accept inconsistent data - Update a few rows at a time in a commit.\n  * Accept locking penalty - Page/Row locks will have to be taken out for the row being updated potentially blocking other sessions.\n* Normalized Schema\n  * Less storage used\n  * Affect fewer records when updating\n* Denormalized Schema\n  * Possibly better at PK lookups as you may only need to hit one table.\n  * Suffers from concurrency and deadlock issues if updating.\n* Distributed Consensus Algorithm - Agreement on a single value by multiple nodes.","source":"_posts/Odds-Ends-March-2014.md","raw":"---\ntitle: Odds & Ends - March 2014\ndate: 2014-03-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* 5 questions to ask when creating tests:\n  * What if null?\n  * What if zero?\n  * What if one item?\n  * What if three items?  (Bugs often show up on middle rows not the first/last)\n  * What if many items?\n* Don't add cross-cutting concerns via inheritance.  If you extend a class to add support for logging/caching you are adding a new responsibility (violating SRP).\n* Update performance suffers from denormalization.  When you update a duplicated value on a 1NF table you will have to update every row that has that value instead of just one row in 3NF.  Solutions:\n  * Don't update - It's not a problem if you are only inserting into an OLAP database.\n  * Normalize your schema (3NF) - Why are you updating a denormalized data warehouse style database?\n  * Accept inconsistent data - Update a few rows at a time in a commit.\n  * Accept locking penalty - Page/Row locks will have to be taken out for the row being updated potentially blocking other sessions.\n* Normalized Schema\n  * Less storage used\n  * Affect fewer records when updating\n* Denormalized Schema\n  * Possibly better at PK lookups as you may only need to hit one table.\n  * Suffers from concurrency and deadlock issues if updating.\n* Distributed Consensus Algorithm - Agreement on a single value by multiple nodes.","slug":"Odds-Ends-March-2014","published":1,"updated":"2016-04-14T14:57:21.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjv6003oy0kw0qpuok5f","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>5 questions to ask when creating tests:<ul>\n<li>What if null?</li>\n<li>What if zero?</li>\n<li>What if one item?</li>\n<li>What if three items?  (Bugs often show up on middle rows not the first/last)</li>\n<li>What if many items?</li>\n</ul>\n</li>\n<li>Don’t add cross-cutting concerns via inheritance.  If you extend a class to add support for logging/caching you are adding a new responsibility (violating SRP).</li>\n<li>Update performance suffers from denormalization.  When you update a duplicated value on a 1NF table you will have to update every row that has that value instead of just one row in 3NF.  Solutions:<ul>\n<li>Don’t update - It’s not a problem if you are only inserting into an OLAP database.</li>\n<li>Normalize your schema (3NF) - Why are you updating a denormalized data warehouse style database?</li>\n<li>Accept inconsistent data - Update a few rows at a time in a commit.</li>\n<li>Accept locking penalty - Page/Row locks will have to be taken out for the row being updated potentially blocking other sessions.</li>\n</ul>\n</li>\n<li>Normalized Schema<ul>\n<li>Less storage used</li>\n<li>Affect fewer records when updating</li>\n</ul>\n</li>\n<li>Denormalized Schema<ul>\n<li>Possibly better at PK lookups as you may only need to hit one table.</li>\n<li>Suffers from concurrency and deadlock issues if updating.</li>\n</ul>\n</li>\n<li>Distributed Consensus Algorithm - Agreement on a single value by multiple nodes.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>5 questions to ask when creating tests:<ul>\n<li>What if null?</li>\n<li>What if zero?</li>\n<li>What if one item?</li>\n<li>What if three items?  (Bugs often show up on middle rows not the first/last)</li>\n<li>What if many items?</li>\n</ul>\n</li>\n<li>Don’t add cross-cutting concerns via inheritance.  If you extend a class to add support for logging/caching you are adding a new responsibility (violating SRP).</li>\n<li>Update performance suffers from denormalization.  When you update a duplicated value on a 1NF table you will have to update every row that has that value instead of just one row in 3NF.  Solutions:<ul>\n<li>Don’t update - It’s not a problem if you are only inserting into an OLAP database.</li>\n<li>Normalize your schema (3NF) - Why are you updating a denormalized data warehouse style database?</li>\n<li>Accept inconsistent data - Update a few rows at a time in a commit.</li>\n<li>Accept locking penalty - Page/Row locks will have to be taken out for the row being updated potentially blocking other sessions.</li>\n</ul>\n</li>\n<li>Normalized Schema<ul>\n<li>Less storage used</li>\n<li>Affect fewer records when updating</li>\n</ul>\n</li>\n<li>Denormalized Schema<ul>\n<li>Possibly better at PK lookups as you may only need to hit one table.</li>\n<li>Suffers from concurrency and deadlock issues if updating.</li>\n</ul>\n</li>\n<li>Distributed Consensus Algorithm - Agreement on a single value by multiple nodes.</li>\n</ul>\n"},{"title":"Odds & Ends - June 2013","date":"2013-06-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Information-theoretic security - Derives security from informational theory instead of computational complexity.  It cannot be broken even when the adversary has unlimited computing resources as they do not have enough information to break the encryption.\n  * Example: Onetime pad.\n* Computationally secure - Secure assuming adversary is computationally limited.\n  * Example: RSA, Diffie-Hellman\n* **API Design**\n  * Don't make the return type of method depend on the value of an argument.  It makes it hard to figure out relationships.\n  * Avoid flag arguments intended to change the behavior of a method in some way.  The call is more readable if the API has two separate methods.\n  * Avoid confusion as to whether a method returns a new object or modifies (mutates) an object in place.  Show intent!\n   * Ex: foo.sort() doesn't return value so it must modify in place.\n* *When to assert*\n  * Defensive programming\n  * Run-time checks on program logic (poor man's unit testing)\n  * Checking contracts (pre-conditions/post-conditions)\n  * Program invariants\n  * Check for \"won't happen\" edge cases\n  * Confirm documentation\n  * Never use if failure is likely because asserts will get compiled away in release builds.","source":"_posts/Odds-Ends-June-2013.md","raw":"---\ntitle: Odds & Ends - June 2013\ndate: 2013-06-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Information-theoretic security - Derives security from informational theory instead of computational complexity.  It cannot be broken even when the adversary has unlimited computing resources as they do not have enough information to break the encryption.\n  * Example: Onetime pad.\n* Computationally secure - Secure assuming adversary is computationally limited.\n  * Example: RSA, Diffie-Hellman\n* **API Design**\n  * Don't make the return type of method depend on the value of an argument.  It makes it hard to figure out relationships.\n  * Avoid flag arguments intended to change the behavior of a method in some way.  The call is more readable if the API has two separate methods.\n  * Avoid confusion as to whether a method returns a new object or modifies (mutates) an object in place.  Show intent!\n   * Ex: foo.sort() doesn't return value so it must modify in place.\n* *When to assert*\n  * Defensive programming\n  * Run-time checks on program logic (poor man's unit testing)\n  * Checking contracts (pre-conditions/post-conditions)\n  * Program invariants\n  * Check for \"won't happen\" edge cases\n  * Confirm documentation\n  * Never use if failure is likely because asserts will get compiled away in release builds.","slug":"Odds-Ends-June-2013","published":1,"updated":"2016-04-14T14:57:36.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjv8003qy0kwgsp2ozj0","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Information-theoretic security - Derives security from informational theory instead of computational complexity.  It cannot be broken even when the adversary has unlimited computing resources as they do not have enough information to break the encryption.<ul>\n<li>Example: Onetime pad.</li>\n</ul>\n</li>\n<li>Computationally secure - Secure assuming adversary is computationally limited.<ul>\n<li>Example: RSA, Diffie-Hellman</li>\n</ul>\n</li>\n<li><strong>API Design</strong><ul>\n<li>Don’t make the return type of method depend on the value of an argument.  It makes it hard to figure out relationships.</li>\n<li>Avoid flag arguments intended to change the behavior of a method in some way.  The call is more readable if the API has two separate methods.</li>\n<li>Avoid confusion as to whether a method returns a new object or modifies (mutates) an object in place.  Show intent!<ul>\n<li>Ex: foo.sort() doesn’t return value so it must modify in place.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>When to assert</em><ul>\n<li>Defensive programming</li>\n<li>Run-time checks on program logic (poor man’s unit testing)</li>\n<li>Checking contracts (pre-conditions/post-conditions)</li>\n<li>Program invariants</li>\n<li>Check for “won’t happen” edge cases</li>\n<li>Confirm documentation</li>\n<li>Never use if failure is likely because asserts will get compiled away in release builds.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Information-theoretic security - Derives security from informational theory instead of computational complexity.  It cannot be broken even when the adversary has unlimited computing resources as they do not have enough information to break the encryption.<ul>\n<li>Example: Onetime pad.</li>\n</ul>\n</li>\n<li>Computationally secure - Secure assuming adversary is computationally limited.<ul>\n<li>Example: RSA, Diffie-Hellman</li>\n</ul>\n</li>\n<li><strong>API Design</strong><ul>\n<li>Don’t make the return type of method depend on the value of an argument.  It makes it hard to figure out relationships.</li>\n<li>Avoid flag arguments intended to change the behavior of a method in some way.  The call is more readable if the API has two separate methods.</li>\n<li>Avoid confusion as to whether a method returns a new object or modifies (mutates) an object in place.  Show intent!<ul>\n<li>Ex: foo.sort() doesn’t return value so it must modify in place.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>When to assert</em><ul>\n<li>Defensive programming</li>\n<li>Run-time checks on program logic (poor man’s unit testing)</li>\n<li>Checking contracts (pre-conditions/post-conditions)</li>\n<li>Program invariants</li>\n<li>Check for “won’t happen” edge cases</li>\n<li>Confirm documentation</li>\n<li>Never use if failure is likely because asserts will get compiled away in release builds.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Odds & Ends - September 2013","date":"2013-08-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* An entity is identified by an ID whereas a value object is identified by its value.\n* Enumerators flatten a collection so that the members can be accessed sequentially.\n* The heart of OO is the encapsulation of data and members in a coherent class/object.\n  * A class should fulfill the contact implied by its interface(s) so the caller need not know how it's implemented.\n  * Objects communicate by sending each other messages through method calls.\n* Critique code, not people.  Teach people they are not their code.\n* Null return values should be avoided.  It leads to null guard clauses at the top of every method which clutters the code.\n* String and int make good hashmap keys because they are immutable.  If the key could be altered in a way the changed its hashcode we wouldn't be able to find the object in the hashmap anymore!\n* Building software is the process of finding solutions to complex problems, which involves perspective (understanding the problem) and heuristics (a means of solving it).  Experts tend to have similar viewpoints while novices bring new ways of thinking.  \n* Give novices projects that involve:\n  * Autonomy - Something to be responsible for.  Don't just leave novices alone in the corner to \"figure it out\".\n  * Mastery - People are incentivized by a challenge.\n  * Purpose - a meaningful part of the project.  Not just a pile of IE6 bugs to slog through.\n* Cache Lines - Get the byte you asked for and the rest of the 64-byte block for free.\n* Async/Await gives the illusion of sequential behavior.  Await marks the position where a task should resume.  It may not resume on the same thread of execution which causes GUI to blow up.","source":"_posts/Odds-Ends-September-2013.md","raw":"---\ntitle: Odds & Ends - September 2013\ndate: 2013-08-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* An entity is identified by an ID whereas a value object is identified by its value.\n* Enumerators flatten a collection so that the members can be accessed sequentially.\n* The heart of OO is the encapsulation of data and members in a coherent class/object.\n  * A class should fulfill the contact implied by its interface(s) so the caller need not know how it's implemented.\n  * Objects communicate by sending each other messages through method calls.\n* Critique code, not people.  Teach people they are not their code.\n* Null return values should be avoided.  It leads to null guard clauses at the top of every method which clutters the code.\n* String and int make good hashmap keys because they are immutable.  If the key could be altered in a way the changed its hashcode we wouldn't be able to find the object in the hashmap anymore!\n* Building software is the process of finding solutions to complex problems, which involves perspective (understanding the problem) and heuristics (a means of solving it).  Experts tend to have similar viewpoints while novices bring new ways of thinking.  \n* Give novices projects that involve:\n  * Autonomy - Something to be responsible for.  Don't just leave novices alone in the corner to \"figure it out\".\n  * Mastery - People are incentivized by a challenge.\n  * Purpose - a meaningful part of the project.  Not just a pile of IE6 bugs to slog through.\n* Cache Lines - Get the byte you asked for and the rest of the 64-byte block for free.\n* Async/Await gives the illusion of sequential behavior.  Await marks the position where a task should resume.  It may not resume on the same thread of execution which causes GUI to blow up.","slug":"Odds-Ends-September-2013","published":1,"updated":"2016-04-14T14:57:11.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvb003ty0kwjlb5bv2m","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>An entity is identified by an ID whereas a value object is identified by its value.</li>\n<li>Enumerators flatten a collection so that the members can be accessed sequentially.</li>\n<li>The heart of OO is the encapsulation of data and members in a coherent class/object.<ul>\n<li>A class should fulfill the contact implied by its interface(s) so the caller need not know how it’s implemented.</li>\n<li>Objects communicate by sending each other messages through method calls.</li>\n</ul>\n</li>\n<li>Critique code, not people.  Teach people they are not their code.</li>\n<li>Null return values should be avoided.  It leads to null guard clauses at the top of every method which clutters the code.</li>\n<li>String and int make good hashmap keys because they are immutable.  If the key could be altered in a way the changed its hashcode we wouldn’t be able to find the object in the hashmap anymore!</li>\n<li>Building software is the process of finding solutions to complex problems, which involves perspective (understanding the problem) and heuristics (a means of solving it).  Experts tend to have similar viewpoints while novices bring new ways of thinking.  </li>\n<li>Give novices projects that involve:<ul>\n<li>Autonomy - Something to be responsible for.  Don’t just leave novices alone in the corner to “figure it out”.</li>\n<li>Mastery - People are incentivized by a challenge.</li>\n<li>Purpose - a meaningful part of the project.  Not just a pile of IE6 bugs to slog through.</li>\n</ul>\n</li>\n<li>Cache Lines - Get the byte you asked for and the rest of the 64-byte block for free.</li>\n<li>Async/Await gives the illusion of sequential behavior.  Await marks the position where a task should resume.  It may not resume on the same thread of execution which causes GUI to blow up.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>An entity is identified by an ID whereas a value object is identified by its value.</li>\n<li>Enumerators flatten a collection so that the members can be accessed sequentially.</li>\n<li>The heart of OO is the encapsulation of data and members in a coherent class/object.<ul>\n<li>A class should fulfill the contact implied by its interface(s) so the caller need not know how it’s implemented.</li>\n<li>Objects communicate by sending each other messages through method calls.</li>\n</ul>\n</li>\n<li>Critique code, not people.  Teach people they are not their code.</li>\n<li>Null return values should be avoided.  It leads to null guard clauses at the top of every method which clutters the code.</li>\n<li>String and int make good hashmap keys because they are immutable.  If the key could be altered in a way the changed its hashcode we wouldn’t be able to find the object in the hashmap anymore!</li>\n<li>Building software is the process of finding solutions to complex problems, which involves perspective (understanding the problem) and heuristics (a means of solving it).  Experts tend to have similar viewpoints while novices bring new ways of thinking.  </li>\n<li>Give novices projects that involve:<ul>\n<li>Autonomy - Something to be responsible for.  Don’t just leave novices alone in the corner to “figure it out”.</li>\n<li>Mastery - People are incentivized by a challenge.</li>\n<li>Purpose - a meaningful part of the project.  Not just a pile of IE6 bugs to slog through.</li>\n</ul>\n</li>\n<li>Cache Lines - Get the byte you asked for and the rest of the 64-byte block for free.</li>\n<li>Async/Await gives the illusion of sequential behavior.  Await marks the position where a task should resume.  It may not resume on the same thread of execution which causes GUI to blow up.</li>\n</ul>\n"},{"title":"Odds & Ends - September 2012","date":"2012-09-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* <u>The three virtues of programmers</u> - Hubris, Impatience, and Laziness. [src](http://c2.com/cgi/wiki?LazinessImpatienceHubris)\n* <u>The curse of the gifted</u> - A tendency to lean on your natural ability too much, because you have always been rewarded for doing that and self-discipline would take actual work.   [src](https://lwn.net/2000/0824/a/esr-sharing.php3)\n* <u>Classic 3 Tier</u> - Presentation / Buisness Logic (rules) / Data Source (queries)\n* Typing Types\n  * <u>Exact typing</u> - Only ducks are ducks\n  * <u>Interface typing</u> - If it says it's a duck, \n  * <u>Duck typing</u> - If it quacks like a duck then we don't care as long as it has the fields/methods we need.\n* <u>Mark and Sweep GC</u> - Pause, find all variables in current scope, find all resources that are reachable from variables in scope and free the rest.  AKA \"stop the world GC\".\n* <u>Reference counting GC</u> - Each resource has a count of # of places it's being used (references).  When the code is done with the resource, the count will decrease to zero so it can't be freed. Vulnerable to circular references because counts will never reach zero.\n* <u>Dynamic Dispatch</u> - Not knowing what function you will call until runtime.\n* <u>Encoding Scheme</u> - Encodes data for a specific purpose (easier to transmit, read, convert to new format).\n* More code = Harder to fit in IL cache so more cache evictions and harder to inline.\n* More branches = more branch predictions = more branch mispredictions.\n* <u>Dependancy Inversion Principle</u> - program to interfaces or abstract base classes.\n* <u>System call</u> - Userspace request of a kernel service.\n* <u>High Cohesion</u> - Keeping parts of a codebase that are related to each other in single place.\n* <u>Low coupling</u> - Separating unrelated parts of the codebase as much as possible.\n* <u>Domain Event</u> - Anything that happens that is of interest to a domain expert.\n* You call a library, a framework calls you.  A library is a tool ... A framework is a way of life. [src](https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library)\n* Pure functions > Functions with state > Functions with side effects > Factory functions.\n* A member function has a hidden argument called ''this'' that is the specific object we are operating on (the context of the function call).","source":"_posts/Odds-Ends-September-2012.md","raw":"---\ntitle: 'Odds & Ends - September 2012'\ndate: 2012-09-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* <u>The three virtues of programmers</u> - Hubris, Impatience, and Laziness. [src](http://c2.com/cgi/wiki?LazinessImpatienceHubris)\n* <u>The curse of the gifted</u> - A tendency to lean on your natural ability too much, because you have always been rewarded for doing that and self-discipline would take actual work.   [src](https://lwn.net/2000/0824/a/esr-sharing.php3)\n* <u>Classic 3 Tier</u> - Presentation / Buisness Logic (rules) / Data Source (queries)\n* Typing Types\n  * <u>Exact typing</u> - Only ducks are ducks\n  * <u>Interface typing</u> - If it says it's a duck, \n  * <u>Duck typing</u> - If it quacks like a duck then we don't care as long as it has the fields/methods we need.\n* <u>Mark and Sweep GC</u> - Pause, find all variables in current scope, find all resources that are reachable from variables in scope and free the rest.  AKA \"stop the world GC\".\n* <u>Reference counting GC</u> - Each resource has a count of # of places it's being used (references).  When the code is done with the resource, the count will decrease to zero so it can't be freed. Vulnerable to circular references because counts will never reach zero.\n* <u>Dynamic Dispatch</u> - Not knowing what function you will call until runtime.\n* <u>Encoding Scheme</u> - Encodes data for a specific purpose (easier to transmit, read, convert to new format).\n* More code = Harder to fit in IL cache so more cache evictions and harder to inline.\n* More branches = more branch predictions = more branch mispredictions.\n* <u>Dependancy Inversion Principle</u> - program to interfaces or abstract base classes.\n* <u>System call</u> - Userspace request of a kernel service.\n* <u>High Cohesion</u> - Keeping parts of a codebase that are related to each other in single place.\n* <u>Low coupling</u> - Separating unrelated parts of the codebase as much as possible.\n* <u>Domain Event</u> - Anything that happens that is of interest to a domain expert.\n* You call a library, a framework calls you.  A library is a tool ... A framework is a way of life. [src](https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library)\n* Pure functions > Functions with state > Functions with side effects > Factory functions.\n* A member function has a hidden argument called ''this'' that is the specific object we are operating on (the context of the function call).","slug":"Odds-Ends-September-2012","published":1,"updated":"2016-04-22T16:46:13.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvc003vy0kw2a7ppnn4","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li><u>The three virtues of programmers</u> - Hubris, Impatience, and Laziness. <a href=\"http://c2.com/cgi/wiki?LazinessImpatienceHubris\" target=\"_blank\" rel=\"external\">src</a></li>\n<li><u>The curse of the gifted</u> - A tendency to lean on your natural ability too much, because you have always been rewarded for doing that and self-discipline would take actual work.   <a href=\"https://lwn.net/2000/0824/a/esr-sharing.php3\" target=\"_blank\" rel=\"external\">src</a></li>\n<li><u>Classic 3 Tier</u> - Presentation / Buisness Logic (rules) / Data Source (queries)</li>\n<li>Typing Types<ul>\n<li><u>Exact typing</u> - Only ducks are ducks</li>\n<li><u>Interface typing</u> - If it says it’s a duck, </li>\n<li><u>Duck typing</u> - If it quacks like a duck then we don’t care as long as it has the fields/methods we need.</li>\n</ul>\n</li>\n<li><u>Mark and Sweep GC</u> - Pause, find all variables in current scope, find all resources that are reachable from variables in scope and free the rest.  AKA “stop the world GC”.</li>\n<li><u>Reference counting GC</u> - Each resource has a count of # of places it’s being used (references).  When the code is done with the resource, the count will decrease to zero so it can’t be freed. Vulnerable to circular references because counts will never reach zero.</li>\n<li><u>Dynamic Dispatch</u> - Not knowing what function you will call until runtime.</li>\n<li><u>Encoding Scheme</u> - Encodes data for a specific purpose (easier to transmit, read, convert to new format).</li>\n<li>More code = Harder to fit in IL cache so more cache evictions and harder to inline.</li>\n<li>More branches = more branch predictions = more branch mispredictions.</li>\n<li><u>Dependancy Inversion Principle</u> - program to interfaces or abstract base classes.</li>\n<li><u>System call</u> - Userspace request of a kernel service.</li>\n<li><u>High Cohesion</u> - Keeping parts of a codebase that are related to each other in single place.</li>\n<li><u>Low coupling</u> - Separating unrelated parts of the codebase as much as possible.</li>\n<li><u>Domain Event</u> - Anything that happens that is of interest to a domain expert.</li>\n<li>You call a library, a framework calls you.  A library is a tool … A framework is a way of life. <a href=\"https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library\" target=\"_blank\" rel=\"external\">src</a></li>\n<li>Pure functions &gt; Functions with state &gt; Functions with side effects &gt; Factory functions.</li>\n<li>A member function has a hidden argument called ‘’this’’ that is the specific object we are operating on (the context of the function call).</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li><u>The three virtues of programmers</u> - Hubris, Impatience, and Laziness. <a href=\"http://c2.com/cgi/wiki?LazinessImpatienceHubris\">src</a></li>\n<li><u>The curse of the gifted</u> - A tendency to lean on your natural ability too much, because you have always been rewarded for doing that and self-discipline would take actual work.   <a href=\"https://lwn.net/2000/0824/a/esr-sharing.php3\">src</a></li>\n<li><u>Classic 3 Tier</u> - Presentation / Buisness Logic (rules) / Data Source (queries)</li>\n<li>Typing Types<ul>\n<li><u>Exact typing</u> - Only ducks are ducks</li>\n<li><u>Interface typing</u> - If it says it’s a duck, </li>\n<li><u>Duck typing</u> - If it quacks like a duck then we don’t care as long as it has the fields/methods we need.</li>\n</ul>\n</li>\n<li><u>Mark and Sweep GC</u> - Pause, find all variables in current scope, find all resources that are reachable from variables in scope and free the rest.  AKA “stop the world GC”.</li>\n<li><u>Reference counting GC</u> - Each resource has a count of # of places it’s being used (references).  When the code is done with the resource, the count will decrease to zero so it can’t be freed. Vulnerable to circular references because counts will never reach zero.</li>\n<li><u>Dynamic Dispatch</u> - Not knowing what function you will call until runtime.</li>\n<li><u>Encoding Scheme</u> - Encodes data for a specific purpose (easier to transmit, read, convert to new format).</li>\n<li>More code = Harder to fit in IL cache so more cache evictions and harder to inline.</li>\n<li>More branches = more branch predictions = more branch mispredictions.</li>\n<li><u>Dependancy Inversion Principle</u> - program to interfaces or abstract base classes.</li>\n<li><u>System call</u> - Userspace request of a kernel service.</li>\n<li><u>High Cohesion</u> - Keeping parts of a codebase that are related to each other in single place.</li>\n<li><u>Low coupling</u> - Separating unrelated parts of the codebase as much as possible.</li>\n<li><u>Domain Event</u> - Anything that happens that is of interest to a domain expert.</li>\n<li>You call a library, a framework calls you.  A library is a tool … A framework is a way of life. <a href=\"https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library\">src</a></li>\n<li>Pure functions &gt; Functions with state &gt; Functions with side effects &gt; Factory functions.</li>\n<li>A member function has a hidden argument called ‘’this’’ that is the specific object we are operating on (the context of the function call).</li>\n</ul>\n"},{"title":"One second code: Do YOU know how much your computer can do in a second?","date":"2016-01-01T16:54:02.000Z","link":"https://computers-are-fast.github.io/","_content":"A fun quiz on estimating how much work (iterations/requests/etc.) a computer can do in 1 second.\n\n[Link](https://computers-are-fast.github.io/)","source":"_posts/One-second-code-Do-YOU-know-how-much-your-computer-can-do-in-a-second.md","raw":"---\ntitle: 'One second code: Do YOU know how much your computer can do in a second?'\ndate: 2016-01-01 16:54:02\nlink: https://computers-are-fast.github.io/\ntags:\n- Gamification\n---\nA fun quiz on estimating how much work (iterations/requests/etc.) a computer can do in 1 second.\n\n[Link](https://computers-are-fast.github.io/)","slug":"One-second-code-Do-YOU-know-how-much-your-computer-can-do-in-a-second","published":1,"updated":"2016-04-14T14:56:54.086Z","comments":1,"layout":"post","photos":[],"_id":"cioeidjvd003yy0kwxlgh1qvm","content":"<p>A fun quiz on estimating how much work (iterations/requests/etc.) a computer can do in 1 second.</p>\n<p><a href=\"https://computers-are-fast.github.io/\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>A fun quiz on estimating how much work (iterations/requests/etc.) a computer can do in 1 second.</p>\n<p><a href=\"https://computers-are-fast.github.io/\">Link</a></p>\n"},{"title":"Pattern Oriented Software Architectures for Concurrent and Networked Software","date":"2013-05-14T00:00:00.000Z","_content":"- Gives a sense for how patterns evolve depending on their environment and the problem they are trying to address.\n- Shows how patterns evolve from language level to framework level constructs.\n- I have mixed feelings about using ACE as an example.  Distributed objects don't seem to have survived contact with the internet world.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Pattern-Oriented%20Software%20Architectures%20for%20Concurrent%20and%20Networked%20Software%202013%20-%20Coursera.pdf)\n[Course Link](https://www.coursera.org/course/posasoftware)","source":"_posts/Pattern-Oriented-Software-Architectures-for-Concurrent-and-Networked-Software.md","raw":"---\ntitle: Pattern Oriented Software Architectures for Concurrent and Networked Software\ndate: 2013-05-14 00:00:00\ntags:\n- Courses\n- MOOC\n- μReview\n---\n- Gives a sense for how patterns evolve depending on their environment and the problem they are trying to address.\n- Shows how patterns evolve from language level to framework level constructs.\n- I have mixed feelings about using ACE as an example.  Distributed objects don't seem to have survived contact with the internet world.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Pattern-Oriented%20Software%20Architectures%20for%20Concurrent%20and%20Networked%20Software%202013%20-%20Coursera.pdf)\n[Course Link](https://www.coursera.org/course/posasoftware)","slug":"Pattern-Oriented-Software-Architectures-for-Concurrent-and-Networked-Software","published":1,"updated":"2016-04-14T14:56:50.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvf0040y0kwon7m0l65","content":"<ul>\n<li>Gives a sense for how patterns evolve depending on their environment and the problem they are trying to address.</li>\n<li>Shows how patterns evolve from language level to framework level constructs.</li>\n<li>I have mixed feelings about using ACE as an example.  Distributed objects don’t seem to have survived contact with the internet world.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Pattern-Oriented%20Software%20Architectures%20for%20Concurrent%20and%20Networked%20Software%202013%20-%20Coursera.pdf\" target=\"_blank\" rel=\"external\">Certificate</a><br><a href=\"https://www.coursera.org/course/posasoftware\" target=\"_blank\" rel=\"external\">Course Link</a></p>\n","excerpt":"","more":"<ul>\n<li>Gives a sense for how patterns evolve depending on their environment and the problem they are trying to address.</li>\n<li>Shows how patterns evolve from language level to framework level constructs.</li>\n<li>I have mixed feelings about using ACE as an example.  Distributed objects don’t seem to have survived contact with the internet world.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Pattern-Oriented%20Software%20Architectures%20for%20Concurrent%20and%20Networked%20Software%202013%20-%20Coursera.pdf\">Certificate</a><br><a href=\"https://www.coursera.org/course/posasoftware\">Course Link</a></p>\n"},{"title":"M101P MongoDB for Developers","date":"2014-11-04T00:00:00.000Z","_content":"- Good course on how to build APIs with python and mongoDB. \n- Does a good job explaining the sweet spot where document databases work well.\n- I'm not sure about the long-term viability of document databases.  It seems like RDMS vendors are just going to adopt document database features.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/M101P%20MongoDB%20for%20Developers%202013%20-%20MongoDB%20University.pdf)\n[Course Link](https://university.mongodb.com/courses/M101P/about)","source":"_posts/M101P-MongoDB-for-Developers.md","raw":"---\ntitle: M101P MongoDB for Developers\ndate: 2014-11-04 00:00:00\ntags:\n- Courses\n- MOOC\n- μReview\n---\n- Good course on how to build APIs with python and mongoDB. \n- Does a good job explaining the sweet spot where document databases work well.\n- I'm not sure about the long-term viability of document databases.  It seems like RDMS vendors are just going to adopt document database features.\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/M101P%20MongoDB%20for%20Developers%202013%20-%20MongoDB%20University.pdf)\n[Course Link](https://university.mongodb.com/courses/M101P/about)","slug":"M101P-MongoDB-for-Developers","published":1,"updated":"2016-04-14T14:57:53.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvg0043y0kwcf29kh1x","content":"<ul>\n<li>Good course on how to build APIs with python and mongoDB. </li>\n<li>Does a good job explaining the sweet spot where document databases work well.</li>\n<li>I’m not sure about the long-term viability of document databases.  It seems like RDMS vendors are just going to adopt document database features.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/M101P%20MongoDB%20for%20Developers%202013%20-%20MongoDB%20University.pdf\" target=\"_blank\" rel=\"external\">Certificate</a><br><a href=\"https://university.mongodb.com/courses/M101P/about\" target=\"_blank\" rel=\"external\">Course Link</a></p>\n","excerpt":"","more":"<ul>\n<li>Good course on how to build APIs with python and mongoDB. </li>\n<li>Does a good job explaining the sweet spot where document databases work well.</li>\n<li>I’m not sure about the long-term viability of document databases.  It seems like RDMS vendors are just going to adopt document database features.</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/M101P%20MongoDB%20for%20Developers%202013%20-%20MongoDB%20University.pdf\">Certificate</a><br><a href=\"https://university.mongodb.com/courses/M101P/about\">Course Link</a></p>\n"},{"title":"Odds & Ends - September 2014","date":"2014-09-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Errors are values.\n* DRY - Is having a single source of truth not avoiding copying and pasting code.\n* When you cross a service boundary things that appear to be the same may have a different context and different data store.  Avoid sharing code between boundaries that have different contexts (Microservices).\n* Repository Pattern - Layer that exists between business logic and data store.  Isolates your code that interacts with your data store in one place.\n* Decorator Pattern - Enabling a chain of behavior determined by composition not inheritance.\n* A bad test breaks in response to any change in production code without verifying correct behavior.\n* Map - Go over a large data set without mutating it.\n* Reduce - Aggregate or merge results\n* Scope - Where variables and functions are accessible and in what context they are being executed.\n* Closures - Expressions (usually functions) that work with variables set within a certain context.  An inner function referring to local variables of its outer function.\n{% codeblock lang:js %}\nfunction add(x) {\n  return function(y) {\n    return x + y; // When returned this closes over the value of x = 5\n  }\n}\nvar add5 = add(5);\nconsole.log(add5(3)); // 8\n{% endcodeblock %}\n* Enumerable - Pull-based.  The consumer pulls from the producer.\n* Observable - Push-based.  The producer pushes new values to the consumer.\n* Functional Reactive Programming\n  * Properties - Values that change over time.  Every property is a function f(t) that gives a value at a given moment in time.\n  * Functional - Compose together functions to create complex behavior.  Functions can have time dependant relationships.\n  * Immutable - Values are something that happened in the past so they need not change.\n  * Event streams - Events at a particular point in time.  Capture event changes in a discrete manner.  Operators (map/filter/reduce) create new streams out of old streams (no mutation).\n  * Switching - Change the system in response to events.  A stream of streams (meta-stream).  Ex: stream URLs, map to requests, return responses in future stream of promises.\n* 68-95-99.7 Rule - 68% of values at one standard deviation, 95% at two, and 99.7% of values at three.\n* Fit indexes in RAM if possible.  Index on the hash of a string instead of the string itself.\n* Use cache as write-back to do batched database writes to the back-end.\n* Use locking to make sure that when the cache expires the database doesn't get slammed with multiple copies of the same query.\n* You can decouple a sender and receiver with the command pattern and observer pattern but to decouple them in time you will want to use an event queue.\n* Keep data structures flat and linear (array > linked list).  Every pointer you have to chase to find data adds a likely cache miss while flat arrays can be pre-fetched by the memory system.\n  * Adding/Removing values from the middle of std::vector is faster than std::list if the elements are POD types and no bigger than 64 bytes (one cache line).  Lists have too many cache misses.\n  * For larger POD types, non-POD types, or if you already have a pointer into the list then std::list will win.","source":"_posts/Odds-Ends-September-2014.md","raw":"---\ntitle: Odds & Ends - September 2014\ndate: 2014-09-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Errors are values.\n* DRY - Is having a single source of truth not avoiding copying and pasting code.\n* When you cross a service boundary things that appear to be the same may have a different context and different data store.  Avoid sharing code between boundaries that have different contexts (Microservices).\n* Repository Pattern - Layer that exists between business logic and data store.  Isolates your code that interacts with your data store in one place.\n* Decorator Pattern - Enabling a chain of behavior determined by composition not inheritance.\n* A bad test breaks in response to any change in production code without verifying correct behavior.\n* Map - Go over a large data set without mutating it.\n* Reduce - Aggregate or merge results\n* Scope - Where variables and functions are accessible and in what context they are being executed.\n* Closures - Expressions (usually functions) that work with variables set within a certain context.  An inner function referring to local variables of its outer function.\n{% codeblock lang:js %}\nfunction add(x) {\n  return function(y) {\n    return x + y; // When returned this closes over the value of x = 5\n  }\n}\nvar add5 = add(5);\nconsole.log(add5(3)); // 8\n{% endcodeblock %}\n* Enumerable - Pull-based.  The consumer pulls from the producer.\n* Observable - Push-based.  The producer pushes new values to the consumer.\n* Functional Reactive Programming\n  * Properties - Values that change over time.  Every property is a function f(t) that gives a value at a given moment in time.\n  * Functional - Compose together functions to create complex behavior.  Functions can have time dependant relationships.\n  * Immutable - Values are something that happened in the past so they need not change.\n  * Event streams - Events at a particular point in time.  Capture event changes in a discrete manner.  Operators (map/filter/reduce) create new streams out of old streams (no mutation).\n  * Switching - Change the system in response to events.  A stream of streams (meta-stream).  Ex: stream URLs, map to requests, return responses in future stream of promises.\n* 68-95-99.7 Rule - 68% of values at one standard deviation, 95% at two, and 99.7% of values at three.\n* Fit indexes in RAM if possible.  Index on the hash of a string instead of the string itself.\n* Use cache as write-back to do batched database writes to the back-end.\n* Use locking to make sure that when the cache expires the database doesn't get slammed with multiple copies of the same query.\n* You can decouple a sender and receiver with the command pattern and observer pattern but to decouple them in time you will want to use an event queue.\n* Keep data structures flat and linear (array > linked list).  Every pointer you have to chase to find data adds a likely cache miss while flat arrays can be pre-fetched by the memory system.\n  * Adding/Removing values from the middle of std::vector is faster than std::list if the elements are POD types and no bigger than 64 bytes (one cache line).  Lists have too many cache misses.\n  * For larger POD types, non-POD types, or if you already have a pointer into the list then std::list will win.","slug":"Odds-Ends-September-2014","published":1,"updated":"2016-04-14T14:57:08.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvh0045y0kwdmiv021o","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Errors are values.</li>\n<li>DRY - Is having a single source of truth not avoiding copying and pasting code.</li>\n<li>When you cross a service boundary things that appear to be the same may have a different context and different data store.  Avoid sharing code between boundaries that have different contexts (Microservices).</li>\n<li>Repository Pattern - Layer that exists between business logic and data store.  Isolates your code that interacts with your data store in one place.</li>\n<li>Decorator Pattern - Enabling a chain of behavior determined by composition not inheritance.</li>\n<li>A bad test breaks in response to any change in production code without verifying correct behavior.</li>\n<li>Map - Go over a large data set without mutating it.</li>\n<li>Reduce - Aggregate or merge results</li>\n<li>Scope - Where variables and functions are accessible and in what context they are being executed.</li>\n<li>Closures - Expressions (usually functions) that work with variables set within a certain context.  An inner function referring to local variables of its outer function.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y; <span class=\"comment\">// When returned this closes over the value of x = 5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = add(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">3</span>)); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure></li>\n<li>Enumerable - Pull-based.  The consumer pulls from the producer.</li>\n<li>Observable - Push-based.  The producer pushes new values to the consumer.</li>\n<li>Functional Reactive Programming<ul>\n<li>Properties - Values that change over time.  Every property is a function f(t) that gives a value at a given moment in time.</li>\n<li>Functional - Compose together functions to create complex behavior.  Functions can have time dependant relationships.</li>\n<li>Immutable - Values are something that happened in the past so they need not change.</li>\n<li>Event streams - Events at a particular point in time.  Capture event changes in a discrete manner.  Operators (map/filter/reduce) create new streams out of old streams (no mutation).</li>\n<li>Switching - Change the system in response to events.  A stream of streams (meta-stream).  Ex: stream URLs, map to requests, return responses in future stream of promises.</li>\n</ul>\n</li>\n<li>68-95-99.7 Rule - 68% of values at one standard deviation, 95% at two, and 99.7% of values at three.</li>\n<li>Fit indexes in RAM if possible.  Index on the hash of a string instead of the string itself.</li>\n<li>Use cache as write-back to do batched database writes to the back-end.</li>\n<li>Use locking to make sure that when the cache expires the database doesn’t get slammed with multiple copies of the same query.</li>\n<li>You can decouple a sender and receiver with the command pattern and observer pattern but to decouple them in time you will want to use an event queue.</li>\n<li>Keep data structures flat and linear (array &gt; linked list).  Every pointer you have to chase to find data adds a likely cache miss while flat arrays can be pre-fetched by the memory system.<ul>\n<li>Adding/Removing values from the middle of std::vector is faster than std::list if the elements are POD types and no bigger than 64 bytes (one cache line).  Lists have too many cache misses.</li>\n<li>For larger POD types, non-POD types, or if you already have a pointer into the list then std::list will win.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Errors are values.</li>\n<li>DRY - Is having a single source of truth not avoiding copying and pasting code.</li>\n<li>When you cross a service boundary things that appear to be the same may have a different context and different data store.  Avoid sharing code between boundaries that have different contexts (Microservices).</li>\n<li>Repository Pattern - Layer that exists between business logic and data store.  Isolates your code that interacts with your data store in one place.</li>\n<li>Decorator Pattern - Enabling a chain of behavior determined by composition not inheritance.</li>\n<li>A bad test breaks in response to any change in production code without verifying correct behavior.</li>\n<li>Map - Go over a large data set without mutating it.</li>\n<li>Reduce - Aggregate or merge results</li>\n<li>Scope - Where variables and functions are accessible and in what context they are being executed.</li>\n<li>Closures - Expressions (usually functions) that work with variables set within a certain context.  An inner function referring to local variables of its outer function.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y; <span class=\"comment\">// When returned this closes over the value of x = 5</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = add(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add5(<span class=\"number\">3</span>)); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure></li>\n<li>Enumerable - Pull-based.  The consumer pulls from the producer.</li>\n<li>Observable - Push-based.  The producer pushes new values to the consumer.</li>\n<li>Functional Reactive Programming<ul>\n<li>Properties - Values that change over time.  Every property is a function f(t) that gives a value at a given moment in time.</li>\n<li>Functional - Compose together functions to create complex behavior.  Functions can have time dependant relationships.</li>\n<li>Immutable - Values are something that happened in the past so they need not change.</li>\n<li>Event streams - Events at a particular point in time.  Capture event changes in a discrete manner.  Operators (map/filter/reduce) create new streams out of old streams (no mutation).</li>\n<li>Switching - Change the system in response to events.  A stream of streams (meta-stream).  Ex: stream URLs, map to requests, return responses in future stream of promises.</li>\n</ul>\n</li>\n<li>68-95-99.7 Rule - 68% of values at one standard deviation, 95% at two, and 99.7% of values at three.</li>\n<li>Fit indexes in RAM if possible.  Index on the hash of a string instead of the string itself.</li>\n<li>Use cache as write-back to do batched database writes to the back-end.</li>\n<li>Use locking to make sure that when the cache expires the database doesn’t get slammed with multiple copies of the same query.</li>\n<li>You can decouple a sender and receiver with the command pattern and observer pattern but to decouple them in time you will want to use an event queue.</li>\n<li>Keep data structures flat and linear (array &gt; linked list).  Every pointer you have to chase to find data adds a likely cache miss while flat arrays can be pre-fetched by the memory system.<ul>\n<li>Adding/Removing values from the middle of std::vector is faster than std::list if the elements are POD types and no bigger than 64 bytes (one cache line).  Lists have too many cache misses.</li>\n<li>For larger POD types, non-POD types, or if you already have a pointer into the list then std::list will win.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Patterns of Enterprise Application Architecture","date":"2015-01-01T00:00:00.000Z","_content":"- Many of these patterns are now baked into frameworks but this is still a great book if you want to know why these patterns were developed in the first place.\n\n[Goodreads](https://www.goodreads.com/book/show/70156.Patterns_of_Enterprise_Application_Architecture?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/Patterns-of-Enterprise-Application-Architecture.md","raw":"---\ntitle: Patterns of Enterprise Application Architecture\ndate: 2015-01-01 00:00:00\ntags:\n- Books\n- μReview\n---\n- Many of these patterns are now baked into frameworks but this is still a great book if you want to know why these patterns were developed in the first place.\n\n[Goodreads](https://www.goodreads.com/book/show/70156.Patterns_of_Enterprise_Application_Architecture?utm_medium=api&amp;utm_source=blog_book)","slug":"Patterns-of-Enterprise-Application-Architecture","published":1,"updated":"2016-04-14T14:56:46.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvi0047y0kwc9pd4mj7","content":"<ul>\n<li>Many of these patterns are now baked into frameworks but this is still a great book if you want to know why these patterns were developed in the first place.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/70156.Patterns_of_Enterprise_Application_Architecture?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<ul>\n<li>Many of these patterns are now baked into frameworks but this is still a great book if you want to know why these patterns were developed in the first place.</li>\n</ul>\n<p><a href=\"https://www.goodreads.com/book/show/70156.Patterns_of_Enterprise_Application_Architecture?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Record Linkage Pipeline","date":"2016-05-12T00:00:00.000Z","_content":"I've been working away on a coding challenge to match records from two different data sources, and I think I'm close to being done.  I haven't done much work involving processing text documents, so it's been a learning experience.  Given more time I'd like to look into classifying listings based on their sentence structure, but the weather is getting nice enough that I'm going to have put side projects on the back burner for a bit ☺.\n\n{% img /images/RecordLinkagePipeline.png %}\n\n[GitHub Repo](https://github.com/DForshner/RecordLinkagePipelineDemo/)","source":"_posts/Record-Linkage-Pipeline.md","raw":"---\ntitle: Record Linkage Pipeline\ndate: 2016-05-12 00:00:00\ntags:\n- Machine Learning\n- Natural Language Processing\n---\nI've been working away on a coding challenge to match records from two different data sources, and I think I'm close to being done.  I haven't done much work involving processing text documents, so it's been a learning experience.  Given more time I'd like to look into classifying listings based on their sentence structure, but the weather is getting nice enough that I'm going to have put side projects on the back burner for a bit ☺.\n\n{% img /images/RecordLinkagePipeline.png %}\n\n[GitHub Repo](https://github.com/DForshner/RecordLinkagePipelineDemo/)","slug":"Record-Linkage-Pipeline","published":1,"updated":"2016-05-12T22:22:52.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvk004ay0kwdt6rqi8s","content":"<p>I’ve been working away on a coding challenge to match records from two different data sources, and I think I’m close to being done.  I haven’t done much work involving processing text documents, so it’s been a learning experience.  Given more time I’d like to look into classifying listings based on their sentence structure, but the weather is getting nice enough that I’m going to have put side projects on the back burner for a bit ☺.</p>\n<img src=\"/images/RecordLinkagePipeline.png\">\n<p><a href=\"https://github.com/DForshner/RecordLinkagePipelineDemo/\" target=\"_blank\" rel=\"external\">GitHub Repo</a></p>\n","excerpt":"","more":"<p>I’ve been working away on a coding challenge to match records from two different data sources, and I think I’m close to being done.  I haven’t done much work involving processing text documents, so it’s been a learning experience.  Given more time I’d like to look into classifying listings based on their sentence structure, but the weather is getting nice enough that I’m going to have put side projects on the back burner for a bit ☺.</p>\n<img src=\"/images/RecordLinkagePipeline.png\">\n<p><a href=\"https://github.com/DForshner/RecordLinkagePipelineDemo/\">GitHub Repo</a></p>\n"},{"title":"Returning ptr to stack vs. heap allocated instance in C++","date":"2012-10-01T00:00:00.000Z","_content":"\n{% codeblock lang:c %}\nclass Thingy;\n\nThingy* foo()\n{\n  int a; // Stack\n  Thingy b; // Created on stack\n  Thingy *ptr_to_b = &b;  // Points to address on stack\n  Thingy *ptr_to_c = new Thingy(); // Points to address of thingy created on heap\n\n  return pointer_to_c; // Safe - Thingy lives on heap and outlives foo().  Remember to delete.\n\n  return pointer_to_b; // BOOM! Because b lives on stack and will be deleted when foo() returns.\n\n{% endcodeblock %}","source":"_posts/Returning-ptr-to-stack-vs-heap-allocated-instance-in-C.md","raw":"---\ntitle: Returning ptr to stack vs. heap allocated instance in C++\ndate: 2012-10-01 00:00:00\ntags:\n- C++\n---\n\n{% codeblock lang:c %}\nclass Thingy;\n\nThingy* foo()\n{\n  int a; // Stack\n  Thingy b; // Created on stack\n  Thingy *ptr_to_b = &b;  // Points to address on stack\n  Thingy *ptr_to_c = new Thingy(); // Points to address of thingy created on heap\n\n  return pointer_to_c; // Safe - Thingy lives on heap and outlives foo().  Remember to delete.\n\n  return pointer_to_b; // BOOM! Because b lives on stack and will be deleted when foo() returns.\n\n{% endcodeblock %}","slug":"Returning-ptr-to-stack-vs-heap-allocated-instance-in-C","published":1,"updated":"2016-04-14T14:56:38.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvk004cy0kwek9ztfm5","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Thingy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Thingy* <span class=\"title\">foo</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a; <span class=\"comment\">// Stack</span></span><br><span class=\"line\">  Thingy b; <span class=\"comment\">// Created on stack</span></span><br><span class=\"line\">  Thingy *ptr_to_b = &amp;b;  <span class=\"comment\">// Points to address on stack</span></span><br><span class=\"line\">  Thingy *ptr_to_c = <span class=\"keyword\">new</span> Thingy(); <span class=\"comment\">// Points to address of thingy created on heap</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pointer_to_c; <span class=\"comment\">// Safe - Thingy lives on heap and outlives foo().  Remember to delete.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pointer_to_b; <span class=\"comment\">// BOOM! Because b lives on stack and will be deleted when foo() returns.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Thingy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Thingy* <span class=\"title\">foo</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a; <span class=\"comment\">// Stack</span></span><br><span class=\"line\">  Thingy b; <span class=\"comment\">// Created on stack</span></span><br><span class=\"line\">  Thingy *ptr_to_b = &amp;b;  <span class=\"comment\">// Points to address on stack</span></span><br><span class=\"line\">  Thingy *ptr_to_c = <span class=\"keyword\">new</span> Thingy(); <span class=\"comment\">// Points to address of thingy created on heap</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pointer_to_c; <span class=\"comment\">// Safe - Thingy lives on heap and outlives foo().  Remember to delete.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pointer_to_b; <span class=\"comment\">// BOOM! Because b lives on stack and will be deleted when foo() returns.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Raft Understandable Distributed Consensus","date":"2015-10-11T00:00:00.000Z","_content":"This is one of best examples I've seen yet of using visualizations to explain something.  \n\nRaft is a distributed consensus algorithm designed to be understandable as opposed to PAXOS which as far as I can tell nobody understands (even people who have implemented it).\n\n[Raft Post](http://thesecretlivesofdata.com/raft/)\n[Main Site](http://thesecretlivesofdata.com)","source":"_posts/Raft-Understandable-Distributed-Consensus.md","raw":"---\ntitle: Raft Understandable Distributed Consensus\ndate: 2015-10-11 00:00:00\ntags:\n- Visual Learning\n- Distributed Systems\n---\nThis is one of best examples I've seen yet of using visualizations to explain something.  \n\nRaft is a distributed consensus algorithm designed to be understandable as opposed to PAXOS which as far as I can tell nobody understands (even people who have implemented it).\n\n[Raft Post](http://thesecretlivesofdata.com/raft/)\n[Main Site](http://thesecretlivesofdata.com)","slug":"Raft-Understandable-Distributed-Consensus","published":1,"updated":"2016-04-14T14:56:42.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvm004fy0kwhcokfxd0","content":"<p>This is one of best examples I’ve seen yet of using visualizations to explain something.  </p>\n<p>Raft is a distributed consensus algorithm designed to be understandable as opposed to PAXOS which as far as I can tell nobody understands (even people who have implemented it).</p>\n<p><a href=\"http://thesecretlivesofdata.com/raft/\" target=\"_blank\" rel=\"external\">Raft Post</a><br><a href=\"http://thesecretlivesofdata.com\" target=\"_blank\" rel=\"external\">Main Site</a></p>\n","excerpt":"","more":"<p>This is one of best examples I’ve seen yet of using visualizations to explain something.  </p>\n<p>Raft is a distributed consensus algorithm designed to be understandable as opposed to PAXOS which as far as I can tell nobody understands (even people who have implemented it).</p>\n<p><a href=\"http://thesecretlivesofdata.com/raft/\">Raft Post</a><br><a href=\"http://thesecretlivesofdata.com\">Main Site</a></p>\n"},{"title":"Odds & Ends - December 2012","date":"2012-12-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* <u>Write in terms of services</u> - independent, concurrent objects behind well-defined, consistent interfaces.\n* <u>Eliminate effects between unrelated things</u> - Design components to be self-contained, independent, and have a single well-defined purpose.\n* <u>Program close the problem domain</u> - Design and code in your user's language.\n* <u>Test state coverage, not code coverage</u> - Identify and test significate program states.  Just testing lines is useless.\n* <u>Test early, test Often, test automatically</u> - Tests that run with every build are much more effective than test plans that sit on a shelf.\n* <u>Always design for concurrency</u> - Cleaner interfaces with fewer assumptions.\n* <u>Put abstractions in code, details in metadata</u> - Program fro the general case, and put specifics outside the compiled code base (config files).\n* <u>Keep knowledge in plain text</u> - Won't become obsolete.\n* <u>Use blackboards to coordinate workflow</u> - Use to coordinate disparate facts and agents, while maintaining independence and isolation among parts.\n* <u>Use a project glossery</u> - Single source for specific terms and vocabulary for a project.\n* <u>Find bugs once</u> - Once a human finds a bug, it should be the last time a human finds that bug.  Automated tests should check for it from then on.\n* <u>Crash early</u> - A dead program normally does less damage than a corrupt one.\n* <u>Organize teams around functionality</u> - Build teams the way you build code (designers + coders + testers + data modelers).\n* <u>Design to contracts</u> - Use contracts to document and verify code does no more and no less than it claims.\n* <u>Don't use return values for errors</u> - Eventually a component will ignore a value and an error will silently be ignored.  Dead software doesn't lie.","source":"_posts/Odds-Ends-December-2012.md","raw":"---\ntitle: 'Odds & Ends - December 2012'\ndate: 2012-12-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* <u>Write in terms of services</u> - independent, concurrent objects behind well-defined, consistent interfaces.\n* <u>Eliminate effects between unrelated things</u> - Design components to be self-contained, independent, and have a single well-defined purpose.\n* <u>Program close the problem domain</u> - Design and code in your user's language.\n* <u>Test state coverage, not code coverage</u> - Identify and test significate program states.  Just testing lines is useless.\n* <u>Test early, test Often, test automatically</u> - Tests that run with every build are much more effective than test plans that sit on a shelf.\n* <u>Always design for concurrency</u> - Cleaner interfaces with fewer assumptions.\n* <u>Put abstractions in code, details in metadata</u> - Program fro the general case, and put specifics outside the compiled code base (config files).\n* <u>Keep knowledge in plain text</u> - Won't become obsolete.\n* <u>Use blackboards to coordinate workflow</u> - Use to coordinate disparate facts and agents, while maintaining independence and isolation among parts.\n* <u>Use a project glossery</u> - Single source for specific terms and vocabulary for a project.\n* <u>Find bugs once</u> - Once a human finds a bug, it should be the last time a human finds that bug.  Automated tests should check for it from then on.\n* <u>Crash early</u> - A dead program normally does less damage than a corrupt one.\n* <u>Organize teams around functionality</u> - Build teams the way you build code (designers + coders + testers + data modelers).\n* <u>Design to contracts</u> - Use contracts to document and verify code does no more and no less than it claims.\n* <u>Don't use return values for errors</u> - Eventually a component will ignore a value and an error will silently be ignored.  Dead software doesn't lie.","slug":"Odds-Ends-December-2012","published":1,"updated":"2016-04-22T15:51:32.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvn004hy0kwcrs6gkzw","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li><u>Write in terms of services</u> - independent, concurrent objects behind well-defined, consistent interfaces.</li>\n<li><u>Eliminate effects between unrelated things</u> - Design components to be self-contained, independent, and have a single well-defined purpose.</li>\n<li><u>Program close the problem domain</u> - Design and code in your user’s language.</li>\n<li><u>Test state coverage, not code coverage</u> - Identify and test significate program states.  Just testing lines is useless.</li>\n<li><u>Test early, test Often, test automatically</u> - Tests that run with every build are much more effective than test plans that sit on a shelf.</li>\n<li><u>Always design for concurrency</u> - Cleaner interfaces with fewer assumptions.</li>\n<li><u>Put abstractions in code, details in metadata</u> - Program fro the general case, and put specifics outside the compiled code base (config files).</li>\n<li><u>Keep knowledge in plain text</u> - Won’t become obsolete.</li>\n<li><u>Use blackboards to coordinate workflow</u> - Use to coordinate disparate facts and agents, while maintaining independence and isolation among parts.</li>\n<li><u>Use a project glossery</u> - Single source for specific terms and vocabulary for a project.</li>\n<li><u>Find bugs once</u> - Once a human finds a bug, it should be the last time a human finds that bug.  Automated tests should check for it from then on.</li>\n<li><u>Crash early</u> - A dead program normally does less damage than a corrupt one.</li>\n<li><u>Organize teams around functionality</u> - Build teams the way you build code (designers + coders + testers + data modelers).</li>\n<li><u>Design to contracts</u> - Use contracts to document and verify code does no more and no less than it claims.</li>\n<li><u>Don’t use return values for errors</u> - Eventually a component will ignore a value and an error will silently be ignored.  Dead software doesn’t lie.</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li><u>Write in terms of services</u> - independent, concurrent objects behind well-defined, consistent interfaces.</li>\n<li><u>Eliminate effects between unrelated things</u> - Design components to be self-contained, independent, and have a single well-defined purpose.</li>\n<li><u>Program close the problem domain</u> - Design and code in your user’s language.</li>\n<li><u>Test state coverage, not code coverage</u> - Identify and test significate program states.  Just testing lines is useless.</li>\n<li><u>Test early, test Often, test automatically</u> - Tests that run with every build are much more effective than test plans that sit on a shelf.</li>\n<li><u>Always design for concurrency</u> - Cleaner interfaces with fewer assumptions.</li>\n<li><u>Put abstractions in code, details in metadata</u> - Program fro the general case, and put specifics outside the compiled code base (config files).</li>\n<li><u>Keep knowledge in plain text</u> - Won’t become obsolete.</li>\n<li><u>Use blackboards to coordinate workflow</u> - Use to coordinate disparate facts and agents, while maintaining independence and isolation among parts.</li>\n<li><u>Use a project glossery</u> - Single source for specific terms and vocabulary for a project.</li>\n<li><u>Find bugs once</u> - Once a human finds a bug, it should be the last time a human finds that bug.  Automated tests should check for it from then on.</li>\n<li><u>Crash early</u> - A dead program normally does less damage than a corrupt one.</li>\n<li><u>Organize teams around functionality</u> - Build teams the way you build code (designers + coders + testers + data modelers).</li>\n<li><u>Design to contracts</u> - Use contracts to document and verify code does no more and no less than it claims.</li>\n<li><u>Don’t use return values for errors</u> - Eventually a component will ignore a value and an error will silently be ignored.  Dead software doesn’t lie.</li>\n</ul>\n"},{"title":"SortedList vs. SortedDictionary","date":"2013-02-13T00:00:00.000Z","_content":"Both are useful if you need to iterate over elements in sorted order.  As a rule of thumb if you creating it once and not modifying it than a SortedList has a faster construction time and uses less memory than a SortedDictionary.\n\n| Operation | SortedList  | SortedDictionary |\n| - | - | - |\n| retrieval by key | O(log(n)) | O(log(n)) |\n| insert and remove elements | O(n) | O(log(n)) |\n| contains key | O(log(n)) | O(log(n)) |\n\n**Sorted Dictionary**\n* Implemented as binary search tree for fast lookups while keeping elements in sorted order.\n\n**Sorted List**\n* Implemented as two arrays (keys, values) kept in sorted order.\n* Faster construction time when being populated in one go.","source":"_posts/SortedList-vs-SortedDictionary.md","raw":"---\ntitle: SortedList vs. SortedDictionary\ndate: 2013-02-13 00:00:00\ntags:\n- Data Structures\n---\nBoth are useful if you need to iterate over elements in sorted order.  As a rule of thumb if you creating it once and not modifying it than a SortedList has a faster construction time and uses less memory than a SortedDictionary.\n\n| Operation | SortedList  | SortedDictionary |\n| - | - | - |\n| retrieval by key | O(log(n)) | O(log(n)) |\n| insert and remove elements | O(n) | O(log(n)) |\n| contains key | O(log(n)) | O(log(n)) |\n\n**Sorted Dictionary**\n* Implemented as binary search tree for fast lookups while keeping elements in sorted order.\n\n**Sorted List**\n* Implemented as two arrays (keys, values) kept in sorted order.\n* Faster construction time when being populated in one go.","slug":"SortedList-vs-SortedDictionary","published":1,"updated":"2016-04-14T14:56:30.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvo004ky0kw2dinur9l","content":"<p>Both are useful if you need to iterate over elements in sorted order.  As a rule of thumb if you creating it once and not modifying it than a SortedList has a faster construction time and uses less memory than a SortedDictionary.</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>SortedList</th>\n<th>SortedDictionary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>retrieval by key</td>\n<td>O(log(n))</td>\n<td>O(log(n))</td>\n</tr>\n<tr>\n<td>insert and remove elements</td>\n<td>O(n)</td>\n<td>O(log(n))</td>\n</tr>\n<tr>\n<td>contains key</td>\n<td>O(log(n))</td>\n<td>O(log(n))</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Sorted Dictionary</strong></p>\n<ul>\n<li>Implemented as binary search tree for fast lookups while keeping elements in sorted order.</li>\n</ul>\n<p><strong>Sorted List</strong></p>\n<ul>\n<li>Implemented as two arrays (keys, values) kept in sorted order.</li>\n<li>Faster construction time when being populated in one go.</li>\n</ul>\n","excerpt":"","more":"<p>Both are useful if you need to iterate over elements in sorted order.  As a rule of thumb if you creating it once and not modifying it than a SortedList has a faster construction time and uses less memory than a SortedDictionary.</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>SortedList</th>\n<th>SortedDictionary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>retrieval by key</td>\n<td>O(log(n))</td>\n<td>O(log(n))</td>\n</tr>\n<tr>\n<td>insert and remove elements</td>\n<td>O(n)</td>\n<td>O(log(n))</td>\n</tr>\n<tr>\n<td>contains key</td>\n<td>O(log(n))</td>\n<td>O(log(n))</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Sorted Dictionary</strong></p>\n<ul>\n<li>Implemented as binary search tree for fast lookups while keeping elements in sorted order.</li>\n</ul>\n<p><strong>Sorted List</strong></p>\n<ul>\n<li>Implemented as two arrays (keys, values) kept in sorted order.</li>\n<li>Faster construction time when being populated in one go.</li>\n</ul>\n"},{"title":"Software Engineering as a Service","date":"2012-04-01T00:00:00.000Z","_content":"- I was impressed with how quickly I was able to put something together with Ruby on Rails.\n- It seems like the course has disappeared from Coursera and moved to edX?\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Software%20Engineering%20as%20a%20Service%202012%20-%20Coursera.pdf)","source":"_posts/Software-Engineering-as-a-Service.md","raw":"---\ntitle: Software Engineering as a Service\ndate: 2012-04-01 00:00:00\ntags:\n- Courses\n- MOOC\n- μReview\n---\n- I was impressed with how quickly I was able to put something together with Ruby on Rails.\n- It seems like the course has disappeared from Coursera and moved to edX?\n\n[Certificate](https://github.com/DForshner/Certificates/blob/master/Software%20Engineering%20as%20a%20Service%202012%20-%20Coursera.pdf)","slug":"Software-Engineering-as-a-Service","published":1,"updated":"2016-04-14T14:56:34.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvp004my0kwnm2a4mgg","content":"<ul>\n<li>I was impressed with how quickly I was able to put something together with Ruby on Rails.</li>\n<li>It seems like the course has disappeared from Coursera and moved to edX?</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Software%20Engineering%20as%20a%20Service%202012%20-%20Coursera.pdf\" target=\"_blank\" rel=\"external\">Certificate</a></p>\n","excerpt":"","more":"<ul>\n<li>I was impressed with how quickly I was able to put something together with Ruby on Rails.</li>\n<li>It seems like the course has disappeared from Coursera and moved to edX?</li>\n</ul>\n<p><a href=\"https://github.com/DForshner/Certificates/blob/master/Software%20Engineering%20as%20a%20Service%202012%20-%20Coursera.pdf\">Certificate</a></p>\n"},{"title":"Unit Testing","date":"2013-03-03T00:00:00.000Z","_content":"Notes from a .Net user group talk on unit testing.\n\n* Ideal Test\n  * Automated\n  * No complex dependencies\n  * Independent of each other.  No sequences!\n  * Describes intention.\n  * Shows you how the code should be used.\n  * Written at the same time or before the code being tested.  Code -> Test -> Code -> Test -> ...\n  * No loops, no conditionals\n  * Hide any elaborate setup in a base fixture or private method.\n  * Avoid complex setup & teardown (code smell!)\n* Obvious Benefits\n  * Reduce time between code change and bug (test failing).  You want to reduce your feedback loop.\n  * Block regression bugs.\n  * Fewer bugs in next phase.\n* Hidden Benefit: Exerts design pressures on code\n  * Avoid the debugger!  If you can't tell what is wrong from the test maybe you need smaller more focused tests!\n  * Less coupling\n  * Explicit dependencies (elaborate setup is a code smell)\n  * Interface use for dependencies\n  * Keeping tests focused encourages single responsibility\n  * Smaller classes & shorter methods\n  * Enables refactoring -> Readable code\n  * You can gut your classes and refactor legacy code.\n* What to test\n  * public methods (use a consumer's point of view)\n  * pure functions\n* Clean tests\n  * Have a standard naming scheme.  Ex: Method_Scenario_Result()\n  * Organise into sections Arrange / Act / Assert (TripleA Style)\n  * Ideally one assert per test\n  * Can you share private setup method over multiple tests?\n  * Can you put shared setup in test initialization method or base class?\n*  Testing styles\n  * State Verification (Good) - Verify state of the object.  Given these inputs, I expect these outputs.\n  * Behavior Verification (Bad) - Verify calls between SUT and collaborators using mocks.  Test code is coupled to code under test so it tends to be brittle and break whenever you change the code being tested.\n* Isolation\n  * Avoid \"new\"\n  * Dependancy injection (Good)\n    * Create collaborators outside of SUT and pass in (usually via constructor).\n    * Service container IOC usually used to create dependencies in code.\n  * Service Location (Bad)\n    * Have to setup global state of singleton factory for each test.\n    * Injecting the container into a parameter and then using it to new up is still a service locator.\n  * Interception Frameworks (Bad)\n    * Invasive testing that leads to test code that is tightly coupled to code under test.\n    * You lose the benefits of design pressure encouraging interface use and small classes.\n    * \"Pointy tool\" - Use with extreme caution\n* Service Containers (IOC container)\n  * Controls lifecycle of its objects.  Not just a service locator.\n  * Lazy - The first instance is new and the rest are copies.\n  * Being forced to write to interfaces is a design pressure that forces decoupling.\n* Test Doubles\n  * Stub (Good) - Just works with minimal behavior.  Null and real objects with fake data are stubs. \n  * Mock (Meh) - Can set expectations and can tell you when they aren't met.\n  * Fake (Meh) - Behaves like the real thing (more or less).  Created by hand.\n  * Spy (Bad) - Tells you what happened by recording calls and checking what SUT did.  Very brittle.\n* Mocks design pressure\n  * Easier to check edge cases\n  * Wrap static methods\n  * Composed - Pressure away from deep inheritance\n  * Uses targeted interfaces\n  * Considers requests.  What kind of supported classes are needed?\n  * One object many interfaces\n  * Start coding anywhere!  Mock out what hasn't been coded yet.\n* Mocking pros\n  * Can record expected calls\n  * Have interface of expected object\n  * Can return expected call values.\n  * Can verify calls have been made.\n  * Fluent API\n* Mocking cons\n  * Premature composition\n  * Premature interface injection","source":"_posts/Testing-Meetup.md","raw":"---\ntitle: Unit Testing\ndate: 2013-02-31 00:00:00\ntags:\n- Testing\n---\nNotes from a .Net user group talk on unit testing.\n\n* Ideal Test\n  * Automated\n  * No complex dependencies\n  * Independent of each other.  No sequences!\n  * Describes intention.\n  * Shows you how the code should be used.\n  * Written at the same time or before the code being tested.  Code -> Test -> Code -> Test -> ...\n  * No loops, no conditionals\n  * Hide any elaborate setup in a base fixture or private method.\n  * Avoid complex setup & teardown (code smell!)\n* Obvious Benefits\n  * Reduce time between code change and bug (test failing).  You want to reduce your feedback loop.\n  * Block regression bugs.\n  * Fewer bugs in next phase.\n* Hidden Benefit: Exerts design pressures on code\n  * Avoid the debugger!  If you can't tell what is wrong from the test maybe you need smaller more focused tests!\n  * Less coupling\n  * Explicit dependencies (elaborate setup is a code smell)\n  * Interface use for dependencies\n  * Keeping tests focused encourages single responsibility\n  * Smaller classes & shorter methods\n  * Enables refactoring -> Readable code\n  * You can gut your classes and refactor legacy code.\n* What to test\n  * public methods (use a consumer's point of view)\n  * pure functions\n* Clean tests\n  * Have a standard naming scheme.  Ex: Method_Scenario_Result()\n  * Organise into sections Arrange / Act / Assert (TripleA Style)\n  * Ideally one assert per test\n  * Can you share private setup method over multiple tests?\n  * Can you put shared setup in test initialization method or base class?\n*  Testing styles\n  * State Verification (Good) - Verify state of the object.  Given these inputs, I expect these outputs.\n  * Behavior Verification (Bad) - Verify calls between SUT and collaborators using mocks.  Test code is coupled to code under test so it tends to be brittle and break whenever you change the code being tested.\n* Isolation\n  * Avoid \"new\"\n  * Dependancy injection (Good)\n    * Create collaborators outside of SUT and pass in (usually via constructor).\n    * Service container IOC usually used to create dependencies in code.\n  * Service Location (Bad)\n    * Have to setup global state of singleton factory for each test.\n    * Injecting the container into a parameter and then using it to new up is still a service locator.\n  * Interception Frameworks (Bad)\n    * Invasive testing that leads to test code that is tightly coupled to code under test.\n    * You lose the benefits of design pressure encouraging interface use and small classes.\n    * \"Pointy tool\" - Use with extreme caution\n* Service Containers (IOC container)\n  * Controls lifecycle of its objects.  Not just a service locator.\n  * Lazy - The first instance is new and the rest are copies.\n  * Being forced to write to interfaces is a design pressure that forces decoupling.\n* Test Doubles\n  * Stub (Good) - Just works with minimal behavior.  Null and real objects with fake data are stubs. \n  * Mock (Meh) - Can set expectations and can tell you when they aren't met.\n  * Fake (Meh) - Behaves like the real thing (more or less).  Created by hand.\n  * Spy (Bad) - Tells you what happened by recording calls and checking what SUT did.  Very brittle.\n* Mocks design pressure\n  * Easier to check edge cases\n  * Wrap static methods\n  * Composed - Pressure away from deep inheritance\n  * Uses targeted interfaces\n  * Considers requests.  What kind of supported classes are needed?\n  * One object many interfaces\n  * Start coding anywhere!  Mock out what hasn't been coded yet.\n* Mocking pros\n  * Can record expected calls\n  * Have interface of expected object\n  * Can return expected call values.\n  * Can verify calls have been made.\n  * Fluent API\n* Mocking cons\n  * Premature composition\n  * Premature interface injection","slug":"Testing-Meetup","published":1,"updated":"2016-04-14T14:56:17.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvr004py0kwvw37ahw5","content":"<p>Notes from a .Net user group talk on unit testing.</p>\n<ul>\n<li>Ideal Test<ul>\n<li>Automated</li>\n<li>No complex dependencies</li>\n<li>Independent of each other.  No sequences!</li>\n<li>Describes intention.</li>\n<li>Shows you how the code should be used.</li>\n<li>Written at the same time or before the code being tested.  Code -&gt; Test -&gt; Code -&gt; Test -&gt; …</li>\n<li>No loops, no conditionals</li>\n<li>Hide any elaborate setup in a base fixture or private method.</li>\n<li>Avoid complex setup &amp; teardown (code smell!)</li>\n</ul>\n</li>\n<li>Obvious Benefits<ul>\n<li>Reduce time between code change and bug (test failing).  You want to reduce your feedback loop.</li>\n<li>Block regression bugs.</li>\n<li>Fewer bugs in next phase.</li>\n</ul>\n</li>\n<li>Hidden Benefit: Exerts design pressures on code<ul>\n<li>Avoid the debugger!  If you can’t tell what is wrong from the test maybe you need smaller more focused tests!</li>\n<li>Less coupling</li>\n<li>Explicit dependencies (elaborate setup is a code smell)</li>\n<li>Interface use for dependencies</li>\n<li>Keeping tests focused encourages single responsibility</li>\n<li>Smaller classes &amp; shorter methods</li>\n<li>Enables refactoring -&gt; Readable code</li>\n<li>You can gut your classes and refactor legacy code.</li>\n</ul>\n</li>\n<li>What to test<ul>\n<li>public methods (use a consumer’s point of view)</li>\n<li>pure functions</li>\n</ul>\n</li>\n<li>Clean tests<ul>\n<li>Have a standard naming scheme.  Ex: Method_Scenario_Result()</li>\n<li>Organise into sections Arrange / Act / Assert (TripleA Style)</li>\n<li>Ideally one assert per test</li>\n<li>Can you share private setup method over multiple tests?</li>\n<li>Can you put shared setup in test initialization method or base class?</li>\n</ul>\n</li>\n<li>Testing styles<ul>\n<li>State Verification (Good) - Verify state of the object.  Given these inputs, I expect these outputs.</li>\n<li>Behavior Verification (Bad) - Verify calls between SUT and collaborators using mocks.  Test code is coupled to code under test so it tends to be brittle and break whenever you change the code being tested.</li>\n</ul>\n</li>\n<li>Isolation<ul>\n<li>Avoid “new”</li>\n<li>Dependancy injection (Good)<ul>\n<li>Create collaborators outside of SUT and pass in (usually via constructor).</li>\n<li>Service container IOC usually used to create dependencies in code.</li>\n</ul>\n</li>\n<li>Service Location (Bad)<ul>\n<li>Have to setup global state of singleton factory for each test.</li>\n<li>Injecting the container into a parameter and then using it to new up is still a service locator.</li>\n</ul>\n</li>\n<li>Interception Frameworks (Bad)<ul>\n<li>Invasive testing that leads to test code that is tightly coupled to code under test.</li>\n<li>You lose the benefits of design pressure encouraging interface use and small classes.</li>\n<li>“Pointy tool” - Use with extreme caution</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Service Containers (IOC container)<ul>\n<li>Controls lifecycle of its objects.  Not just a service locator.</li>\n<li>Lazy - The first instance is new and the rest are copies.</li>\n<li>Being forced to write to interfaces is a design pressure that forces decoupling.</li>\n</ul>\n</li>\n<li>Test Doubles<ul>\n<li>Stub (Good) - Just works with minimal behavior.  Null and real objects with fake data are stubs. </li>\n<li>Mock (Meh) - Can set expectations and can tell you when they aren’t met.</li>\n<li>Fake (Meh) - Behaves like the real thing (more or less).  Created by hand.</li>\n<li>Spy (Bad) - Tells you what happened by recording calls and checking what SUT did.  Very brittle.</li>\n</ul>\n</li>\n<li>Mocks design pressure<ul>\n<li>Easier to check edge cases</li>\n<li>Wrap static methods</li>\n<li>Composed - Pressure away from deep inheritance</li>\n<li>Uses targeted interfaces</li>\n<li>Considers requests.  What kind of supported classes are needed?</li>\n<li>One object many interfaces</li>\n<li>Start coding anywhere!  Mock out what hasn’t been coded yet.</li>\n</ul>\n</li>\n<li>Mocking pros<ul>\n<li>Can record expected calls</li>\n<li>Have interface of expected object</li>\n<li>Can return expected call values.</li>\n<li>Can verify calls have been made.</li>\n<li>Fluent API</li>\n</ul>\n</li>\n<li>Mocking cons<ul>\n<li>Premature composition</li>\n<li>Premature interface injection</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Notes from a .Net user group talk on unit testing.</p>\n<ul>\n<li>Ideal Test<ul>\n<li>Automated</li>\n<li>No complex dependencies</li>\n<li>Independent of each other.  No sequences!</li>\n<li>Describes intention.</li>\n<li>Shows you how the code should be used.</li>\n<li>Written at the same time or before the code being tested.  Code -&gt; Test -&gt; Code -&gt; Test -&gt; …</li>\n<li>No loops, no conditionals</li>\n<li>Hide any elaborate setup in a base fixture or private method.</li>\n<li>Avoid complex setup &amp; teardown (code smell!)</li>\n</ul>\n</li>\n<li>Obvious Benefits<ul>\n<li>Reduce time between code change and bug (test failing).  You want to reduce your feedback loop.</li>\n<li>Block regression bugs.</li>\n<li>Fewer bugs in next phase.</li>\n</ul>\n</li>\n<li>Hidden Benefit: Exerts design pressures on code<ul>\n<li>Avoid the debugger!  If you can’t tell what is wrong from the test maybe you need smaller more focused tests!</li>\n<li>Less coupling</li>\n<li>Explicit dependencies (elaborate setup is a code smell)</li>\n<li>Interface use for dependencies</li>\n<li>Keeping tests focused encourages single responsibility</li>\n<li>Smaller classes &amp; shorter methods</li>\n<li>Enables refactoring -&gt; Readable code</li>\n<li>You can gut your classes and refactor legacy code.</li>\n</ul>\n</li>\n<li>What to test<ul>\n<li>public methods (use a consumer’s point of view)</li>\n<li>pure functions</li>\n</ul>\n</li>\n<li>Clean tests<ul>\n<li>Have a standard naming scheme.  Ex: Method_Scenario_Result()</li>\n<li>Organise into sections Arrange / Act / Assert (TripleA Style)</li>\n<li>Ideally one assert per test</li>\n<li>Can you share private setup method over multiple tests?</li>\n<li>Can you put shared setup in test initialization method or base class?</li>\n</ul>\n</li>\n<li>Testing styles<ul>\n<li>State Verification (Good) - Verify state of the object.  Given these inputs, I expect these outputs.</li>\n<li>Behavior Verification (Bad) - Verify calls between SUT and collaborators using mocks.  Test code is coupled to code under test so it tends to be brittle and break whenever you change the code being tested.</li>\n</ul>\n</li>\n<li>Isolation<ul>\n<li>Avoid “new”</li>\n<li>Dependancy injection (Good)<ul>\n<li>Create collaborators outside of SUT and pass in (usually via constructor).</li>\n<li>Service container IOC usually used to create dependencies in code.</li>\n</ul>\n</li>\n<li>Service Location (Bad)<ul>\n<li>Have to setup global state of singleton factory for each test.</li>\n<li>Injecting the container into a parameter and then using it to new up is still a service locator.</li>\n</ul>\n</li>\n<li>Interception Frameworks (Bad)<ul>\n<li>Invasive testing that leads to test code that is tightly coupled to code under test.</li>\n<li>You lose the benefits of design pressure encouraging interface use and small classes.</li>\n<li>“Pointy tool” - Use with extreme caution</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Service Containers (IOC container)<ul>\n<li>Controls lifecycle of its objects.  Not just a service locator.</li>\n<li>Lazy - The first instance is new and the rest are copies.</li>\n<li>Being forced to write to interfaces is a design pressure that forces decoupling.</li>\n</ul>\n</li>\n<li>Test Doubles<ul>\n<li>Stub (Good) - Just works with minimal behavior.  Null and real objects with fake data are stubs. </li>\n<li>Mock (Meh) - Can set expectations and can tell you when they aren’t met.</li>\n<li>Fake (Meh) - Behaves like the real thing (more or less).  Created by hand.</li>\n<li>Spy (Bad) - Tells you what happened by recording calls and checking what SUT did.  Very brittle.</li>\n</ul>\n</li>\n<li>Mocks design pressure<ul>\n<li>Easier to check edge cases</li>\n<li>Wrap static methods</li>\n<li>Composed - Pressure away from deep inheritance</li>\n<li>Uses targeted interfaces</li>\n<li>Considers requests.  What kind of supported classes are needed?</li>\n<li>One object many interfaces</li>\n<li>Start coding anywhere!  Mock out what hasn’t been coded yet.</li>\n</ul>\n</li>\n<li>Mocking pros<ul>\n<li>Can record expected calls</li>\n<li>Have interface of expected object</li>\n<li>Can return expected call values.</li>\n<li>Can verify calls have been made.</li>\n<li>Fluent API</li>\n</ul>\n</li>\n<li>Mocking cons<ul>\n<li>Premature composition</li>\n<li>Premature interface injection</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Table Driven Design Example","date":"2015-05-23T00:00:00.000Z","_content":"\n{% codeblock %}\nlet result;\nif (isBar) {\n   if (isBaz) {\n      result = 'foo truetrue';\n   } else {\n      result = 'foo truefalse';\n   }\n} else {\n   if (isBaz) {\n      result = 'foo falsetrue';\n   } else {\n      result = 'foo falsefalse';\n   }\n}\n{% endcodeblock %}\n\nCan be reduced to\n\n{% codeblock %}\nconst fooByIsBarIsBaz = {};\nfooByIsBarIsBaz[true] = {};\nfooByIsBarIsBaz[true][true] = 'foo truetrue';\nfooByIsBarIsBaz[true][false] = 'foo truefalse';\nfooByIsBarIsBaz[false] = {};\nfooByIsBarIsBaz[false][true] = 'foo falsetrue';\nfooByIsBarIsBaz[false][false] = 'foo falsefalse';\nconst result = fooByIsBarIsBaz[isBar][isBaz];\n{% endcodeblock %}\n\n{% codeblock %}\nconsole.log(fooByIsBarIsBaz); // { false: { false: \"foo falsefalse\", true: \"foo falsetrue\" ...\nconsole.log(fooByIsBarIsBaz[true][false]); // foo truefalse\n{% endcodeblock %}","source":"_posts/Table-Driven-Design-Example.md","raw":"---\ntitle: Table Driven Design Example\ndate: 2015-05-23 00:00:00\ntags:\n- ECMAScript\n- Reduction\n---\n\n{% codeblock %}\nlet result;\nif (isBar) {\n   if (isBaz) {\n      result = 'foo truetrue';\n   } else {\n      result = 'foo truefalse';\n   }\n} else {\n   if (isBaz) {\n      result = 'foo falsetrue';\n   } else {\n      result = 'foo falsefalse';\n   }\n}\n{% endcodeblock %}\n\nCan be reduced to\n\n{% codeblock %}\nconst fooByIsBarIsBaz = {};\nfooByIsBarIsBaz[true] = {};\nfooByIsBarIsBaz[true][true] = 'foo truetrue';\nfooByIsBarIsBaz[true][false] = 'foo truefalse';\nfooByIsBarIsBaz[false] = {};\nfooByIsBarIsBaz[false][true] = 'foo falsetrue';\nfooByIsBarIsBaz[false][false] = 'foo falsefalse';\nconst result = fooByIsBarIsBaz[isBar][isBaz];\n{% endcodeblock %}\n\n{% codeblock %}\nconsole.log(fooByIsBarIsBaz); // { false: { false: \"foo falsefalse\", true: \"foo falsetrue\" ...\nconsole.log(fooByIsBarIsBaz[true][false]); // foo truefalse\n{% endcodeblock %}","slug":"Table-Driven-Design-Example","published":1,"updated":"2016-04-14T14:56:27.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvs004ry0kw43iyeh0a","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let result;</span><br><span class=\"line\">if (isBar) &#123;</span><br><span class=\"line\">   if (isBaz) &#123;</span><br><span class=\"line\">      result = &apos;foo truetrue&apos;;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">      result = &apos;foo truefalse&apos;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">   if (isBaz) &#123;</span><br><span class=\"line\">      result = &apos;foo falsetrue&apos;;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">      result = &apos;foo falsefalse&apos;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Can be reduced to</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fooByIsBarIsBaz = &#123;&#125;;</span><br><span class=\"line\">fooByIsBarIsBaz[true] = &#123;&#125;;</span><br><span class=\"line\">fooByIsBarIsBaz[true][true] = &apos;foo truetrue&apos;;</span><br><span class=\"line\">fooByIsBarIsBaz[true][false] = &apos;foo truefalse&apos;;</span><br><span class=\"line\">fooByIsBarIsBaz[false] = &#123;&#125;;</span><br><span class=\"line\">fooByIsBarIsBaz[false][true] = &apos;foo falsetrue&apos;;</span><br><span class=\"line\">fooByIsBarIsBaz[false][false] = &apos;foo falsefalse&apos;;</span><br><span class=\"line\">const result = fooByIsBarIsBaz[isBar][isBaz];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(fooByIsBarIsBaz); // &#123; false: &#123; false: &quot;foo falsefalse&quot;, true: &quot;foo falsetrue&quot; ...</span><br><span class=\"line\">console.log(fooByIsBarIsBaz[true][false]); // foo truefalse</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let result;</span><br><span class=\"line\">if (isBar) &#123;</span><br><span class=\"line\">   if (isBaz) &#123;</span><br><span class=\"line\">      result = &apos;foo truetrue&apos;;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">      result = &apos;foo truefalse&apos;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">   if (isBaz) &#123;</span><br><span class=\"line\">      result = &apos;foo falsetrue&apos;;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">      result = &apos;foo falsefalse&apos;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Can be reduced to</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fooByIsBarIsBaz = &#123;&#125;;</span><br><span class=\"line\">fooByIsBarIsBaz[true] = &#123;&#125;;</span><br><span class=\"line\">fooByIsBarIsBaz[true][true] = &apos;foo truetrue&apos;;</span><br><span class=\"line\">fooByIsBarIsBaz[true][false] = &apos;foo truefalse&apos;;</span><br><span class=\"line\">fooByIsBarIsBaz[false] = &#123;&#125;;</span><br><span class=\"line\">fooByIsBarIsBaz[false][true] = &apos;foo falsetrue&apos;;</span><br><span class=\"line\">fooByIsBarIsBaz[false][false] = &apos;foo falsefalse&apos;;</span><br><span class=\"line\">const result = fooByIsBarIsBaz[isBar][isBaz];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(fooByIsBarIsBaz); // &#123; false: &#123; false: &quot;foo falsefalse&quot;, true: &quot;foo falsetrue&quot; ...</span><br><span class=\"line\">console.log(fooByIsBarIsBaz[true][false]); // foo truefalse</span><br></pre></td></tr></table></figure>"},{"title":"Testable JavaScript Presentation","date":"2013-11-11T00:00:00.000Z","_content":"Mark Trostler has a [great presentation](http://www.infoq.com/presentations/javascript-testing) on creating testable JavaScript.\n\n* Create all of the objects the system will ever need at the start (composition root) by building a tree of dependencies.  \n   * Create general objects at application start and user/session specific objects at the request start.\n  * Use an IOC/DI framework that is configured once at the start to constructor inject the dependencies.\n* Cross-cutting concerns - Concerns that affect many areas of your application.  They cut across your application and do not align with modules.\n  * Keep orthogonal responsibilities separate.\n  * Examples: Logging, validation, auditing, caching, security, profiling, exception handling, retry logic, authentication, authorization, encryption, etc.\n  * Use decorator pattern to create wrappers around your business objects that handle the cross-cutting concerns.\n  * Use your IOC container to wire up decorator chains.\n* Run-time (short-lived) dependancies - Can't pass into constructor because we don't know what they will need until run-time (user has to pick).\n  * Pass run-time values into a factory pattern to get dependencies.\n  * Factory implementation is created at composition root and injected as a dependency via the constructor.\n* Program and test to interfaces.  \n  * Interfaces are the API.\n  * Don't worry about hiding via closures (revealing module pattern) just use the interfaces.\n  * Create many small interfaces that have a single responsibility.\n\n[Presentation Link](http://www.infoq.com/presentations/javascript-testing)","source":"_posts/Testable-JavaScript-Presentation.md","raw":"---\ntitle: Testable JavaScript Presentation\ndate: 2013-11-11 00:00:00\ntags:\n- Random\n- ECMAScript\n- Testing\n---\nMark Trostler has a [great presentation](http://www.infoq.com/presentations/javascript-testing) on creating testable JavaScript.\n\n* Create all of the objects the system will ever need at the start (composition root) by building a tree of dependencies.  \n   * Create general objects at application start and user/session specific objects at the request start.\n  * Use an IOC/DI framework that is configured once at the start to constructor inject the dependencies.\n* Cross-cutting concerns - Concerns that affect many areas of your application.  They cut across your application and do not align with modules.\n  * Keep orthogonal responsibilities separate.\n  * Examples: Logging, validation, auditing, caching, security, profiling, exception handling, retry logic, authentication, authorization, encryption, etc.\n  * Use decorator pattern to create wrappers around your business objects that handle the cross-cutting concerns.\n  * Use your IOC container to wire up decorator chains.\n* Run-time (short-lived) dependancies - Can't pass into constructor because we don't know what they will need until run-time (user has to pick).\n  * Pass run-time values into a factory pattern to get dependencies.\n  * Factory implementation is created at composition root and injected as a dependency via the constructor.\n* Program and test to interfaces.  \n  * Interfaces are the API.\n  * Don't worry about hiding via closures (revealing module pattern) just use the interfaces.\n  * Create many small interfaces that have a single responsibility.\n\n[Presentation Link](http://www.infoq.com/presentations/javascript-testing)","slug":"Testable-JavaScript-Presentation","published":1,"updated":"2016-04-14T14:56:22.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvt004uy0kw82cwd34i","content":"<p>Mark Trostler has a <a href=\"http://www.infoq.com/presentations/javascript-testing\" target=\"_blank\" rel=\"external\">great presentation</a> on creating testable JavaScript.</p>\n<ul>\n<li>Create all of the objects the system will ever need at the start (composition root) by building a tree of dependencies.  <ul>\n<li>Create general objects at application start and user/session specific objects at the request start.<ul>\n<li>Use an IOC/DI framework that is configured once at the start to constructor inject the dependencies.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cross-cutting concerns - Concerns that affect many areas of your application.  They cut across your application and do not align with modules.<ul>\n<li>Keep orthogonal responsibilities separate.</li>\n<li>Examples: Logging, validation, auditing, caching, security, profiling, exception handling, retry logic, authentication, authorization, encryption, etc.</li>\n<li>Use decorator pattern to create wrappers around your business objects that handle the cross-cutting concerns.</li>\n<li>Use your IOC container to wire up decorator chains.</li>\n</ul>\n</li>\n<li>Run-time (short-lived) dependancies - Can’t pass into constructor because we don’t know what they will need until run-time (user has to pick).<ul>\n<li>Pass run-time values into a factory pattern to get dependencies.</li>\n<li>Factory implementation is created at composition root and injected as a dependency via the constructor.</li>\n</ul>\n</li>\n<li>Program and test to interfaces.  <ul>\n<li>Interfaces are the API.</li>\n<li>Don’t worry about hiding via closures (revealing module pattern) just use the interfaces.</li>\n<li>Create many small interfaces that have a single responsibility.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://www.infoq.com/presentations/javascript-testing\" target=\"_blank\" rel=\"external\">Presentation Link</a></p>\n","excerpt":"","more":"<p>Mark Trostler has a <a href=\"http://www.infoq.com/presentations/javascript-testing\">great presentation</a> on creating testable JavaScript.</p>\n<ul>\n<li>Create all of the objects the system will ever need at the start (composition root) by building a tree of dependencies.  <ul>\n<li>Create general objects at application start and user/session specific objects at the request start.<ul>\n<li>Use an IOC/DI framework that is configured once at the start to constructor inject the dependencies.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cross-cutting concerns - Concerns that affect many areas of your application.  They cut across your application and do not align with modules.<ul>\n<li>Keep orthogonal responsibilities separate.</li>\n<li>Examples: Logging, validation, auditing, caching, security, profiling, exception handling, retry logic, authentication, authorization, encryption, etc.</li>\n<li>Use decorator pattern to create wrappers around your business objects that handle the cross-cutting concerns.</li>\n<li>Use your IOC container to wire up decorator chains.</li>\n</ul>\n</li>\n<li>Run-time (short-lived) dependancies - Can’t pass into constructor because we don’t know what they will need until run-time (user has to pick).<ul>\n<li>Pass run-time values into a factory pattern to get dependencies.</li>\n<li>Factory implementation is created at composition root and injected as a dependency via the constructor.</li>\n</ul>\n</li>\n<li>Program and test to interfaces.  <ul>\n<li>Interfaces are the API.</li>\n<li>Don’t worry about hiding via closures (revealing module pattern) just use the interfaces.</li>\n<li>Create many small interfaces that have a single responsibility.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://www.infoq.com/presentations/javascript-testing\">Presentation Link</a></p>\n"},{"title":"Text Mining with Twitter and R Meetup","date":"2016-04-29T00:00:00.000Z","_content":"A follow along workshop on using R to do data mining on tweets.\n\n**Notes**\n* Data pipeline: **E**xtract → **C**lean → **T**ransform → **A**nalyize\n* Clean\n  * Remove: Unicode emoji, punctuation, links, stop words, numbers, dates, URLs, white space\n  * Normalize to lowercase\n  * <u>Stemming</u> - Truncate words to their radicals\n    * Examples: cats → cat, ponies → poni\n* Analysis\n  * <u>Part of speech tagging</u> - Tag each word with its part of speech in a sentence using definition and context.\n    * Example: They refuse to permit -> [pronoun] [verb] [to] [verb]\n  * <u>Word association</u> - Dot product of two words in a term document matrix gives correlation coefficient.\n  * <u>Clustering</u> - Grouping similar tweets(docs) together\n    * <u>K-means</u> - Centroidal model, each cluster is represented by a single mean vector.\n      * Algorithm: create random clusters → assign points to nearest cluster centroid → recalculate cluster centroids to the average of assigned data points → repeat.\n    * <u>Hierarchical</u> - Connectivity model\n    * Use cosine similarity as the distance function.  Cosine similarity normalizes for tweet(doc) length during the comparison.\n  * <u>Topic Mining</u> - Use probability of terms to discover information from documents.  Documents may belong to multiple topics.\n\n*Word association example:*\n\n| Docs | word 1 | word 2 | word 3 | word 4 |\n| - | - | - | - |\n| 1 | 0 | 0 | 0 | 0 |\n| 2 | 1 | 0 | 0 | 0 |\n| 3 | 1 | 1 | 0 | 0 |\n| 4 | 1 | 1 | 1 | 1 |\nCorrelation(word 2, word 3) = DotProduct([1,0,0,0], [1,1,0,0]) = 0.5\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/230320500/)","source":"_posts/Text-Mining-with-Twitter-and-R-Meetup.md","raw":"---\ntitle: Text Mining with Twitter and R Meetup\ndate: 2016-04-29 00:00:00\ntags:\n- Natural Language Processing\n- Meetup\n---\nA follow along workshop on using R to do data mining on tweets.\n\n**Notes**\n* Data pipeline: **E**xtract → **C**lean → **T**ransform → **A**nalyize\n* Clean\n  * Remove: Unicode emoji, punctuation, links, stop words, numbers, dates, URLs, white space\n  * Normalize to lowercase\n  * <u>Stemming</u> - Truncate words to their radicals\n    * Examples: cats → cat, ponies → poni\n* Analysis\n  * <u>Part of speech tagging</u> - Tag each word with its part of speech in a sentence using definition and context.\n    * Example: They refuse to permit -> [pronoun] [verb] [to] [verb]\n  * <u>Word association</u> - Dot product of two words in a term document matrix gives correlation coefficient.\n  * <u>Clustering</u> - Grouping similar tweets(docs) together\n    * <u>K-means</u> - Centroidal model, each cluster is represented by a single mean vector.\n      * Algorithm: create random clusters → assign points to nearest cluster centroid → recalculate cluster centroids to the average of assigned data points → repeat.\n    * <u>Hierarchical</u> - Connectivity model\n    * Use cosine similarity as the distance function.  Cosine similarity normalizes for tweet(doc) length during the comparison.\n  * <u>Topic Mining</u> - Use probability of terms to discover information from documents.  Documents may belong to multiple topics.\n\n*Word association example:*\n\n| Docs | word 1 | word 2 | word 3 | word 4 |\n| - | - | - | - |\n| 1 | 0 | 0 | 0 | 0 |\n| 2 | 1 | 0 | 0 | 0 |\n| 3 | 1 | 1 | 0 | 0 |\n| 4 | 1 | 1 | 1 | 1 |\nCorrelation(word 2, word 3) = DotProduct([1,0,0,0], [1,1,0,0]) = 0.5\n\n[Meetup Event](http://www.meetup.com/Waterloo-Data-Science/events/230320500/)","slug":"Text-Mining-with-Twitter-and-R-Meetup","published":1,"updated":"2016-05-02T15:40:39.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvu004wy0kwoaxy9ea9","content":"<p>A follow along workshop on using R to do data mining on tweets.</p>\n<p><strong>Notes</strong></p>\n<ul>\n<li>Data pipeline: <strong>E</strong>xtract → <strong>C</strong>lean → <strong>T</strong>ransform → <strong>A</strong>nalyize</li>\n<li>Clean<ul>\n<li>Remove: Unicode emoji, punctuation, links, stop words, numbers, dates, URLs, white space</li>\n<li>Normalize to lowercase</li>\n<li><u>Stemming</u> - Truncate words to their radicals<ul>\n<li>Examples: cats → cat, ponies → poni</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Analysis<ul>\n<li><u>Part of speech tagging</u> - Tag each word with its part of speech in a sentence using definition and context.<ul>\n<li>Example: They refuse to permit -&gt; [pronoun] [verb] [to] [verb]</li>\n</ul>\n</li>\n<li><u>Word association</u> - Dot product of two words in a term document matrix gives correlation coefficient.</li>\n<li><u>Clustering</u> - Grouping similar tweets(docs) together<ul>\n<li><u>K-means</u> - Centroidal model, each cluster is represented by a single mean vector.<ul>\n<li>Algorithm: create random clusters → assign points to nearest cluster centroid → recalculate cluster centroids to the average of assigned data points → repeat.</li>\n</ul>\n</li>\n<li><u>Hierarchical</u> - Connectivity model</li>\n<li>Use cosine similarity as the distance function.  Cosine similarity normalizes for tweet(doc) length during the comparison.</li>\n</ul>\n</li>\n<li><u>Topic Mining</u> - Use probability of terms to discover information from documents.  Documents may belong to multiple topics.</li>\n</ul>\n</li>\n</ul>\n<p><em>Word association example:</em></p>\n<table>\n<thead>\n<tr>\n<th>Docs</th>\n<th>word 1</th>\n<th>word 2</th>\n<th>word 3</th>\n<th>word 4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>Correlation(word 2, word 3) = DotProduct([1,0,0,0], [1,1,0,0]) = 0.5</p>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/230320500/\" target=\"_blank\" rel=\"external\">Meetup Event</a></p>\n","excerpt":"","more":"<p>A follow along workshop on using R to do data mining on tweets.</p>\n<p><strong>Notes</strong></p>\n<ul>\n<li>Data pipeline: <strong>E</strong>xtract → <strong>C</strong>lean → <strong>T</strong>ransform → <strong>A</strong>nalyize</li>\n<li>Clean<ul>\n<li>Remove: Unicode emoji, punctuation, links, stop words, numbers, dates, URLs, white space</li>\n<li>Normalize to lowercase</li>\n<li><u>Stemming</u> - Truncate words to their radicals<ul>\n<li>Examples: cats → cat, ponies → poni</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Analysis<ul>\n<li><u>Part of speech tagging</u> - Tag each word with its part of speech in a sentence using definition and context.<ul>\n<li>Example: They refuse to permit -&gt; [pronoun] [verb] [to] [verb]</li>\n</ul>\n</li>\n<li><u>Word association</u> - Dot product of two words in a term document matrix gives correlation coefficient.</li>\n<li><u>Clustering</u> - Grouping similar tweets(docs) together<ul>\n<li><u>K-means</u> - Centroidal model, each cluster is represented by a single mean vector.<ul>\n<li>Algorithm: create random clusters → assign points to nearest cluster centroid → recalculate cluster centroids to the average of assigned data points → repeat.</li>\n</ul>\n</li>\n<li><u>Hierarchical</u> - Connectivity model</li>\n<li>Use cosine similarity as the distance function.  Cosine similarity normalizes for tweet(doc) length during the comparison.</li>\n</ul>\n</li>\n<li><u>Topic Mining</u> - Use probability of terms to discover information from documents.  Documents may belong to multiple topics.</li>\n</ul>\n</li>\n</ul>\n<p><em>Word association example:</em></p>\n<table>\n<thead>\n<tr>\n<th>Docs</th>\n<th>word 1</th>\n<th>word 2</th>\n<th>word 3</th>\n<th>word 4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>Correlation(word 2, word 3) = DotProduct([1,0,0,0], [1,1,0,0]) = 0.5</p>\n<p><a href=\"http://www.meetup.com/Waterloo-Data-Science/events/230320500/\">Meetup Event</a></p>\n"},{"title":"Odds & Ends - September 2015","date":"2015-09-01T00:00:00.000Z","_content":"Thoughts, terms, and ideas I've come across over the last few months.\n\n* Mobile experiences fill gaps while we wait.  Nobody wants to wait while they wait.\n  1. Preform actions optimistically\n    * Show +1/Like/Comment before the request is even sent.  Show an error if it fails.\n  2. Adaptively pre-load content\n    * Load data before it's needed.\n    * Re-prioritize what to load based on user interest.\n  3. Move bits when no one is watching\n    * Send contact list while signing in.\n    * Start uploading files while the user is filling out the details.\n    * Send data as soon as part of it is ready to go and match it up on the server later.\n* Code reviews are like having a shared brain.\n* Shed load on social media sites by having shorter feeds.\n* Achieve loose coupling using notifications, events, signals, etc.\n* **Project scaling**\n  * Code standards so everything looks the same\n  * Unit tests and design documents so it's easy to switch implementations and modify.\n  * All you need a work priority queue with ideas and bugs.\n  * Be transparent.\n  * Don't be date focused!  It's too idealistic.\n  * Have short cycles, quick deliverables, and frequent estimates and re-estimates.\n* **Web crawling techniques**\n  1. Start at seed page and recursively follow all/subset of links.\n  2. Identify a pattern in the URL for pages you want.  Ex: resource/id/ and check every valid id in range.\n  3. Read the sitemap and choose which links to follow.\n* **Append only event stores**\n  * Observations about the world are recorded for perpetuity and the results of observations are calculated on demand.\n  * Example: Changes -> Append to transaction log -> DB is a roll-up view of the changes captured in the transaction log.\n  * Don't delete or update anything.  Just accrete new knowledge and distil new implications based upon your increasing knowledge.\n  * It's like a warehouse.  Shipments come in, shipments go out, and at any point, we can check the current inventory levels.","source":"_posts/Odds-Ends-September-2015.md","raw":"---\ntitle: Odds & Ends - September 2015\ndate: 2015-09-01 00:00:00\ntags:\n- Random\n- Odds & Ends\n---\nThoughts, terms, and ideas I've come across over the last few months.\n\n* Mobile experiences fill gaps while we wait.  Nobody wants to wait while they wait.\n  1. Preform actions optimistically\n    * Show +1/Like/Comment before the request is even sent.  Show an error if it fails.\n  2. Adaptively pre-load content\n    * Load data before it's needed.\n    * Re-prioritize what to load based on user interest.\n  3. Move bits when no one is watching\n    * Send contact list while signing in.\n    * Start uploading files while the user is filling out the details.\n    * Send data as soon as part of it is ready to go and match it up on the server later.\n* Code reviews are like having a shared brain.\n* Shed load on social media sites by having shorter feeds.\n* Achieve loose coupling using notifications, events, signals, etc.\n* **Project scaling**\n  * Code standards so everything looks the same\n  * Unit tests and design documents so it's easy to switch implementations and modify.\n  * All you need a work priority queue with ideas and bugs.\n  * Be transparent.\n  * Don't be date focused!  It's too idealistic.\n  * Have short cycles, quick deliverables, and frequent estimates and re-estimates.\n* **Web crawling techniques**\n  1. Start at seed page and recursively follow all/subset of links.\n  2. Identify a pattern in the URL for pages you want.  Ex: resource/id/ and check every valid id in range.\n  3. Read the sitemap and choose which links to follow.\n* **Append only event stores**\n  * Observations about the world are recorded for perpetuity and the results of observations are calculated on demand.\n  * Example: Changes -> Append to transaction log -> DB is a roll-up view of the changes captured in the transaction log.\n  * Don't delete or update anything.  Just accrete new knowledge and distil new implications based upon your increasing knowledge.\n  * It's like a warehouse.  Shipments come in, shipments go out, and at any point, we can check the current inventory levels.","slug":"Odds-Ends-September-2015","published":1,"updated":"2016-04-14T14:57:02.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvv004zy0kwo7d6mgaq","content":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Mobile experiences fill gaps while we wait.  Nobody wants to wait while they wait.<ol>\n<li>Preform actions optimistically<ul>\n<li>Show +1/Like/Comment before the request is even sent.  Show an error if it fails.</li>\n</ul>\n</li>\n<li>Adaptively pre-load content<ul>\n<li>Load data before it’s needed.</li>\n<li>Re-prioritize what to load based on user interest.</li>\n</ul>\n</li>\n<li>Move bits when no one is watching<ul>\n<li>Send contact list while signing in.</li>\n<li>Start uploading files while the user is filling out the details.</li>\n<li>Send data as soon as part of it is ready to go and match it up on the server later.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Code reviews are like having a shared brain.</li>\n<li>Shed load on social media sites by having shorter feeds.</li>\n<li>Achieve loose coupling using notifications, events, signals, etc.</li>\n<li><strong>Project scaling</strong><ul>\n<li>Code standards so everything looks the same</li>\n<li>Unit tests and design documents so it’s easy to switch implementations and modify.</li>\n<li>All you need a work priority queue with ideas and bugs.</li>\n<li>Be transparent.</li>\n<li>Don’t be date focused!  It’s too idealistic.</li>\n<li>Have short cycles, quick deliverables, and frequent estimates and re-estimates.</li>\n</ul>\n</li>\n<li><strong>Web crawling techniques</strong><ol>\n<li>Start at seed page and recursively follow all/subset of links.</li>\n<li>Identify a pattern in the URL for pages you want.  Ex: resource/id/ and check every valid id in range.</li>\n<li>Read the sitemap and choose which links to follow.</li>\n</ol>\n</li>\n<li><strong>Append only event stores</strong><ul>\n<li>Observations about the world are recorded for perpetuity and the results of observations are calculated on demand.</li>\n<li>Example: Changes -&gt; Append to transaction log -&gt; DB is a roll-up view of the changes captured in the transaction log.</li>\n<li>Don’t delete or update anything.  Just accrete new knowledge and distil new implications based upon your increasing knowledge.</li>\n<li>It’s like a warehouse.  Shipments come in, shipments go out, and at any point, we can check the current inventory levels.</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>Thoughts, terms, and ideas I’ve come across over the last few months.</p>\n<ul>\n<li>Mobile experiences fill gaps while we wait.  Nobody wants to wait while they wait.<ol>\n<li>Preform actions optimistically<ul>\n<li>Show +1/Like/Comment before the request is even sent.  Show an error if it fails.</li>\n</ul>\n</li>\n<li>Adaptively pre-load content<ul>\n<li>Load data before it’s needed.</li>\n<li>Re-prioritize what to load based on user interest.</li>\n</ul>\n</li>\n<li>Move bits when no one is watching<ul>\n<li>Send contact list while signing in.</li>\n<li>Start uploading files while the user is filling out the details.</li>\n<li>Send data as soon as part of it is ready to go and match it up on the server later.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Code reviews are like having a shared brain.</li>\n<li>Shed load on social media sites by having shorter feeds.</li>\n<li>Achieve loose coupling using notifications, events, signals, etc.</li>\n<li><strong>Project scaling</strong><ul>\n<li>Code standards so everything looks the same</li>\n<li>Unit tests and design documents so it’s easy to switch implementations and modify.</li>\n<li>All you need a work priority queue with ideas and bugs.</li>\n<li>Be transparent.</li>\n<li>Don’t be date focused!  It’s too idealistic.</li>\n<li>Have short cycles, quick deliverables, and frequent estimates and re-estimates.</li>\n</ul>\n</li>\n<li><strong>Web crawling techniques</strong><ol>\n<li>Start at seed page and recursively follow all/subset of links.</li>\n<li>Identify a pattern in the URL for pages you want.  Ex: resource/id/ and check every valid id in range.</li>\n<li>Read the sitemap and choose which links to follow.</li>\n</ol>\n</li>\n<li><strong>Append only event stores</strong><ul>\n<li>Observations about the world are recorded for perpetuity and the results of observations are calculated on demand.</li>\n<li>Example: Changes -&gt; Append to transaction log -&gt; DB is a roll-up view of the changes captured in the transaction log.</li>\n<li>Don’t delete or update anything.  Just accrete new knowledge and distil new implications based upon your increasing knowledge.</li>\n<li>It’s like a warehouse.  Shipments come in, shipments go out, and at any point, we can check the current inventory levels.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"The Algorithm Design Manual","date":"2015-06-01T00:00:00.000Z","_content":"Two books in one!\n* A guide on how to approach solving problems.\n* An Encyclopedia of algorithms and data structures.\n\nIf you want a sense of 'what's out there' in the world of algorithms and data structures then this is the book for you.  It doesn't go deep into any one topic but it does give you a sense of what problems a given algorithm might solve and some of the trade-offs to consider when applying it.\n\nHave a few minutes to burn? Just go to a random page and I guarantee you will learn something new.\n\n[Goodreads](https://www.goodreads.com/book/show/425208.The_Algorithm_Design_Manual?utm_medium=api&amp;utm_source=blog_book)","source":"_posts/The-Algorithm-Design-Manual.md","raw":"---\ntitle: The Algorithm Design Manual\ndate: 2015-06-01 00:00:00\ntags:\n- Books\n- Algorithms\n- μReview\n---\nTwo books in one!\n* A guide on how to approach solving problems.\n* An Encyclopedia of algorithms and data structures.\n\nIf you want a sense of 'what's out there' in the world of algorithms and data structures then this is the book for you.  It doesn't go deep into any one topic but it does give you a sense of what problems a given algorithm might solve and some of the trade-offs to consider when applying it.\n\nHave a few minutes to burn? Just go to a random page and I guarantee you will learn something new.\n\n[Goodreads](https://www.goodreads.com/book/show/425208.The_Algorithm_Design_Manual?utm_medium=api&amp;utm_source=blog_book)","slug":"The-Algorithm-Design-Manual","published":1,"updated":"2016-04-14T14:56:14.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvv0051y0kwy9qexd7n","content":"<p>Two books in one!</p>\n<ul>\n<li>A guide on how to approach solving problems.</li>\n<li>An Encyclopedia of algorithms and data structures.</li>\n</ul>\n<p>If you want a sense of ‘what’s out there’ in the world of algorithms and data structures then this is the book for you.  It doesn’t go deep into any one topic but it does give you a sense of what problems a given algorithm might solve and some of the trade-offs to consider when applying it.</p>\n<p>Have a few minutes to burn? Just go to a random page and I guarantee you will learn something new.</p>\n<p><a href=\"https://www.goodreads.com/book/show/425208.The_Algorithm_Design_Manual?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n","excerpt":"","more":"<p>Two books in one!</p>\n<ul>\n<li>A guide on how to approach solving problems.</li>\n<li>An Encyclopedia of algorithms and data structures.</li>\n</ul>\n<p>If you want a sense of ‘what’s out there’ in the world of algorithms and data structures then this is the book for you.  It doesn’t go deep into any one topic but it does give you a sense of what problems a given algorithm might solve and some of the trade-offs to consider when applying it.</p>\n<p>Have a few minutes to burn? Just go to a random page and I guarantee you will learn something new.</p>\n<p><a href=\"https://www.goodreads.com/book/show/425208.The_Algorithm_Design_Manual?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n"},{"title":"Web Intelligence and Big Data Course","date":"2013-04-28T00:00:00.000Z","_content":"I ended up ditching this course after about four weeks in ☹.  At some point, I'll come back and post the notes I took from the course.\n\n[Course Link](https://www.coursera.org/course/bigdata)\n\n1. *Look*\n2. *Listen*\n3. *Load - Part 1*\n4. *Load - Part 2*\n5. *Learn*\n6. *Connect*\n7. *Predict*\n8. *Guest Lecture*","source":"_posts/Web-Intelligence-and-Big-Data-Course.md","raw":"---\ntitle: Web Intelligence and Big Data Course\ndate: 2013-04-28 00:00:00        \ntags:\n- Courses\n- Failure\n- μReview\n---\nI ended up ditching this course after about four weeks in ☹.  At some point, I'll come back and post the notes I took from the course.\n\n[Course Link](https://www.coursera.org/course/bigdata)\n\n1. *Look*\n2. *Listen*\n3. *Load - Part 1*\n4. *Load - Part 2*\n5. *Learn*\n6. *Connect*\n7. *Predict*\n8. *Guest Lecture*","slug":"Web-Intelligence-and-Big-Data-Course","published":1,"updated":"2016-04-22T17:23:36.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvx0054y0kwep0vuzif","content":"<p>I ended up ditching this course after about four weeks in ☹.  At some point, I’ll come back and post the notes I took from the course.</p>\n<p><a href=\"https://www.coursera.org/course/bigdata\" target=\"_blank\" rel=\"external\">Course Link</a></p>\n<ol>\n<li><em>Look</em></li>\n<li><em>Listen</em></li>\n<li><em>Load - Part 1</em></li>\n<li><em>Load - Part 2</em></li>\n<li><em>Learn</em></li>\n<li><em>Connect</em></li>\n<li><em>Predict</em></li>\n<li><em>Guest Lecture</em></li>\n</ol>\n","excerpt":"","more":"<p>I ended up ditching this course after about four weeks in ☹.  At some point, I’ll come back and post the notes I took from the course.</p>\n<p><a href=\"https://www.coursera.org/course/bigdata\">Course Link</a></p>\n<ol>\n<li><em>Look</em></li>\n<li><em>Listen</em></li>\n<li><em>Load - Part 1</em></li>\n<li><em>Load - Part 2</em></li>\n<li><em>Learn</em></li>\n<li><em>Connect</em></li>\n<li><em>Predict</em></li>\n<li><em>Guest Lecture</em></li>\n</ol>\n"},{"title":"The Deadlock Empire","date":"2016-02-24T16:52:39.000Z","link":"https://deadlockempire.github.io/","_content":"Who doesn't enjoy throwing a monkey wrench into multi-threaded code?\n\n[Link](https://deadlockempire.github.io/)","source":"_posts/The-Deadlock-Empire.md","raw":"---\ntitle: The Deadlock Empire\ndate: 2016-02-24 16:52:39\nlink: https://deadlockempire.github.io/\ntags:\n- Gamification\n- Concurrency\n---\nWho doesn't enjoy throwing a monkey wrench into multi-threaded code?\n\n[Link](https://deadlockempire.github.io/)","slug":"The-Deadlock-Empire","published":1,"updated":"2016-04-14T14:56:10.159Z","comments":1,"layout":"post","photos":[],"_id":"cioeidjvy0056y0kwawurcac6","content":"<p>Who doesn’t enjoy throwing a monkey wrench into multi-threaded code?</p>\n<p><a href=\"https://deadlockempire.github.io/\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>Who doesn’t enjoy throwing a monkey wrench into multi-threaded code?</p>\n<p><a href=\"https://deadlockempire.github.io/\">Link</a></p>\n"},{"title":"What's new in CPUs since the 80s and how does it affect programmers?","date":"2015-03-15T00:00:00.000Z","_content":"Amazing post about how CPU and memory architecture has changed over the years.\n\n>  using predictable memory access patterns and operating on chunks of data that are smaller than your CPU cache will get you most of the benefit of modern caches.\n\n* Processor speed has increased much more than memory speed.  To work around this CPUs use:\n  * Caching - Fast access to frequently used data.\n  * Prefetching - Fast access by pre-loading data into the cache if the access pattern is predictable.  Example: sequential access of 8 bytes in a loop can achieve 22Gb/sec on 3Ghz processor out of a maximum 24Gb/sec (3Ghz * 8 bytes = 24,000,000,000 bytes/sec).\n* Out of order execution - Speculatively execute and re-order executions to avoid stalling on a single resource.  Instructions with dependencies will execute in the correct order with respect to one another.\n* There are no guarantees that interactions between cores will be ordered unless serializing instructors or memory fences are used.\n\n[Post](http://danluu.com/new-cpu-features/)","source":"_posts/What-s-new-in-CPUs-since-the-80s-and-how-does-it-affect-programmers.md","raw":"---\ntitle: \"What's new in CPUs since the 80s and how does it affect programmers?\"\ndate: 2015-03-15 00:00:00\ntags:\n- Optimization\n---\nAmazing post about how CPU and memory architecture has changed over the years.\n\n>  using predictable memory access patterns and operating on chunks of data that are smaller than your CPU cache will get you most of the benefit of modern caches.\n\n* Processor speed has increased much more than memory speed.  To work around this CPUs use:\n  * Caching - Fast access to frequently used data.\n  * Prefetching - Fast access by pre-loading data into the cache if the access pattern is predictable.  Example: sequential access of 8 bytes in a loop can achieve 22Gb/sec on 3Ghz processor out of a maximum 24Gb/sec (3Ghz * 8 bytes = 24,000,000,000 bytes/sec).\n* Out of order execution - Speculatively execute and re-order executions to avoid stalling on a single resource.  Instructions with dependencies will execute in the correct order with respect to one another.\n* There are no guarantees that interactions between cores will be ordered unless serializing instructors or memory fences are used.\n\n[Post](http://danluu.com/new-cpu-features/)","slug":"What-s-new-in-CPUs-since-the-80s-and-how-does-it-affect-programmers","published":1,"updated":"2016-04-14T14:56:02.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjvz0059y0kwaj998hhl","content":"<p>Amazing post about how CPU and memory architecture has changed over the years.</p>\n<blockquote>\n<p> using predictable memory access patterns and operating on chunks of data that are smaller than your CPU cache will get you most of the benefit of modern caches.</p>\n</blockquote>\n<ul>\n<li>Processor speed has increased much more than memory speed.  To work around this CPUs use:<ul>\n<li>Caching - Fast access to frequently used data.</li>\n<li>Prefetching - Fast access by pre-loading data into the cache if the access pattern is predictable.  Example: sequential access of 8 bytes in a loop can achieve 22Gb/sec on 3Ghz processor out of a maximum 24Gb/sec (3Ghz * 8 bytes = 24,000,000,000 bytes/sec).</li>\n</ul>\n</li>\n<li>Out of order execution - Speculatively execute and re-order executions to avoid stalling on a single resource.  Instructions with dependencies will execute in the correct order with respect to one another.</li>\n<li>There are no guarantees that interactions between cores will be ordered unless serializing instructors or memory fences are used.</li>\n</ul>\n<p><a href=\"http://danluu.com/new-cpu-features/\" target=\"_blank\" rel=\"external\">Post</a></p>\n","excerpt":"","more":"<p>Amazing post about how CPU and memory architecture has changed over the years.</p>\n<blockquote>\n<p> using predictable memory access patterns and operating on chunks of data that are smaller than your CPU cache will get you most of the benefit of modern caches.</p>\n</blockquote>\n<ul>\n<li>Processor speed has increased much more than memory speed.  To work around this CPUs use:<ul>\n<li>Caching - Fast access to frequently used data.</li>\n<li>Prefetching - Fast access by pre-loading data into the cache if the access pattern is predictable.  Example: sequential access of 8 bytes in a loop can achieve 22Gb/sec on 3Ghz processor out of a maximum 24Gb/sec (3Ghz * 8 bytes = 24,000,000,000 bytes/sec).</li>\n</ul>\n</li>\n<li>Out of order execution - Speculatively execute and re-order executions to avoid stalling on a single resource.  Instructions with dependencies will execute in the correct order with respect to one another.</li>\n<li>There are no guarantees that interactions between cores will be ordered unless serializing instructors or memory fences are used.</li>\n</ul>\n<p><a href=\"http://danluu.com/new-cpu-features/\">Post</a></p>\n"},{"title":"What Google Learned From Its Quest to Build the Perfect Team","date":"2016-02-25T18:31:15.000Z","_content":"An amazing New York Times article on what makes an effective team.  There were two key things they noticed about effective teams:\n\n> ... members spoke in roughly the same proportion, a phenomenon the researchers referred to as ‘equality in distribution of conversational turn-taking.’ On some teams, everyone spoke during each task; on others, leadership shifted among teammates from assignment to assignment. But in each case, by the end of the day, everyone had spoken roughly the same amount. ‘As long as everyone got a chance to talk, the team did well,’ Woolley said. ‘But if only one person or a small group spoke all the time, the collective intelligence declined.’\n\n> Second, the good teams all had high ‘average social sensitivity’ — a fancy way of saying they were skilled at intuiting how others felt based on their tone of voice, their expressions and other nonverbal cues.\n\n[Link](http://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html)","source":"_posts/What-Google-Learned-From-Its-Quest-to-Build-the-Perfect-Team.md","raw":"---\ntitle: What Google Learned From Its Quest to Build the Perfect Team\ndate: 2016-02-25 18:31:15\ntags:\n- Empirical Studies\n- Software Development Practices\n---\nAn amazing New York Times article on what makes an effective team.  There were two key things they noticed about effective teams:\n\n> ... members spoke in roughly the same proportion, a phenomenon the researchers referred to as ‘equality in distribution of conversational turn-taking.’ On some teams, everyone spoke during each task; on others, leadership shifted among teammates from assignment to assignment. But in each case, by the end of the day, everyone had spoken roughly the same amount. ‘As long as everyone got a chance to talk, the team did well,’ Woolley said. ‘But if only one person or a small group spoke all the time, the collective intelligence declined.’\n\n> Second, the good teams all had high ‘average social sensitivity’ — a fancy way of saying they were skilled at intuiting how others felt based on their tone of voice, their expressions and other nonverbal cues.\n\n[Link](http://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html)","slug":"What-Google-Learned-From-Its-Quest-to-Build-the-Perfect-Team","published":1,"updated":"2016-04-14T14:56:06.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjw0005by0kwoxr2hik3","content":"<p>An amazing New York Times article on what makes an effective team.  There were two key things they noticed about effective teams:</p>\n<blockquote>\n<p>… members spoke in roughly the same proportion, a phenomenon the researchers referred to as ‘equality in distribution of conversational turn-taking.’ On some teams, everyone spoke during each task; on others, leadership shifted among teammates from assignment to assignment. But in each case, by the end of the day, everyone had spoken roughly the same amount. ‘As long as everyone got a chance to talk, the team did well,’ Woolley said. ‘But if only one person or a small group spoke all the time, the collective intelligence declined.’</p>\n<p>Second, the good teams all had high ‘average social sensitivity’ — a fancy way of saying they were skilled at intuiting how others felt based on their tone of voice, their expressions and other nonverbal cues.</p>\n</blockquote>\n<p><a href=\"http://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>An amazing New York Times article on what makes an effective team.  There were two key things they noticed about effective teams:</p>\n<blockquote>\n<p>… members spoke in roughly the same proportion, a phenomenon the researchers referred to as ‘equality in distribution of conversational turn-taking.’ On some teams, everyone spoke during each task; on others, leadership shifted among teammates from assignment to assignment. But in each case, by the end of the day, everyone had spoken roughly the same amount. ‘As long as everyone got a chance to talk, the team did well,’ Woolley said. ‘But if only one person or a small group spoke all the time, the collective intelligence declined.’</p>\n<p>Second, the good teams all had high ‘average social sensitivity’ — a fancy way of saying they were skilled at intuiting how others felt based on their tone of voice, their expressions and other nonverbal cues.</p>\n</blockquote>\n<p><a href=\"http://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\">Link</a></p>\n"},{"title":"Why Should Software Architects Write Code","date":"2016-02-24T18:31:15.000Z","_content":"This seems like common sense but I haven't encountered a non-coding architect as of yet.\n\n> This provides empirical evidence on why software architect should write code or, at least, be engaged in the development of tactical fragments in a system.\n\n[Link](http://blog.ieeesoftware.org/2016/02/why-should-software-architects-write.html)","source":"_posts/Why-Should-Software-Architects-Write-Code.md","raw":"---\ntitle: Why Should Software Architects Write Code\ndate: 2016-02-24 18:31:15\ntags:\n- Empirical Studies\n- Software Development Practices\n---\nThis seems like common sense but I haven't encountered a non-coding architect as of yet.\n\n> This provides empirical evidence on why software architect should write code or, at least, be engaged in the development of tactical fragments in a system.\n\n[Link](http://blog.ieeesoftware.org/2016/02/why-should-software-architects-write.html)","slug":"Why-Should-Software-Architects-Write-Code","published":1,"updated":"2016-04-14T14:56:00.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjw1005ey0kwytpprpxe","content":"<p>This seems like common sense but I haven’t encountered a non-coding architect as of yet.</p>\n<blockquote>\n<p>This provides empirical evidence on why software architect should write code or, at least, be engaged in the development of tactical fragments in a system.</p>\n</blockquote>\n<p><a href=\"http://blog.ieeesoftware.org/2016/02/why-should-software-architects-write.html\" target=\"_blank\" rel=\"external\">Link</a></p>\n","excerpt":"","more":"<p>This seems like common sense but I haven’t encountered a non-coding architect as of yet.</p>\n<blockquote>\n<p>This provides empirical evidence on why software architect should write code or, at least, be engaged in the development of tactical fragments in a system.</p>\n</blockquote>\n<p><a href=\"http://blog.ieeesoftware.org/2016/02/why-should-software-architects-write.html\">Link</a></p>\n"},{"title":"Working Out Bayes' Theorem","date":"2014-05-03T00:00:00.000Z","_content":"*This is mostly an excuse to play around with the MathJax library*\n\n{% img /images/BayesDemo.png 200 200 %}\n\n$Num(A) = 50$\n$Num(B) = 15$\n$Num(A∩B) = 5$\n$Num(A∪B) = 65$\n\nGet probabilities from counts\n$P(A) = \\frac{50}{65} \\approx 0.769$\n$P(B) = \\frac{15}{65} \\approx 0.231$\n$P(A∩B) = \\frac{5}{65} \\approx 0.0769$\n\nGet conditional probabilities from counts\n$P(A|B) = \\frac{Num(A∩B)}{Num(B)} = \\frac{5}{15} \\approx 0.333$\n$P(B|A) = \\frac{Num(A∩B)}{Num(A)} = \\frac{5}{65} \\approx 0.077$\n\nUse the above to get counts from probabilities\n$Num(A) = P(A) \\times Num(A∪B) = \\frac{0.769}{65} = 50$\n$Num(B) = P(B) \\times Num(A∪B) = \\frac{0.231}{65} = 15$\n$Num(A∩B) = P(A|B) \\times Num(B) = \\frac{0.333}{15} = 5$\n$Num(A∩B) = P(B|A) \\times Num(A) = \\frac{0.077}{65} = 5$\n\nTurn counts into probabilities to get the conditional probability from other probabilities\n$P(A|B) = \\frac{Num(A∩B)}{Num(B)}$\n$P(A|B) = \\frac{P(B|A) \\times Num(A)}{P(B) \\times Num(A∪B)}$\n$P(A|B) = \\frac{P(B|A) \\times P(A) \\times Num(A∪B)}{P(B) \\times Num(A∪B)}$\n\n$Bayes' Theorem = P(A|B) = \\frac{P(B|A) \\times P(A)}{P(B)}$","source":"_posts/Working-Out-Bayes-Theorem.md","raw":"---\ntitle: \"Working Out Bayes' Theorem\"\ndate: 2014-05-03 00:00:00\ntags:\n- Random\n- Math\n---\n*This is mostly an excuse to play around with the MathJax library*\n\n{% img /images/BayesDemo.png 200 200 %}\n\n$Num(A) = 50$\n$Num(B) = 15$\n$Num(A∩B) = 5$\n$Num(A∪B) = 65$\n\nGet probabilities from counts\n$P(A) = \\frac{50}{65} \\approx 0.769$\n$P(B) = \\frac{15}{65} \\approx 0.231$\n$P(A∩B) = \\frac{5}{65} \\approx 0.0769$\n\nGet conditional probabilities from counts\n$P(A|B) = \\frac{Num(A∩B)}{Num(B)} = \\frac{5}{15} \\approx 0.333$\n$P(B|A) = \\frac{Num(A∩B)}{Num(A)} = \\frac{5}{65} \\approx 0.077$\n\nUse the above to get counts from probabilities\n$Num(A) = P(A) \\times Num(A∪B) = \\frac{0.769}{65} = 50$\n$Num(B) = P(B) \\times Num(A∪B) = \\frac{0.231}{65} = 15$\n$Num(A∩B) = P(A|B) \\times Num(B) = \\frac{0.333}{15} = 5$\n$Num(A∩B) = P(B|A) \\times Num(A) = \\frac{0.077}{65} = 5$\n\nTurn counts into probabilities to get the conditional probability from other probabilities\n$P(A|B) = \\frac{Num(A∩B)}{Num(B)}$\n$P(A|B) = \\frac{P(B|A) \\times Num(A)}{P(B) \\times Num(A∪B)}$\n$P(A|B) = \\frac{P(B|A) \\times P(A) \\times Num(A∪B)}{P(B) \\times Num(A∪B)}$\n\n$Bayes' Theorem = P(A|B) = \\frac{P(B|A) \\times P(A)}{P(B)}$","slug":"Working-Out-Bayes-Theorem","published":1,"updated":"2016-05-03T16:45:35.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjw2005gy0kwruxqw50f","content":"<p><em>This is mostly an excuse to play around with the MathJax library</em></p>\n<img src=\"/images/BayesDemo.png\" width=\"200\" height=\"200\">\n<p>$Num(A) = 50$<br>$Num(B) = 15$<br>$Num(A∩B) = 5$<br>$Num(A∪B) = 65$</p>\n<p>Get probabilities from counts<br>$P(A) = \\frac{50}{65} \\approx 0.769$<br>$P(B) = \\frac{15}{65} \\approx 0.231$<br>$P(A∩B) = \\frac{5}{65} \\approx 0.0769$</p>\n<p>Get conditional probabilities from counts<br>$P(A|B) = \\frac{Num(A∩B)}{Num(B)} = \\frac{5}{15} \\approx 0.333$<br>$P(B|A) = \\frac{Num(A∩B)}{Num(A)} = \\frac{5}{65} \\approx 0.077$</p>\n<p>Use the above to get counts from probabilities<br>$Num(A) = P(A) \\times Num(A∪B) = \\frac{0.769}{65} = 50$<br>$Num(B) = P(B) \\times Num(A∪B) = \\frac{0.231}{65} = 15$<br>$Num(A∩B) = P(A|B) \\times Num(B) = \\frac{0.333}{15} = 5$<br>$Num(A∩B) = P(B|A) \\times Num(A) = \\frac{0.077}{65} = 5$</p>\n<p>Turn counts into probabilities to get the conditional probability from other probabilities<br>$P(A|B) = \\frac{Num(A∩B)}{Num(B)}$<br>$P(A|B) = \\frac{P(B|A) \\times Num(A)}{P(B) \\times Num(A∪B)}$<br>$P(A|B) = \\frac{P(B|A) \\times P(A) \\times Num(A∪B)}{P(B) \\times Num(A∪B)}$</p>\n<p>$Bayes’ Theorem = P(A|B) = \\frac{P(B|A) \\times P(A)}{P(B)}$</p>\n","excerpt":"","more":"<p><em>This is mostly an excuse to play around with the MathJax library</em></p>\n<img src=\"/images/BayesDemo.png\" width=\"200\" height=\"200\">\n<p>$Num(A) = 50$<br>$Num(B) = 15$<br>$Num(A∩B) = 5$<br>$Num(A∪B) = 65$</p>\n<p>Get probabilities from counts<br>$P(A) = \\frac{50}{65} \\approx 0.769$<br>$P(B) = \\frac{15}{65} \\approx 0.231$<br>$P(A∩B) = \\frac{5}{65} \\approx 0.0769$</p>\n<p>Get conditional probabilities from counts<br>$P(A|B) = \\frac{Num(A∩B)}{Num(B)} = \\frac{5}{15} \\approx 0.333$<br>$P(B|A) = \\frac{Num(A∩B)}{Num(A)} = \\frac{5}{65} \\approx 0.077$</p>\n<p>Use the above to get counts from probabilities<br>$Num(A) = P(A) \\times Num(A∪B) = \\frac{0.769}{65} = 50$<br>$Num(B) = P(B) \\times Num(A∪B) = \\frac{0.231}{65} = 15$<br>$Num(A∩B) = P(A|B) \\times Num(B) = \\frac{0.333}{15} = 5$<br>$Num(A∩B) = P(B|A) \\times Num(A) = \\frac{0.077}{65} = 5$</p>\n<p>Turn counts into probabilities to get the conditional probability from other probabilities<br>$P(A|B) = \\frac{Num(A∩B)}{Num(B)}$<br>$P(A|B) = \\frac{P(B|A) \\times Num(A)}{P(B) \\times Num(A∪B)}$<br>$P(A|B) = \\frac{P(B|A) \\times P(A) \\times Num(A∪B)}{P(B) \\times Num(A∪B)}$</p>\n<p>$Bayes’ Theorem = P(A|B) = \\frac{P(B|A) \\times P(A)}{P(B)}$</p>\n"},{"title":"Working Effectively with Legacy Code Review","date":"2015-01-01T00:00:00.000Z","_content":"This book is about bringing your existing code under test so you can make changes without losing your mind.  Most books present a kind of clean room/fait accompli image of testing.  This book shows you how to crawl through the trenches struggling for some small incremental victory against the hordes of complexity and bit rot that surround your position.  I guess what I'm trying to say is you should buy this book.\n\n[Goodreads](https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code?utm_medium=api&utm_source=blog_book)\n\n**Chapter Notes**\n* *Forward*\n  * Requirements change.  Designs that cannot tolerate changing requirements are poor designs.\n  * Turn systems that gradually degrade into systems that gradually improve.\n* *Preface*\n  * With tests we can change the behavior of our code quickly and verifiably.  Without them, we really don't know if our code is getting better for worse.\n  * Don't be alarmed if some of the steps you take to cut out areas to start growing good code look ugly.  This is surgery.\n1. *Changing Software*\n  * Behavior is the most important thing about software.  It is what users depend on.\n  * Programmers don't attempt to improve a design because it is easy to lose behavior or create bad behavior in the process of doing it.\n  * Make a series of small structural modifications, supported by tests to make the code easier to change.\n2. *Working with Feeback*\n  * Changes in a system can be made in two primary ways: Edit and Pray or Cover and Modify.\n  * <u>Software Vise</u> - The behavior or the code is fixed in place.  When we make changes, we can know that we are changing only one piece of behavior at a time.\n  * Good tests are fast and allow you to localized problems quickly.\n3. *Sensing and Separation*\n4. *The Seam Model*\n  * How often are small pieces reused independently?  Not very often.  Reuse is tough.\n  * <u>Seam</u> - A place in the program where you alter behavior without editing that place.\n5. *Tools*\n6. *I Don't Have Much Time and I Have to Change It*\n  * Navigating through code that contains decorators that decorate other decorators is a lot like peeling away the layers of an onion.  It is necessary work, but it does make your eyes water.\n7. *It Takes Forever to Make a Change*\n  * Interfaces typically change far less than the code that implements them.  It's better to depend on interfaces or abstract classes than on volatile concrete classes.\n8. *How Do I Add a Feature*\n  * <u>Normalized Hierarchy</u> - No class has more than one implementation of a method.  None of the derived classes have a method that overrides a concrete method it inherited from a superclass.\n9. *I Can't Get This Class into a Test Harness*\n  * Don't pass null in production code unless you have no other choice.  You will end up with checks for null all over the place and a lot of conditional code that you used to figure out what you have and what you can do with it.\n10. *I Can't Run This Method in a Test Harness*\n  * If we need to test a private method it probably means our class is going too much.  Private methods can be moved to a new class where they can be public.\n  * <u>Command/Query Separation</u> - A method should be a command (modifies state and returns nothing) or a query (returns a value and doesn't modify state).  If something is a query we shouldn't have to look at its body to know we can call it several times in a row without causing some side effect.\n11. *I Need to Make a Change.  What Methods Should I Test?*\n  * Effects propagate in three ways\n    * Return values that are used by the caller.\n    * Modification of objects passed as parameters.\n    * Modification of static or global data.\n  * Programming gets easier as we narrow effects in a program.  We need to know less to understand the code.\n  * Encapsulation helps us reason about our code.  There are fewer paths to follow as you try to understand it.\n12. *I Need to Make Many Changes In One Area*\n13. *I Need to Make a Change, but I Don't Know What Tests to Write*\n  * <u>Characterization test<u/> - Characterizes the current behavior of a piece of code.\n  * Use tests as a medium of communication.  People can look at them and get a sense of what they can and cannot expect from a method.  Living documentation.\n  * All legacy code has bugs, usually in direct proportion to how little it is understood.\n14. *Dependencies on Libraries Are Killing Me*\n15. *My Application Is All API Calls*\n  * Code grows and grows, and things aren't quite as simple anymore.  Over time, we might still be able to see areas of code that don't touch the API, but they are embedded in a patchwork of untestable code.\n  * Nearly every system has core logic that can be peeled away from API calls.\n  * <u>Skin and Wrap the API</u> - Make an interface that mirrors the API and then create wrappers around the API.  The wrappers will delegate to the API code but we can test using our interface.\n  * <u>Responsibility-Based Extraction</u> - Identify responsibilities in the code and start extracting methods from them.\n16. *I Don't Understand the Code Well Enough to Change It*\n  * <u>Sketch refactoring</u> - Extract methods, move variables, refactor it whatever way you want to get a better understanding of it and then throw your changes away.\n17. *My Application Has No Structure*\n  * There is something mesmerizing about large chunks of procedural code: They seem to beg for more.\n18. *My Test Code Is in the Way*\n  * If you choose to separate test and production code, make sure it is for a good reason as it makes project navigation painful.\n19. *My Project Is Not Object Oriented.  How Do I Make Safe Changes?*\n20. *This Class is Too Big and I Don't Want It to Get Any Bigger*\n  * When a class has 20 or so responsibilities, changes are, you'll have an incredible number of reasons to change it.\n  * If there are too many private methods there may be another class inside that's dying to get out.\n  * Are there sections of code that could change in the future (ex: Db connection)?\n  * Are certain instance variables used by some methods and not others?\n  * Can you describe the responsibility of this class in once sentence?\n  * We care whether a class really does all the stuff in its interface or if it just delegates to a couple of other classes.  Facade classes which are a front end for a bunch of little classes don't violate SRP.\n  * <u>Interface Segregation Principle</u> - When clients do not use all of the methods of a class try grouping the methods client used together into separate interfaces.  We can then start to move code from the big class to a new class that uses the original class.\n21. *I'm Changing the Same Code All Over the Place*\n  * When two methods look roughly the same, extract the differences to other methods.  When you do that, you can often make them exactly the same and get rid of one.\n22. *I Need to Change a Monster Method and I Can't Write Tests For It*\n  * It pays to make a series of changes using only a refactoring tool.  This gives you a clean separation between changes that known to be safe and changes that aren't.\n  * When you have a conditional extract the condition and the body to two different methods to emphasize the logic.  Fixes the arrow head anti-pattern.\n  *  When you have a conditional extract the condition and the body into the same method to emphasize common sequences of operations.  Fixes bulleted methods.\n23. How Do I Know I'm Not Breaking Anything?\n  * <u>Leaning on the compiler</u> - Taking advantage of type checking and using it to identify changes you need to make.\n24. We Feel Overwhelmed.  It Isn't Going to Get Any Better*\n25. Dependency-Breaking Techniques\n  * Move towards interfaces that communicate responsibilities rather than implementation details.  This makes code easier to read and maintain.","source":"_posts/Working-Effectively-with-Legacy-Code.md","raw":"---\ntitle: Working Effectively with Legacy Code Review\ndate: 2015-01-01 00:00:00\ntags:\n- Books\n- Reviews\n- Testing\n---\nThis book is about bringing your existing code under test so you can make changes without losing your mind.  Most books present a kind of clean room/fait accompli image of testing.  This book shows you how to crawl through the trenches struggling for some small incremental victory against the hordes of complexity and bit rot that surround your position.  I guess what I'm trying to say is you should buy this book.\n\n[Goodreads](https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code?utm_medium=api&utm_source=blog_book)\n\n**Chapter Notes**\n* *Forward*\n  * Requirements change.  Designs that cannot tolerate changing requirements are poor designs.\n  * Turn systems that gradually degrade into systems that gradually improve.\n* *Preface*\n  * With tests we can change the behavior of our code quickly and verifiably.  Without them, we really don't know if our code is getting better for worse.\n  * Don't be alarmed if some of the steps you take to cut out areas to start growing good code look ugly.  This is surgery.\n1. *Changing Software*\n  * Behavior is the most important thing about software.  It is what users depend on.\n  * Programmers don't attempt to improve a design because it is easy to lose behavior or create bad behavior in the process of doing it.\n  * Make a series of small structural modifications, supported by tests to make the code easier to change.\n2. *Working with Feeback*\n  * Changes in a system can be made in two primary ways: Edit and Pray or Cover and Modify.\n  * <u>Software Vise</u> - The behavior or the code is fixed in place.  When we make changes, we can know that we are changing only one piece of behavior at a time.\n  * Good tests are fast and allow you to localized problems quickly.\n3. *Sensing and Separation*\n4. *The Seam Model*\n  * How often are small pieces reused independently?  Not very often.  Reuse is tough.\n  * <u>Seam</u> - A place in the program where you alter behavior without editing that place.\n5. *Tools*\n6. *I Don't Have Much Time and I Have to Change It*\n  * Navigating through code that contains decorators that decorate other decorators is a lot like peeling away the layers of an onion.  It is necessary work, but it does make your eyes water.\n7. *It Takes Forever to Make a Change*\n  * Interfaces typically change far less than the code that implements them.  It's better to depend on interfaces or abstract classes than on volatile concrete classes.\n8. *How Do I Add a Feature*\n  * <u>Normalized Hierarchy</u> - No class has more than one implementation of a method.  None of the derived classes have a method that overrides a concrete method it inherited from a superclass.\n9. *I Can't Get This Class into a Test Harness*\n  * Don't pass null in production code unless you have no other choice.  You will end up with checks for null all over the place and a lot of conditional code that you used to figure out what you have and what you can do with it.\n10. *I Can't Run This Method in a Test Harness*\n  * If we need to test a private method it probably means our class is going too much.  Private methods can be moved to a new class where they can be public.\n  * <u>Command/Query Separation</u> - A method should be a command (modifies state and returns nothing) or a query (returns a value and doesn't modify state).  If something is a query we shouldn't have to look at its body to know we can call it several times in a row without causing some side effect.\n11. *I Need to Make a Change.  What Methods Should I Test?*\n  * Effects propagate in three ways\n    * Return values that are used by the caller.\n    * Modification of objects passed as parameters.\n    * Modification of static or global data.\n  * Programming gets easier as we narrow effects in a program.  We need to know less to understand the code.\n  * Encapsulation helps us reason about our code.  There are fewer paths to follow as you try to understand it.\n12. *I Need to Make Many Changes In One Area*\n13. *I Need to Make a Change, but I Don't Know What Tests to Write*\n  * <u>Characterization test<u/> - Characterizes the current behavior of a piece of code.\n  * Use tests as a medium of communication.  People can look at them and get a sense of what they can and cannot expect from a method.  Living documentation.\n  * All legacy code has bugs, usually in direct proportion to how little it is understood.\n14. *Dependencies on Libraries Are Killing Me*\n15. *My Application Is All API Calls*\n  * Code grows and grows, and things aren't quite as simple anymore.  Over time, we might still be able to see areas of code that don't touch the API, but they are embedded in a patchwork of untestable code.\n  * Nearly every system has core logic that can be peeled away from API calls.\n  * <u>Skin and Wrap the API</u> - Make an interface that mirrors the API and then create wrappers around the API.  The wrappers will delegate to the API code but we can test using our interface.\n  * <u>Responsibility-Based Extraction</u> - Identify responsibilities in the code and start extracting methods from them.\n16. *I Don't Understand the Code Well Enough to Change It*\n  * <u>Sketch refactoring</u> - Extract methods, move variables, refactor it whatever way you want to get a better understanding of it and then throw your changes away.\n17. *My Application Has No Structure*\n  * There is something mesmerizing about large chunks of procedural code: They seem to beg for more.\n18. *My Test Code Is in the Way*\n  * If you choose to separate test and production code, make sure it is for a good reason as it makes project navigation painful.\n19. *My Project Is Not Object Oriented.  How Do I Make Safe Changes?*\n20. *This Class is Too Big and I Don't Want It to Get Any Bigger*\n  * When a class has 20 or so responsibilities, changes are, you'll have an incredible number of reasons to change it.\n  * If there are too many private methods there may be another class inside that's dying to get out.\n  * Are there sections of code that could change in the future (ex: Db connection)?\n  * Are certain instance variables used by some methods and not others?\n  * Can you describe the responsibility of this class in once sentence?\n  * We care whether a class really does all the stuff in its interface or if it just delegates to a couple of other classes.  Facade classes which are a front end for a bunch of little classes don't violate SRP.\n  * <u>Interface Segregation Principle</u> - When clients do not use all of the methods of a class try grouping the methods client used together into separate interfaces.  We can then start to move code from the big class to a new class that uses the original class.\n21. *I'm Changing the Same Code All Over the Place*\n  * When two methods look roughly the same, extract the differences to other methods.  When you do that, you can often make them exactly the same and get rid of one.\n22. *I Need to Change a Monster Method and I Can't Write Tests For It*\n  * It pays to make a series of changes using only a refactoring tool.  This gives you a clean separation between changes that known to be safe and changes that aren't.\n  * When you have a conditional extract the condition and the body to two different methods to emphasize the logic.  Fixes the arrow head anti-pattern.\n  *  When you have a conditional extract the condition and the body into the same method to emphasize common sequences of operations.  Fixes bulleted methods.\n23. How Do I Know I'm Not Breaking Anything?\n  * <u>Leaning on the compiler</u> - Taking advantage of type checking and using it to identify changes you need to make.\n24. We Feel Overwhelmed.  It Isn't Going to Get Any Better*\n25. Dependency-Breaking Techniques\n  * Move towards interfaces that communicate responsibilities rather than implementation details.  This makes code easier to read and maintain.","slug":"Working-Effectively-with-Legacy-Code","published":1,"updated":"2016-04-21T19:12:16.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjw3005jy0kwernofvy4","content":"<p>This book is about bringing your existing code under test so you can make changes without losing your mind.  Most books present a kind of clean room/fait accompli image of testing.  This book shows you how to crawl through the trenches struggling for some small incremental victory against the hordes of complexity and bit rot that surround your position.  I guess what I’m trying to say is you should buy this book.</p>\n<p><a href=\"https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code?utm_medium=api&amp;utm_source=blog_book\" target=\"_blank\" rel=\"external\">Goodreads</a></p>\n<p><strong>Chapter Notes</strong></p>\n<ul>\n<li><em>Forward</em><ul>\n<li>Requirements change.  Designs that cannot tolerate changing requirements are poor designs.</li>\n<li>Turn systems that gradually degrade into systems that gradually improve.</li>\n</ul>\n</li>\n<li><em>Preface</em><ul>\n<li>With tests we can change the behavior of our code quickly and verifiably.  Without them, we really don’t know if our code is getting better for worse.</li>\n<li>Don’t be alarmed if some of the steps you take to cut out areas to start growing good code look ugly.  This is surgery.</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><em>Changing Software</em><ul>\n<li>Behavior is the most important thing about software.  It is what users depend on.</li>\n<li>Programmers don’t attempt to improve a design because it is easy to lose behavior or create bad behavior in the process of doing it.</li>\n<li>Make a series of small structural modifications, supported by tests to make the code easier to change.</li>\n</ul>\n</li>\n<li><em>Working with Feeback</em><ul>\n<li>Changes in a system can be made in two primary ways: Edit and Pray or Cover and Modify.</li>\n<li><u>Software Vise</u> - The behavior or the code is fixed in place.  When we make changes, we can know that we are changing only one piece of behavior at a time.</li>\n<li>Good tests are fast and allow you to localized problems quickly.</li>\n</ul>\n</li>\n<li><em>Sensing and Separation</em></li>\n<li><em>The Seam Model</em><ul>\n<li>How often are small pieces reused independently?  Not very often.  Reuse is tough.</li>\n<li><u>Seam</u> - A place in the program where you alter behavior without editing that place.</li>\n</ul>\n</li>\n<li><em>Tools</em></li>\n<li><em>I Don’t Have Much Time and I Have to Change It</em><ul>\n<li>Navigating through code that contains decorators that decorate other decorators is a lot like peeling away the layers of an onion.  It is necessary work, but it does make your eyes water.</li>\n</ul>\n</li>\n<li><em>It Takes Forever to Make a Change</em><ul>\n<li>Interfaces typically change far less than the code that implements them.  It’s better to depend on interfaces or abstract classes than on volatile concrete classes.</li>\n</ul>\n</li>\n<li><em>How Do I Add a Feature</em><ul>\n<li><u>Normalized Hierarchy</u> - No class has more than one implementation of a method.  None of the derived classes have a method that overrides a concrete method it inherited from a superclass.</li>\n</ul>\n</li>\n<li><em>I Can’t Get This Class into a Test Harness</em><ul>\n<li>Don’t pass null in production code unless you have no other choice.  You will end up with checks for null all over the place and a lot of conditional code that you used to figure out what you have and what you can do with it.</li>\n</ul>\n</li>\n<li><em>I Can’t Run This Method in a Test Harness</em><ul>\n<li>If we need to test a private method it probably means our class is going too much.  Private methods can be moved to a new class where they can be public.</li>\n<li><u>Command/Query Separation</u> - A method should be a command (modifies state and returns nothing) or a query (returns a value and doesn’t modify state).  If something is a query we shouldn’t have to look at its body to know we can call it several times in a row without causing some side effect.</li>\n</ul>\n</li>\n<li><em>I Need to Make a Change.  What Methods Should I Test?</em><ul>\n<li>Effects propagate in three ways</li>\n<li>Return values that are used by the caller.</li>\n<li>Modification of objects passed as parameters.</li>\n<li>Modification of static or global data.</li>\n<li>Programming gets easier as we narrow effects in a program.  We need to know less to understand the code.</li>\n<li>Encapsulation helps us reason about our code.  There are fewer paths to follow as you try to understand it.</li>\n</ul>\n</li>\n<li><em>I Need to Make Many Changes In One Area</em></li>\n<li><em>I Need to Make a Change, but I Don’t Know What Tests to Write</em><ul>\n<li><u>Characterization test<u> - Characterizes the current behavior of a piece of code.</u></u></li>\n<li>Use tests as a medium of communication.  People can look at them and get a sense of what they can and cannot expect from a method.  Living documentation.</li>\n<li>All legacy code has bugs, usually in direct proportion to how little it is understood.</li>\n</ul>\n</li>\n<li><em>Dependencies on Libraries Are Killing Me</em></li>\n<li><em>My Application Is All API Calls</em><ul>\n<li>Code grows and grows, and things aren’t quite as simple anymore.  Over time, we might still be able to see areas of code that don’t touch the API, but they are embedded in a patchwork of untestable code.</li>\n<li>Nearly every system has core logic that can be peeled away from API calls.</li>\n<li><u>Skin and Wrap the API</u> - Make an interface that mirrors the API and then create wrappers around the API.  The wrappers will delegate to the API code but we can test using our interface.</li>\n<li><u>Responsibility-Based Extraction</u> - Identify responsibilities in the code and start extracting methods from them.</li>\n</ul>\n</li>\n<li><em>I Don’t Understand the Code Well Enough to Change It</em><ul>\n<li><u>Sketch refactoring</u> - Extract methods, move variables, refactor it whatever way you want to get a better understanding of it and then throw your changes away.</li>\n</ul>\n</li>\n<li><em>My Application Has No Structure</em><ul>\n<li>There is something mesmerizing about large chunks of procedural code: They seem to beg for more.</li>\n</ul>\n</li>\n<li><em>My Test Code Is in the Way</em><ul>\n<li>If you choose to separate test and production code, make sure it is for a good reason as it makes project navigation painful.</li>\n</ul>\n</li>\n<li><em>My Project Is Not Object Oriented.  How Do I Make Safe Changes?</em></li>\n<li><em>This Class is Too Big and I Don’t Want It to Get Any Bigger</em><ul>\n<li>When a class has 20 or so responsibilities, changes are, you’ll have an incredible number of reasons to change it.</li>\n<li>If there are too many private methods there may be another class inside that’s dying to get out.</li>\n<li>Are there sections of code that could change in the future (ex: Db connection)?</li>\n<li>Are certain instance variables used by some methods and not others?</li>\n<li>Can you describe the responsibility of this class in once sentence?</li>\n<li>We care whether a class really does all the stuff in its interface or if it just delegates to a couple of other classes.  Facade classes which are a front end for a bunch of little classes don’t violate SRP.</li>\n<li><u>Interface Segregation Principle</u> - When clients do not use all of the methods of a class try grouping the methods client used together into separate interfaces.  We can then start to move code from the big class to a new class that uses the original class.</li>\n</ul>\n</li>\n<li><em>I’m Changing the Same Code All Over the Place</em><ul>\n<li>When two methods look roughly the same, extract the differences to other methods.  When you do that, you can often make them exactly the same and get rid of one.</li>\n</ul>\n</li>\n<li><em>I Need to Change a Monster Method and I Can’t Write Tests For It</em><ul>\n<li>It pays to make a series of changes using only a refactoring tool.  This gives you a clean separation between changes that known to be safe and changes that aren’t.</li>\n<li>When you have a conditional extract the condition and the body to two different methods to emphasize the logic.  Fixes the arrow head anti-pattern.</li>\n<li>When you have a conditional extract the condition and the body into the same method to emphasize common sequences of operations.  Fixes bulleted methods.</li>\n</ul>\n</li>\n<li>How Do I Know I’m Not Breaking Anything?<ul>\n<li><u>Leaning on the compiler</u> - Taking advantage of type checking and using it to identify changes you need to make.</li>\n</ul>\n</li>\n<li>We Feel Overwhelmed.  It Isn’t Going to Get Any Better*</li>\n<li>Dependency-Breaking Techniques<ul>\n<li>Move towards interfaces that communicate responsibilities rather than implementation details.  This makes code easier to read and maintain.</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>This book is about bringing your existing code under test so you can make changes without losing your mind.  Most books present a kind of clean room/fait accompli image of testing.  This book shows you how to crawl through the trenches struggling for some small incremental victory against the hordes of complexity and bit rot that surround your position.  I guess what I’m trying to say is you should buy this book.</p>\n<p><a href=\"https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code?utm_medium=api&amp;utm_source=blog_book\">Goodreads</a></p>\n<p><strong>Chapter Notes</strong></p>\n<ul>\n<li><em>Forward</em><ul>\n<li>Requirements change.  Designs that cannot tolerate changing requirements are poor designs.</li>\n<li>Turn systems that gradually degrade into systems that gradually improve.</li>\n</ul>\n</li>\n<li><em>Preface</em><ul>\n<li>With tests we can change the behavior of our code quickly and verifiably.  Without them, we really don’t know if our code is getting better for worse.</li>\n<li>Don’t be alarmed if some of the steps you take to cut out areas to start growing good code look ugly.  This is surgery.</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><em>Changing Software</em><ul>\n<li>Behavior is the most important thing about software.  It is what users depend on.</li>\n<li>Programmers don’t attempt to improve a design because it is easy to lose behavior or create bad behavior in the process of doing it.</li>\n<li>Make a series of small structural modifications, supported by tests to make the code easier to change.</li>\n</ul>\n</li>\n<li><em>Working with Feeback</em><ul>\n<li>Changes in a system can be made in two primary ways: Edit and Pray or Cover and Modify.</li>\n<li><u>Software Vise</u> - The behavior or the code is fixed in place.  When we make changes, we can know that we are changing only one piece of behavior at a time.</li>\n<li>Good tests are fast and allow you to localized problems quickly.</li>\n</ul>\n</li>\n<li><em>Sensing and Separation</em></li>\n<li><em>The Seam Model</em><ul>\n<li>How often are small pieces reused independently?  Not very often.  Reuse is tough.</li>\n<li><u>Seam</u> - A place in the program where you alter behavior without editing that place.</li>\n</ul>\n</li>\n<li><em>Tools</em></li>\n<li><em>I Don’t Have Much Time and I Have to Change It</em><ul>\n<li>Navigating through code that contains decorators that decorate other decorators is a lot like peeling away the layers of an onion.  It is necessary work, but it does make your eyes water.</li>\n</ul>\n</li>\n<li><em>It Takes Forever to Make a Change</em><ul>\n<li>Interfaces typically change far less than the code that implements them.  It’s better to depend on interfaces or abstract classes than on volatile concrete classes.</li>\n</ul>\n</li>\n<li><em>How Do I Add a Feature</em><ul>\n<li><u>Normalized Hierarchy</u> - No class has more than one implementation of a method.  None of the derived classes have a method that overrides a concrete method it inherited from a superclass.</li>\n</ul>\n</li>\n<li><em>I Can’t Get This Class into a Test Harness</em><ul>\n<li>Don’t pass null in production code unless you have no other choice.  You will end up with checks for null all over the place and a lot of conditional code that you used to figure out what you have and what you can do with it.</li>\n</ul>\n</li>\n<li><em>I Can’t Run This Method in a Test Harness</em><ul>\n<li>If we need to test a private method it probably means our class is going too much.  Private methods can be moved to a new class where they can be public.</li>\n<li><u>Command/Query Separation</u> - A method should be a command (modifies state and returns nothing) or a query (returns a value and doesn’t modify state).  If something is a query we shouldn’t have to look at its body to know we can call it several times in a row without causing some side effect.</li>\n</ul>\n</li>\n<li><em>I Need to Make a Change.  What Methods Should I Test?</em><ul>\n<li>Effects propagate in three ways</li>\n<li>Return values that are used by the caller.</li>\n<li>Modification of objects passed as parameters.</li>\n<li>Modification of static or global data.</li>\n<li>Programming gets easier as we narrow effects in a program.  We need to know less to understand the code.</li>\n<li>Encapsulation helps us reason about our code.  There are fewer paths to follow as you try to understand it.</li>\n</ul>\n</li>\n<li><em>I Need to Make Many Changes In One Area</em></li>\n<li><em>I Need to Make a Change, but I Don’t Know What Tests to Write</em><ul>\n<li><u>Characterization test<u/> - Characterizes the current behavior of a piece of code.</li>\n<li>Use tests as a medium of communication.  People can look at them and get a sense of what they can and cannot expect from a method.  Living documentation.</li>\n<li>All legacy code has bugs, usually in direct proportion to how little it is understood.</li>\n</ul>\n</li>\n<li><em>Dependencies on Libraries Are Killing Me</em></li>\n<li><em>My Application Is All API Calls</em><ul>\n<li>Code grows and grows, and things aren’t quite as simple anymore.  Over time, we might still be able to see areas of code that don’t touch the API, but they are embedded in a patchwork of untestable code.</li>\n<li>Nearly every system has core logic that can be peeled away from API calls.</li>\n<li><u>Skin and Wrap the API</u> - Make an interface that mirrors the API and then create wrappers around the API.  The wrappers will delegate to the API code but we can test using our interface.</li>\n<li><u>Responsibility-Based Extraction</u> - Identify responsibilities in the code and start extracting methods from them.</li>\n</ul>\n</li>\n<li><em>I Don’t Understand the Code Well Enough to Change It</em><ul>\n<li><u>Sketch refactoring</u> - Extract methods, move variables, refactor it whatever way you want to get a better understanding of it and then throw your changes away.</li>\n</ul>\n</li>\n<li><em>My Application Has No Structure</em><ul>\n<li>There is something mesmerizing about large chunks of procedural code: They seem to beg for more.</li>\n</ul>\n</li>\n<li><em>My Test Code Is in the Way</em><ul>\n<li>If you choose to separate test and production code, make sure it is for a good reason as it makes project navigation painful.</li>\n</ul>\n</li>\n<li><em>My Project Is Not Object Oriented.  How Do I Make Safe Changes?</em></li>\n<li><em>This Class is Too Big and I Don’t Want It to Get Any Bigger</em><ul>\n<li>When a class has 20 or so responsibilities, changes are, you’ll have an incredible number of reasons to change it.</li>\n<li>If there are too many private methods there may be another class inside that’s dying to get out.</li>\n<li>Are there sections of code that could change in the future (ex: Db connection)?</li>\n<li>Are certain instance variables used by some methods and not others?</li>\n<li>Can you describe the responsibility of this class in once sentence?</li>\n<li>We care whether a class really does all the stuff in its interface or if it just delegates to a couple of other classes.  Facade classes which are a front end for a bunch of little classes don’t violate SRP.</li>\n<li><u>Interface Segregation Principle</u> - When clients do not use all of the methods of a class try grouping the methods client used together into separate interfaces.  We can then start to move code from the big class to a new class that uses the original class.</li>\n</ul>\n</li>\n<li><em>I’m Changing the Same Code All Over the Place</em><ul>\n<li>When two methods look roughly the same, extract the differences to other methods.  When you do that, you can often make them exactly the same and get rid of one.</li>\n</ul>\n</li>\n<li><em>I Need to Change a Monster Method and I Can’t Write Tests For It</em><ul>\n<li>It pays to make a series of changes using only a refactoring tool.  This gives you a clean separation between changes that known to be safe and changes that aren’t.</li>\n<li>When you have a conditional extract the condition and the body to two different methods to emphasize the logic.  Fixes the arrow head anti-pattern.</li>\n<li>When you have a conditional extract the condition and the body into the same method to emphasize common sequences of operations.  Fixes bulleted methods.</li>\n</ul>\n</li>\n<li>How Do I Know I’m Not Breaking Anything?<ul>\n<li><u>Leaning on the compiler</u> - Taking advantage of type checking and using it to identify changes you need to make.</li>\n</ul>\n</li>\n<li>We Feel Overwhelmed.  It Isn’t Going to Get Any Better*</li>\n<li>Dependency-Breaking Techniques<ul>\n<li>Move towards interfaces that communicate responsibilities rather than implementation details.  This makes code easier to read and maintain.</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Postmortem of a Global GCE Outage","date":"2016-04-14T10:23:48.000Z","_content":"Google compute engine (GCE) was down globally for 18 minutes on the 11th.  The usual culprit of configuration error was present but there was also a series of bugs that combined together to propagate a bad configuration into production.\n\nIt's fascinating how small things combine to wreak havoc on large scale systems.  Google is constantly testing so I imagine theses bugs have been quietly waiting in edge case land until random chance brings them together.  With enough scale and complexity, the improbable becomes probable.\n\n[Incident Report](https://status.cloud.google.com/incident/compute/16007)","source":"_posts/Postmortem-for-global-GCE-outage.md","raw":"---\ntitle: Postmortem of a Global GCE Outage\ndate: 2016-04-14 10:23:48\ntags:\n- Distributed Systems\n---\nGoogle compute engine (GCE) was down globally for 18 minutes on the 11th.  The usual culprit of configuration error was present but there was also a series of bugs that combined together to propagate a bad configuration into production.\n\nIt's fascinating how small things combine to wreak havoc on large scale systems.  Google is constantly testing so I imagine theses bugs have been quietly waiting in edge case land until random chance brings them together.  With enough scale and complexity, the improbable becomes probable.\n\n[Incident Report](https://status.cloud.google.com/incident/compute/16007)","slug":"Postmortem-for-global-GCE-outage","published":1,"updated":"2016-04-14T22:54:57.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cioeidjw4005ly0kwfo9n48dk","content":"<p>Google compute engine (GCE) was down globally for 18 minutes on the 11th.  The usual culprit of configuration error was present but there was also a series of bugs that combined together to propagate a bad configuration into production.</p>\n<p>It’s fascinating how small things combine to wreak havoc on large scale systems.  Google is constantly testing so I imagine theses bugs have been quietly waiting in edge case land until random chance brings them together.  With enough scale and complexity, the improbable becomes probable.</p>\n<p><a href=\"https://status.cloud.google.com/incident/compute/16007\" target=\"_blank\" rel=\"external\">Incident Report</a></p>\n","excerpt":"","more":"<p>Google compute engine (GCE) was down globally for 18 minutes on the 11th.  The usual culprit of configuration error was present but there was also a series of bugs that combined together to propagate a bad configuration into production.</p>\n<p>It’s fascinating how small things combine to wreak havoc on large scale systems.  Google is constantly testing so I imagine theses bugs have been quietly waiting in edge case land until random chance brings them together.  With enough scale and complexity, the improbable becomes probable.</p>\n<p><a href=\"https://status.cloud.google.com/incident/compute/16007\">Incident Report</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cioeidjro0000y0kwm7mytehl","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjsx000ey0kwj62t67ha"},{"post_id":"cioeidjro0000y0kwm7mytehl","tag_id":"cioeidjs40005y0kw36ppt1il","_id":"cioeidjsz000gy0kwoahxxp9t"},{"post_id":"cioeidjro0000y0kwm7mytehl","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjt1000jy0kwx4w5rk2r"},{"post_id":"cioeidjsx000dy0kwodb103mv","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjt2000ly0kw4tuch65a"},{"post_id":"cioeidjsx000dy0kwodb103mv","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjt3000oy0kw8oqbsjrs"},{"post_id":"cioeidjt2000ny0kw6qp0ea45","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjt5000qy0kwbhpyrsok"},{"post_id":"cioeidjt2000ny0kw6qp0ea45","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjt8000ty0kw1ocyufgn"},{"post_id":"cioeidjrt0001y0kwr2fkaec1","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjta000vy0kw0gqtsop5"},{"post_id":"cioeidjrt0001y0kwr2fkaec1","tag_id":"cioeidjsz000hy0kw3m5rsn9m","_id":"cioeidjtb000yy0kw38x5jhtc"},{"post_id":"cioeidjrt0001y0kwr2fkaec1","tag_id":"cioeidjt2000my0kwm0vlmphx","_id":"cioeidjtc0010y0kw6tkc4e5i"},{"post_id":"cioeidjt5000ry0kwi7qts6gj","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjte0013y0kwn8jt65s6"},{"post_id":"cioeidjt5000ry0kwi7qts6gj","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjtg0015y0kw98jvku1e"},{"post_id":"cioeidjtb000zy0kwm5ic0xa8","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjtj0018y0kwc26ibx6w"},{"post_id":"cioeidjtb000zy0kwm5ic0xa8","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjtj001ay0kw1ocfmxx1"},{"post_id":"cioeidjs00003y0kwl1rkx3u4","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjtl001cy0kwzolvewd1"},{"post_id":"cioeidjs00003y0kwl1rkx3u4","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjtn001fy0kw81d1iyo2"},{"post_id":"cioeidjs10004y0kwulifhjr3","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjtp001hy0kwwsyxnxcz"},{"post_id":"cioeidjs10004y0kwulifhjr3","tag_id":"cioeidjti0017y0kwhx12ky9p","_id":"cioeidjts001ky0kw6i6m33xn"},{"post_id":"cioeidjto001gy0kwc8a01uzr","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjtu001my0kwct0wzctm"},{"post_id":"cioeidjs40006y0kw4ozm35w8","tag_id":"cioeidjtl001dy0kwyugo3fe5","_id":"cioeidjtw001py0kwks5l7p1z"},{"post_id":"cioeidjs70007y0kwffmuygwx","tag_id":"cioeidjtl001dy0kwyugo3fe5","_id":"cioeidjtx001ry0kw0otwbuqs"},{"post_id":"cioeidjs80008y0kwn7qrxtbe","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidju5001yy0kwz36ek1te"},{"post_id":"cioeidjs80008y0kwn7qrxtbe","tag_id":"cioeidjtz001ty0kw2kim8hja","_id":"cioeidju60020y0kwib34bln0"},{"post_id":"cioeidjsc000ay0kwf76okdkq","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjuf002cy0kwiwxd3qi4"},{"post_id":"cioeidjsc000ay0kwf76okdkq","tag_id":"cioeidjsz000hy0kw3m5rsn9m","_id":"cioeidjuh002ey0kwt1vvhb1p"},{"post_id":"cioeidjsc000ay0kwf76okdkq","tag_id":"cioeidju80024y0kw5kuzla8p","_id":"cioeidjuj002hy0kw2tdvfbql"},{"post_id":"cioeidjsc000ay0kwf76okdkq","tag_id":"cioeidjub0027y0kwb4w6axav","_id":"cioeidjuk002jy0kwuho7r9p2"},{"post_id":"cioeidjue002by0kws1p84o5n","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjum002my0kwjz23qr9s"},{"post_id":"cioeidjue002by0kws1p84o5n","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjun002oy0kwl9jvfkbg"},{"post_id":"cioeidjui002gy0kw2ossnpyh","tag_id":"cioeidjtl001dy0kwyugo3fe5","_id":"cioeidjuo002ry0kwgiqsuu9b"},{"post_id":"cioeidjuj002iy0kwr92hmbtf","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjup002ty0kwm36gijri"},{"post_id":"cioeidjsv000by0kwjjo1bycj","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjur002wy0kwddpjtj7a"},{"post_id":"cioeidjsv000by0kwjjo1bycj","tag_id":"cioeidjuh002fy0kw0x9gvl0l","_id":"cioeidjus002yy0kwqnhb8iil"},{"post_id":"cioeidjul002ky0kwjfmi9eck","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjuu0031y0kwiayhit63"},{"post_id":"cioeidjul002ky0kwjfmi9eck","tag_id":"cioeidjs40005y0kw36ppt1il","_id":"cioeidjuv0033y0kwhlvytnbt"},{"post_id":"cioeidjul002ky0kwjfmi9eck","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjuw0035y0kw6481rc81"},{"post_id":"cioeidjsy000fy0kwyg5n4bfp","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjux0038y0kw8v3a4p4m"},{"post_id":"cioeidjun002py0kwaqmamwdl","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjuy003ay0kw4s7vufq8"},{"post_id":"cioeidjun002py0kwaqmamwdl","tag_id":"cioeidjsz000hy0kw3m5rsn9m","_id":"cioeidjuz003dy0kwckqj9sbo"},{"post_id":"cioeidjuo002sy0kwymp9ddjw","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjv0003fy0kw8y7kpltx"},{"post_id":"cioeidjuo002sy0kwymp9ddjw","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjv2003iy0kwolcdq08h"},{"post_id":"cioeidjur002xy0kw5tx8kxvg","tag_id":"cioeidjuq002vy0kw9m1rzeej","_id":"cioeidjv4003ky0kwlvt8b5pd"},{"post_id":"cioeidjt0000iy0kw1t18st3b","tag_id":"cioeidjuo002qy0kwuaez2hy2","_id":"cioeidjv6003ny0kwal1802is"},{"post_id":"cioeidjt0000iy0kw1t18st3b","tag_id":"cioeidjuq002vy0kw9m1rzeej","_id":"cioeidjv8003py0kw5yebpwyx"},{"post_id":"cioeidjt1000ky0kwzuqar60d","tag_id":"cioeidjuu0030y0kwz0yge60t","_id":"cioeidjva003sy0kwz5e75oqm"},{"post_id":"cioeidjt1000ky0kwzuqar60d","tag_id":"cioeidjuw0036y0kwkgo3jxqf","_id":"cioeidjvc003uy0kwjy6i79xj"},{"post_id":"cioeidjt3000py0kwe5ux9ael","tag_id":"cioeidjuz003cy0kwldmi5hzf","_id":"cioeidjvd003xy0kwwl2gu8oh"},{"post_id":"cioeidjt3000py0kwe5ux9ael","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjve003zy0kwum4hry7u"},{"post_id":"cioeidjt8000uy0kw28346dj6","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjvg0041y0kwk8wti52e"},{"post_id":"cioeidjt8000uy0kw28346dj6","tag_id":"cioeidjsz000hy0kw3m5rsn9m","_id":"cioeidjvh0044y0kwxwym3aev"},{"post_id":"cioeidjt8000uy0kw28346dj6","tag_id":"cioeidjub0027y0kwb4w6axav","_id":"cioeidjvi0046y0kwfvmui3ca"},{"post_id":"cioeidjt8000uy0kw28346dj6","tag_id":"cioeidjv9003ry0kwbtjo4wog","_id":"cioeidjvj0049y0kwvxgo5zng"},{"post_id":"cioeidjvd003yy0kwxlgh1qvm","tag_id":"cioeidjuo002qy0kwuaez2hy2","_id":"cioeidjvk004by0kwjulvsjwm"},{"post_id":"cioeidjvf0040y0kwon7m0l65","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjvl004ey0kwffdcadb4"},{"post_id":"cioeidjvf0040y0kwon7m0l65","tag_id":"cioeidjs40005y0kw36ppt1il","_id":"cioeidjvm004gy0kwkii31vvu"},{"post_id":"cioeidjvf0040y0kwon7m0l65","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjvo004jy0kw71t4x3hy"},{"post_id":"cioeidjvg0043y0kwcf29kh1x","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjvp004ly0kwb7iuz5cl"},{"post_id":"cioeidjvg0043y0kwcf29kh1x","tag_id":"cioeidjs40005y0kw36ppt1il","_id":"cioeidjvq004oy0kwsin0kt46"},{"post_id":"cioeidjvg0043y0kwcf29kh1x","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjvr004qy0kwfnei4tt3"},{"post_id":"cioeidjta000wy0kwu1g47lfk","tag_id":"cioeidjvd003wy0kwl0liuvrk","_id":"cioeidjvt004ty0kw4oikeidq"},{"post_id":"cioeidjta000wy0kwu1g47lfk","tag_id":"cioeidjvg0042y0kwl1ep2vw6","_id":"cioeidjvu004vy0kw5dib3y8o"},{"post_id":"cioeidjvi0047y0kwc9pd4mj7","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjvv004yy0kwh49nopk5"},{"post_id":"cioeidjvi0047y0kwc9pd4mj7","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjvv0050y0kwzzuxyxyb"},{"post_id":"cioeidjtc0011y0kw5k90uvs2","tag_id":"cioeidjvd003wy0kwl0liuvrk","_id":"cioeidjvw0053y0kwasuuuk0w"},{"post_id":"cioeidjtc0011y0kw5k90uvs2","tag_id":"cioeidjuw0036y0kwkgo3jxqf","_id":"cioeidjvy0055y0kw4n0ala4d"},{"post_id":"cioeidjvo004ky0kw2dinur9l","tag_id":"cioeidjvg0042y0kwl1ep2vw6","_id":"cioeidjvz0057y0kwvl14fpvl"},{"post_id":"cioeidjvp004my0kwnm2a4mgg","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjw0005ay0kwsopn65fn"},{"post_id":"cioeidjvp004my0kwnm2a4mgg","tag_id":"cioeidjs40005y0kw36ppt1il","_id":"cioeidjw0005cy0kwjdmoee67"},{"post_id":"cioeidjvp004my0kwnm2a4mgg","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjw2005fy0kwfyc5ekpk"},{"post_id":"cioeidjtf0014y0kwlpootwzw","tag_id":"cioeidjvn004iy0kwaqqdalro","_id":"cioeidjw3005hy0kwf7wglwqm"},{"post_id":"cioeidjtf0014y0kwlpootwzw","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjw4005ky0kw0lubukw8"},{"post_id":"cioeidjtg0016y0kwe6gjgai3","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjw4005my0kwvz916lrn"},{"post_id":"cioeidjtj0019y0kwxmgexti5","tag_id":"cioeidjvv004xy0kwbi0zwe0h","_id":"cioeidjw5005oy0kw3e4zbcu8"},{"post_id":"cioeidjvv0051y0kwy9qexd7n","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjw5005py0kwrudhw15w"},{"post_id":"cioeidjvv0051y0kwy9qexd7n","tag_id":"cioeidjt2000my0kwm0vlmphx","_id":"cioeidjw6005ry0kwu2mmkoop"},{"post_id":"cioeidjvv0051y0kwy9qexd7n","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjw6005sy0kw9s8l8y5h"},{"post_id":"cioeidjvx0054y0kwep0vuzif","tag_id":"cioeidjrx0002y0kwvkl33eif","_id":"cioeidjw6005uy0kws833rc1f"},{"post_id":"cioeidjvx0054y0kwep0vuzif","tag_id":"cioeidjti0017y0kwhx12ky9p","_id":"cioeidjw7005vy0kwzi3v88p0"},{"post_id":"cioeidjvx0054y0kwep0vuzif","tag_id":"cioeidjsb0009y0kwhob9e14o","_id":"cioeidjw7005xy0kwl9ffoekl"},{"post_id":"cioeidjtk001by0kwyf1kkdt8","tag_id":"cioeidjvw0052y0kwctazvv5w","_id":"cioeidjw8005yy0kwqmftyg77"},{"post_id":"cioeidjw0005by0kwoxr2hik3","tag_id":"cioeidjuu0030y0kwz0yge60t","_id":"cioeidjw90060y0kwtnfwbohg"},{"post_id":"cioeidjw0005by0kwoxr2hik3","tag_id":"cioeidjuw0036y0kwkgo3jxqf","_id":"cioeidjw90061y0kw0mjlpz1b"},{"post_id":"cioeidjtm001ey0kwpqel3wz4","tag_id":"cioeidjtl001dy0kwyugo3fe5","_id":"cioeidjw90063y0kwt4jzplea"},{"post_id":"cioeidjw1005ey0kwytpprpxe","tag_id":"cioeidjuu0030y0kwz0yge60t","_id":"cioeidjw90064y0kwp8a1zvwc"},{"post_id":"cioeidjw1005ey0kwytpprpxe","tag_id":"cioeidjuw0036y0kwkgo3jxqf","_id":"cioeidjwa0066y0kwtkca55qy"},{"post_id":"cioeidjw4005ly0kwfo9n48dk","tag_id":"cioeidjub0027y0kwb4w6axav","_id":"cioeidjwa0067y0kw456h8lys"},{"post_id":"cioeidjtq001jy0kwq8jslc9j","tag_id":"cioeidjuu0030y0kwz0yge60t","_id":"cioeidjwb0069y0kwad5jeue5"},{"post_id":"cioeidjtq001jy0kwq8jslc9j","tag_id":"cioeidjuw0036y0kwkgo3jxqf","_id":"cioeidjwb006ay0kwjd8kvkp6"},{"post_id":"cioeidjts001ly0kw7f3jqn2a","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwb006by0kwtan4g8e6"},{"post_id":"cioeidjts001ly0kw7f3jqn2a","tag_id":"cioeidjw6005qy0kw1szm9xj2","_id":"cioeidjwc006dy0kwdjdwie5v"},{"post_id":"cioeidjtv001oy0kwfmtt3gz5","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwc006ey0kw343mhx8n"},{"post_id":"cioeidjtv001oy0kwfmtt3gz5","tag_id":"cioeidjvg0042y0kwl1ep2vw6","_id":"cioeidjwd006gy0kwbelubjlp"},{"post_id":"cioeidjtx001qy0kwj7fp7oo2","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwe006hy0kwx9xligva"},{"post_id":"cioeidjtx001qy0kwj7fp7oo2","tag_id":"cioeidjw90062y0kw1d5av0q3","_id":"cioeidjwe006jy0kwyf89c8zv"},{"post_id":"cioeidjty001sy0kwqdlyvtx0","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwe006ky0kwckgxqw1c"},{"post_id":"cioeidjty001sy0kwqdlyvtx0","tag_id":"cioeidjwb0068y0kw76ccwlqz","_id":"cioeidjwf006my0kwcfrh8zdc"},{"post_id":"cioeidjty001sy0kwqdlyvtx0","tag_id":"cioeidjwc006cy0kw6buu0d9k","_id":"cioeidjwf006ny0kwshkquvpi"},{"post_id":"cioeidjtz001uy0kwk7hdr7om","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwg006py0kw0zzwskzc"},{"post_id":"cioeidjtz001uy0kwk7hdr7om","tag_id":"cioeidjvg0042y0kwl1ep2vw6","_id":"cioeidjwg006qy0kw47a5usu5"},{"post_id":"cioeidju3001vy0kwednjn5zm","tag_id":"cioeidjw90062y0kw1d5av0q3","_id":"cioeidjwh006sy0kwpl522rx9"},{"post_id":"cioeidju3001vy0kwednjn5zm","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwh006ty0kw2xi6rjb0"},{"post_id":"cioeidju4001xy0kwr9ivwn5k","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwi006wy0kwem6l0dx1"},{"post_id":"cioeidju4001xy0kwr9ivwn5k","tag_id":"cioeidjti0017y0kwhx12ky9p","_id":"cioeidjwi006xy0kwinm1hovr"},{"post_id":"cioeidju4001xy0kwr9ivwn5k","tag_id":"cioeidjw90062y0kw1d5av0q3","_id":"cioeidjwi006zy0kwdz3c4f6h"},{"post_id":"cioeidju5001zy0kw017wxo5u","tag_id":"cioeidjvn004iy0kwaqqdalro","_id":"cioeidjwj0070y0kwijq5bofw"},{"post_id":"cioeidju5001zy0kw017wxo5u","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjwj0072y0kwvh12pi7d"},{"post_id":"cioeidju70022y0kwi9lomgiz","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwj0074y0kwjyneq1zv"},{"post_id":"cioeidju70022y0kwi9lomgiz","tag_id":"cioeidjvg0042y0kwl1ep2vw6","_id":"cioeidjwk0075y0kwgb7d7twv"},{"post_id":"cioeidju80023y0kw97mvv6up","tag_id":"cioeidjwj0073y0kw5ecr18wi","_id":"cioeidjwk0078y0kwf3sdamo4"},{"post_id":"cioeidju80023y0kw97mvv6up","tag_id":"cioeidjwk0076y0kwwhz6qujc","_id":"cioeidjwk0079y0kwlxs8dybs"},{"post_id":"cioeidju90025y0kwylgwys98","tag_id":"cioeidjwk0077y0kwjhfzkgsm","_id":"cioeidjwl007cy0kw3vqn3rrj"},{"post_id":"cioeidju90025y0kwylgwys98","tag_id":"cioeidjwk007ay0kwdz9nj6lh","_id":"cioeidjwl007dy0kwp87p063p"},{"post_id":"cioeidjua0026y0kwfku2jyu2","tag_id":"cioeidjwl007by0kwpfsehpia","_id":"cioeidjwm007fy0kwc3khg9sv"},{"post_id":"cioeidjub0028y0kwlaj0uq3s","tag_id":"cioeidjvw0052y0kwctazvv5w","_id":"cioeidjwm007hy0kw54gzgh2l"},{"post_id":"cioeidjud0029y0kw82f1b9d4","tag_id":"cioeidjwk0077y0kwjhfzkgsm","_id":"cioeidjwn007jy0kwnqsuwzvv"},{"post_id":"cioeidjuf002dy0kw7hvkjav7","tag_id":"cioeidjwk0077y0kwjhfzkgsm","_id":"cioeidjwn007ly0kw08j0rssk"},{"post_id":"cioeidjun002ny0kw1ulfipui","tag_id":"cioeidjwk007ay0kwdz9nj6lh","_id":"cioeidjwo007ny0kwqmmlirrs"},{"post_id":"cioeidjuq002uy0kw0cim0jik","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjwo007py0kwtsevgaxk"},{"post_id":"cioeidjuq002uy0kw0cim0jik","tag_id":"cioeidjwk0076y0kwwhz6qujc","_id":"cioeidjwp007qy0kwe76mlhzo"},{"post_id":"cioeidjut002zy0kw84ylmsde","tag_id":"cioeidjw90062y0kw1d5av0q3","_id":"cioeidjwq007uy0kwwltl7gwa"},{"post_id":"cioeidjut002zy0kw84ylmsde","tag_id":"cioeidjw6005qy0kw1szm9xj2","_id":"cioeidjwq007vy0kw01a0nx7f"},{"post_id":"cioeidjut002zy0kw84ylmsde","tag_id":"cioeidjw5005ny0kwyowxq2ls","_id":"cioeidjwr007xy0kws8956kgk"},{"post_id":"cioeidjuv0032y0kwxoyuxjlw","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjwr007yy0kwrzfvk36c"},{"post_id":"cioeidjuv0032y0kwxoyuxjlw","tag_id":"cioeidjvn004iy0kwaqqdalro","_id":"cioeidjwr0080y0kw49kcfsr2"},{"post_id":"cioeidjuw0034y0kwoyt68wfw","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwr0081y0kwd8ocikqf"},{"post_id":"cioeidjuw0034y0kwoyt68wfw","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjws0083y0kwyf41of3g"},{"post_id":"cioeidjux0037y0kw7r00hkzo","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjws0084y0kw9nm56awl"},{"post_id":"cioeidjux0037y0kw7r00hkzo","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjwt0086y0kwnazj0cu1"},{"post_id":"cioeidjuy0039y0kwuxwmhqvf","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwt0087y0kwq7yndz7p"},{"post_id":"cioeidjuy0039y0kwuxwmhqvf","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjwu0089y0kwe60fijcy"},{"post_id":"cioeidjuy003by0kwntzzot0a","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwu008ay0kw66hrgyy0"},{"post_id":"cioeidjuy003by0kwntzzot0a","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjwv008cy0kweguj83k2"},{"post_id":"cioeidjv0003ey0kwk8khwatt","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwv008dy0kw589f5z0h"},{"post_id":"cioeidjv0003ey0kwk8khwatt","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjww008fy0kwqlw38pz7"},{"post_id":"cioeidjv1003gy0kwlkk2g6ik","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjww008gy0kw7wjffo0b"},{"post_id":"cioeidjv1003gy0kwlkk2g6ik","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjwx008iy0kwkzxvujh6"},{"post_id":"cioeidjv2003jy0kw042tvey5","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwx008jy0kw235ro9m2"},{"post_id":"cioeidjv2003jy0kw042tvey5","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjwy008ly0kwjeqx2mnj"},{"post_id":"cioeidjv4003ly0kwliudog31","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwy008my0kwupydvp6b"},{"post_id":"cioeidjv4003ly0kwliudog31","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjwz008oy0kw1ymfnqi2"},{"post_id":"cioeidjv6003oy0kw0qpuok5f","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjwz008py0kwrxkwtthe"},{"post_id":"cioeidjv6003oy0kw0qpuok5f","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjx1008ry0kwmvj168rz"},{"post_id":"cioeidjv8003qy0kwgsp2ozj0","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx1008sy0kw557libce"},{"post_id":"cioeidjv8003qy0kwgsp2ozj0","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjx2008uy0kwmq9tskea"},{"post_id":"cioeidjvb003ty0kwjlb5bv2m","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx2008vy0kw11zsps1g"},{"post_id":"cioeidjvb003ty0kwjlb5bv2m","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjx2008xy0kwd4ty7jlt"},{"post_id":"cioeidjvc003vy0kw2a7ppnn4","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx2008yy0kwjjthfnn4"},{"post_id":"cioeidjvc003vy0kw2a7ppnn4","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjx20090y0kwz1xt4upy"},{"post_id":"cioeidjvh0045y0kwdmiv021o","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx20091y0kwx10unqz3"},{"post_id":"cioeidjvh0045y0kwdmiv021o","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjx30093y0kw5xtcp9x0"},{"post_id":"cioeidjvk004ay0kwdt6rqi8s","tag_id":"cioeidjw6005qy0kw1szm9xj2","_id":"cioeidjx30095y0kwldsvg0ld"},{"post_id":"cioeidjvk004ay0kwdt6rqi8s","tag_id":"cioeidjw90062y0kw1d5av0q3","_id":"cioeidjx30096y0kwpwomf037"},{"post_id":"cioeidjvk004cy0kwek9ztfm5","tag_id":"cioeidjx30094y0kwoiwf0qpf","_id":"cioeidjx40098y0kw6pholdgg"},{"post_id":"cioeidjvm004fy0kwhcokfxd0","tag_id":"cioeidjvw0052y0kwctazvv5w","_id":"cioeidjx5009ay0kwzk67szwm"},{"post_id":"cioeidjvm004fy0kwhcokfxd0","tag_id":"cioeidjub0027y0kwb4w6axav","_id":"cioeidjx5009by0kw3d1m7fk0"},{"post_id":"cioeidjvn004hy0kwcrs6gkzw","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx5009dy0kw3njdu0fu"},{"post_id":"cioeidjvn004hy0kwcrs6gkzw","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjx5009ey0kwzlffgvo2"},{"post_id":"cioeidjvr004py0kwvw37ahw5","tag_id":"cioeidjx5009cy0kw2i7x4w1g","_id":"cioeidjx6009gy0kwpgxxd332"},{"post_id":"cioeidjvs004ry0kw43iyeh0a","tag_id":"cioeidjwk0076y0kwwhz6qujc","_id":"cioeidjx7009jy0kwxkfqzn8q"},{"post_id":"cioeidjvs004ry0kw43iyeh0a","tag_id":"cioeidjx6009hy0kwqcsom3jx","_id":"cioeidjx7009ky0kwj4yj1cp9"},{"post_id":"cioeidjvt004uy0kw82cwd34i","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx8009ny0kwkrbanxgc"},{"post_id":"cioeidjvt004uy0kw82cwd34i","tag_id":"cioeidjwk0076y0kwwhz6qujc","_id":"cioeidjx8009oy0kwhgwif5er"},{"post_id":"cioeidjvt004uy0kw82cwd34i","tag_id":"cioeidjx5009cy0kw2i7x4w1g","_id":"cioeidjx9009qy0kwd1bu7y3c"},{"post_id":"cioeidjvu004wy0kwoaxy9ea9","tag_id":"cioeidjw90062y0kw1d5av0q3","_id":"cioeidjx9009ry0kw7a7vtn1r"},{"post_id":"cioeidjvu004wy0kwoaxy9ea9","tag_id":"cioeidjtu001ny0kwntvu2qf8","_id":"cioeidjx9009ty0kw4d9iyf32"},{"post_id":"cioeidjvv004zy0kwo7d6mgaq","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjx9009uy0kwz2yrjlc3"},{"post_id":"cioeidjvv004zy0kwo7d6mgaq","tag_id":"cioeidjwq007wy0kw0x1nwgh5","_id":"cioeidjxa009wy0kwvvlwkkwd"},{"post_id":"cioeidjvy0056y0kwawurcac6","tag_id":"cioeidjuo002qy0kwuaez2hy2","_id":"cioeidjxa009xy0kwgofvi4dd"},{"post_id":"cioeidjvy0056y0kwawurcac6","tag_id":"cioeidjx9009sy0kwrgu2ulv1","_id":"cioeidjxb009zy0kwcx6tp0ur"},{"post_id":"cioeidjvz0059y0kwaj998hhl","tag_id":"cioeidjx9009vy0kwturi5hd2","_id":"cioeidjxb00a0y0kwqc11z4br"},{"post_id":"cioeidjw2005gy0kwruxqw50f","tag_id":"cioeidjtd0012y0kw28k7s77k","_id":"cioeidjxb00a2y0kwdy3jb0ni"},{"post_id":"cioeidjw2005gy0kwruxqw50f","tag_id":"cioeidjxa009yy0kwxet9ilxu","_id":"cioeidjxb00a3y0kw3vdbtr1m"},{"post_id":"cioeidjw3005jy0kwernofvy4","tag_id":"cioeidjsw000cy0kwy4iw4c8i","_id":"cioeidjxc00a4y0kwb67kjaiz"},{"post_id":"cioeidjw3005jy0kwernofvy4","tag_id":"cioeidjsz000hy0kw3m5rsn9m","_id":"cioeidjxc00a5y0kw5oxr69rp"},{"post_id":"cioeidjw3005jy0kwernofvy4","tag_id":"cioeidjx5009cy0kw2i7x4w1g","_id":"cioeidjxc00a6y0kwrmiywkw8"}],"Tag":[{"name":"Courses","_id":"cioeidjrx0002y0kwvkl33eif"},{"name":"MOOC","_id":"cioeidjs40005y0kw36ppt1il"},{"name":"μReview","_id":"cioeidjsb0009y0kwhob9e14o"},{"name":"Books","_id":"cioeidjsw000cy0kwy4iw4c8i"},{"name":"Reviews","_id":"cioeidjsz000hy0kw3m5rsn9m"},{"name":"Algorithms","_id":"cioeidjt2000my0kwm0vlmphx"},{"name":"Random","_id":"cioeidjtd0012y0kw28k7s77k"},{"name":"Failure","_id":"cioeidjti0017y0kwhx12ky9p"},{"name":"Electronics","_id":"cioeidjtl001dy0kwyugo3fe5"},{"name":"Meetup","_id":"cioeidjtu001ny0kwntvu2qf8"},{"name":"Purposeful Practice","_id":"cioeidjtz001ty0kw2kim8hja"},{"name":"Software Architectures","_id":"cioeidju80024y0kw5kuzla8p"},{"name":"Distributed Systems","_id":"cioeidjub0027y0kwb4w6axav"},{"name":"User Experience Design","_id":"cioeidjuh002fy0kw0x9gvl0l"},{"name":"Gamification","_id":"cioeidjuo002qy0kwuaez2hy2"},{"name":"Web","_id":"cioeidjuq002vy0kw9m1rzeej"},{"name":"Empirical Studies","_id":"cioeidjuu0030y0kwz0yge60t"},{"name":"Software Development Practices","_id":"cioeidjuw0036y0kwkgo3jxqf"},{"name":"DevOps","_id":"cioeidjuz003cy0kwldmi5hzf"},{"name":"Databases","_id":"cioeidjv9003ry0kwbtjo4wog"},{"name":"Presentations","_id":"cioeidjvd003wy0kwl0liuvrk"},{"name":"Data Structures","_id":"cioeidjvg0042y0kwl1ep2vw6"},{"name":"Data Science","_id":"cioeidjvn004iy0kwaqqdalro"},{"name":"Complexity","_id":"cioeidjvv004xy0kwbi0zwe0h"},{"name":"Visual Learning","_id":"cioeidjvw0052y0kwctazvv5w"},{"name":"Exploring","_id":"cioeidjw5005ny0kwyowxq2ls"},{"name":"Machine Learning","_id":"cioeidjw6005qy0kw1szm9xj2"},{"name":"Natural Language Processing","_id":"cioeidjw90062y0kw1d5av0q3"},{"name":"Data Orientated Design","_id":"cioeidjwb0068y0kw76ccwlqz"},{"name":"Game Engines","_id":"cioeidjwc006cy0kw6buu0d9k"},{"name":"React","_id":"cioeidjwj0073y0kw5ecr18wi"},{"name":"ECMAScript","_id":"cioeidjwk0076y0kwwhz6qujc"},{"name":"Conferences","_id":"cioeidjwk0077y0kwjhfzkgsm"},{"name":"Interviewing","_id":"cioeidjwk007ay0kwdz9nj6lh"},{"name":"Functional Programming","_id":"cioeidjwl007by0kwpfsehpia"},{"name":"Odds & Ends","_id":"cioeidjwq007wy0kw0x1nwgh5"},{"name":"C++","_id":"cioeidjx30094y0kwoiwf0qpf"},{"name":"Testing","_id":"cioeidjx5009cy0kw2i7x4w1g"},{"name":"Reduction","_id":"cioeidjx6009hy0kwqcsom3jx"},{"name":"Concurrency","_id":"cioeidjx9009sy0kwrgu2ulv1"},{"name":"Optimization","_id":"cioeidjx9009vy0kwturi5hd2"},{"name":"Math","_id":"cioeidjxa009yy0kwxet9ilxu"}]}}